-- $Header: simprim_VITAL.vhd,v 1.15 1998/06/08 18:27:57 dhimant Exp $
----------------------------------------------------------------
-- 
-- Created by the Synopsys Library Compiler v3.4a
-- FILENAME     :    simprim_VITAL.vhd
-- FILE CONTENTS:    Entity, Structural Architecture(VITAL),
--                   and Configuration
-- DATE CREATED :    Tue Mar 26 14:02:56 1996
-- 
-- LIBRARY      :    simprim
-- DATE ENTERED :    Tues Mar 12 16:22:19 1996
-- REVISION     :    1.0.4
-- TECHNOLOGY   :    fpga
-- TIME SCALE   :    1 ns
-- LOGIC SYSTEM :    IEEE-1164
-- NOTES        :    VITAL, TimingChecksOn(TRUE), XGenerationOn(TRUE), TimingMessage(FALSE), OnEvent 
   
-- HISTORY      :    1.  First created by runnning Synopsys LC V3.4a. DP, 03/26/96.
--                   2.  Manually added X_AND32, X_OR32, and X_XOR32, since LC
--                       hangs if given a 32-input gate. DP, 03/27/96.
--                   3.  Ran fix_arch to change architecture name from VITAL to
--                       <cell_name>_V, and configuration name from CFG_<cell_name>_VITAL
--                       to CFG_<cell_name>_V. DP, 03/27/96.
--                   4.  Changed all occurrences of VTABLES to VPACKAGE. DP, 03/28/96.
--                   5.  Removed X_RAM and X_RAMS, and added X_RAM16, X_RAM32, X_RAMS16,
--                       X_RAMS32, and X_RAMD16. DP, 03/28/96.
--                   6.  Changed port types in X_RAM16, X_RAM32, X_RAMS16, X_RAMS32, and 
--                       X_RAMD16 from std_logic to STD_ULOGIC. DP, 03/28/96.
--                   7.  Removed conditions from Period/Pulse Width checks in X_FF and
--                       X_LATCH. DP, 03/28/96.
--                   8.  Changed mode of port PAD in X_BPAD from out to inout. DP, 03/28/96.
--                   9.  Added RCS header. DP, 04/02/96.
--                  10.  Changed X_TRI pin name from T to CTL. DP, 04/23/96.
--                  11.  Changed X_RAMD16 pin name from DPO to O. DP, 05/01/96.
--                  12.  Changed:
--                       attribute VITAL_LEVEL1 of X_IPAD_V : architecture is TRUE;
--                       to:
--                       attribute VITAL_LEVEL0 of X_IPAD_V : architecture is TRUE;
--                       and:
--                       attribute VITAL_LEVEL1 of X_UPAD_V : architecture is TRUE;
--                       to:
--                       attribute VITAL_LEVEL0 of X_UPAD_V : architecture is TRUE;
--                       DP, 06/17/96.
--                  13.  Changed all occurrences of:
--                       VARIABLE PrevData(_O) : STD_LOGIC_VECTOR(1 to something)
--                       to:
--                       VARIABLE PrevData(_O) : STD_LOGIC_VECTOR(0 to something-1)
--                       DP, 06/17/96.
--                  14.  Changed values of Xon and MsgOn generics in all entity defintions
--                       from "False" and "True" to "True" and "False", respectively.
--                       DP, 01/22/97.
--                  15.  Changed value of MsgOn argument in timing constraint check
--                       procedure calls in X_FF, X_LATCH, X_RAM16, X_RAM32, X_RAMS16,
--                       X_RAMS32, and X_RAMD16 from "MsgOn" to "True". DP, 01/22/97.
--                  16.  For sake of consistency, changed default values of setup,
--                       hold, recovery, and pulse width constraints in X_FF, X_LATCH,
--                       X_RAM16, X_RAM32, X_RAMS16, X_RAMS32, and X_RAMD16 to 0.01 ns.
--                       DP, 01/23/96.
--                  17.  Changed values of Xon and MsgOn generics in all entity defintions
--                       back from "True" and "False" to "False" and "True", respectively.
--                       NOTE: THIS IS A TEMPORARY CHANGE DONE FOR A PATCH BUILD x1_2.6.
--                       DP, 02/04/97.
--                  18.  Changed values of Xon and MsgOn generics in all entity defintions
--                       from "False" and "True" to "True" and "False", respectively.
--                       DP, 05/01/97.
--                  19.  Changed value of Mode in VitalPathDelay procedure from OnDetect
--                       to OnEvent. DP, 05/01/97.
--                  20.  Added wait statements to X_RAM16 and X_RAM32 models to ensure
--                       that inputs are stable before RAM contents are accessed.
--                       DP, 05/13/97.
--                  21.  Added models for Virtex-related simprims. DP, 12/12/97.
--                  22.  Upgraded Viretx Dual-Port Block RAM model behavior for address
--                       collision per the simprim spec. DP, 02/05/98.
--                  23.  Modified wait statements in X_RAM16 and X_RAM32 models, and
--                       added wait statements to X_RAMS16, X_RAMS32 and X_RAMD16 
--                       models to conform to the corresponding models in the UNISIM
--                       library. DP, 02/05/98.
--                  24.  Modified wait statements in X_RAM16, X_RAM32, X_RAMS16, 
--                       X_RAMS32 and X_RAMD16 models, and added wait statement to
--                       X_SRLUT model. The wait statements now wait until 
--                       WE/CLK = '0' or '1'.  DP, 02/27/98.
--                  25.  Modified the above wait statements once more: the wait
--                       statements now also require the last value of CLK to be
--                       '0' or '1'. Also added similar wait statements to the
--                       block RAMs. DP, 04/02/98.
--                  26.  Added GSR port and associated timing generics, wire
--                       delay, recovery and removal checks, functionality and
--                       path delays to the block RAMs. DP, 04/03/98.
--                  27.  Added CLKDLL model. DP, 04/04/98.
--                  28.  Changed type of INIT generic in X_RAM16, X_RAM32, X_RAMS16,
--                       X_RAMS32 and X_RAMD16 from string to bit_vector. DP, 04/08/98.
--                  29.  Changed X_LUT* port names from I* to ADR*. DP, 04/15/98.
--                  30.  Changed X_SFF port names from AR/AS to RST/SET and
--                       SR/SS to SRST/SSET, respectively. DP, 04/15/98.
--                  31.  Added tpw_WE_negedge generic to X_RAM16 and X_RAM32.
--                       DP, 04/16/98.
--                  32.  Removed extraneous generics from X_BPAD, X_IPAD, X_ONE,
--                       X_OPAD, X_UPAD and X_ZERO. Also, simplified these models
--                       as much as possible. DP 04/28/98.
--                  33.  Modified wait statement in X_RAM16, X_RAM32, X_RAMS16,
--                       X_RAMS32 and X_RAMD16. DP, 05/04/98.
--                  34.  Added missing tpw_GSR_posedge generic and associated
--                       pulse width check to the X_RAMB* models. DP, 05/06/98.
--                  35.  Changed X_MUX2 port names from INA and INB to IA and IB
--                       for consistency with other simprims. DP, 05/18/98.
--                  36.  Fixed CR #105745: Block RAMs shouldn't fatal error if
--                       address is undefined. DP, 06/01/98.
--                  37.  Added conditions to block RAM RST wrt CLK setup/hold
--                       checks, CLK pulse width checks, and CLKA/CLKB wrt
--                       CLKB/CLKA setup checks. Also, turned messaging on in
--                       the CLKA/CLKB wrt CLKB/CLKA setup checks. DP, 06/06/98.
--                  38.  Changed all mappings HoldHigh => something_posedge_posedge
--                       to HoldLow => something_posedge_posedge and all mappings
--                       HoldLow => something_negedge_posedge to
--                       HoldHigh => something_negedge_posedge. DP, 06/06/98.
----------------------------------------------------------------

----- CELL X_AND2 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND2 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND2 : entity is TRUE;
end X_AND2;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND2_V of X_AND2 is
   attribute VITAL_LEVEL1 of X_AND2_V : architecture is TRUE;

   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I0_ipd) AND (I1_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 1 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND2_V;

configuration CFG_X_AND2_V of X_AND2 is
   for X_AND2_V
   end for;
end CFG_X_AND2_V;


----- CELL X_AND3 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND3 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND3 : entity is TRUE;
end X_AND3;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND3_V of X_AND3 is
   attribute VITAL_LEVEL1 of X_AND3_V : architecture is TRUE;

   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I1_ipd) AND (I2_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 1 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 2 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND3_V;

configuration CFG_X_AND3_V of X_AND3 is
   for X_AND3_V
   end for;
end CFG_X_AND3_V;


----- CELL X_AND4 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND4 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND4 : entity is TRUE;
end X_AND4;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND4_V of X_AND4 is
   attribute VITAL_LEVEL1 of X_AND4_V : architecture is TRUE;

   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I2_ipd) AND (I3_ipd) AND (I1_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 1 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 2 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 3 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND4_V;

configuration CFG_X_AND4_V of X_AND4 is
   for X_AND4_V
   end for;
end CFG_X_AND4_V;


----- CELL X_AND5 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND5 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND5 : entity is TRUE;
end X_AND5;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND5_V of X_AND5 is
   attribute VITAL_LEVEL1 of X_AND5_V : architecture is TRUE;

   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I3_ipd) AND (I4_ipd) AND (I2_ipd) AND (I1_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 1 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 2 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 3 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 4 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND5_V;

configuration CFG_X_AND5_V of X_AND5 is
   for X_AND5_V
   end for;
end CFG_X_AND5_V;


----- CELL X_AND6 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND6 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND6 : entity is TRUE;
end X_AND6;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND6_V of X_AND6 is
   attribute VITAL_LEVEL1 of X_AND6_V : architecture is TRUE;

   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I4_ipd) AND (I5_ipd) AND (I3_ipd) AND (I2_ipd) AND
              (I1_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 1 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 2 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 3 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 4 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 5 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND6_V;

configuration CFG_X_AND6_V of X_AND6 is
   for X_AND6_V
   end for;
end CFG_X_AND6_V;


----- CELL X_AND7 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND7 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND7 : entity is TRUE;
end X_AND7;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND7_V of X_AND7 is
   attribute VITAL_LEVEL1 of X_AND7_V : architecture is TRUE;

   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I5_ipd) AND (I6_ipd) AND (I4_ipd) AND (I3_ipd) AND
              (I2_ipd) AND (I1_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 1 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 2 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 3 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 4 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 5 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 6 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND7_V;

configuration CFG_X_AND7_V of X_AND7 is
   for X_AND7_V
   end for;
end CFG_X_AND7_V;


----- CELL X_AND8 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND8 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND8 : entity is TRUE;
end X_AND8;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND8_V of X_AND8 is
   attribute VITAL_LEVEL1 of X_AND8_V : architecture is TRUE;

   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I7_ipd, I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I6_ipd) AND (I7_ipd) AND (I5_ipd) AND (I4_ipd) AND
              (I3_ipd) AND (I2_ipd) AND (I1_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I7_ipd'last_event, tpd_I7_O, TRUE),
                 1 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 2 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 3 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 4 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 5 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 6 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 7 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND8_V;

configuration CFG_X_AND8_V of X_AND8 is
   for X_AND8_V
   end for;
end CFG_X_AND8_V;


----- CELL X_AND16 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND16 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I15_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I14_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I13_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I12_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I11_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I10_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I9_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I8_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I15                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I14                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I13                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I12                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I11                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I10                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I9                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I8                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I15                            :	in    STD_ULOGIC;
      I14                            :	in    STD_ULOGIC;
      I13                            :	in    STD_ULOGIC;
      I12                            :	in    STD_ULOGIC;
      I11                            :	in    STD_ULOGIC;
      I10                            :	in    STD_ULOGIC;
      I9                             :	in    STD_ULOGIC;
      I8                             :	in    STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND16 : entity is TRUE;
end X_AND16;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND16_V of X_AND16 is
   attribute VITAL_LEVEL1 of X_AND16_V : architecture is TRUE;

   SIGNAL I15_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I14_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I13_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I12_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I11_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I10_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I9_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I8_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I15_ipd, I15, tipd_I15);
   VitalWireDelay (I14_ipd, I14, tipd_I14);
   VitalWireDelay (I13_ipd, I13, tipd_I13);
   VitalWireDelay (I12_ipd, I12, tipd_I12);
   VitalWireDelay (I11_ipd, I11, tipd_I11);
   VitalWireDelay (I10_ipd, I10, tipd_I10);
   VitalWireDelay (I9_ipd, I9, tipd_I9);
   VitalWireDelay (I8_ipd, I8, tipd_I8);
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I15_ipd, I14_ipd, I13_ipd, I12_ipd, I11_ipd, 
                            I10_ipd, I9_ipd, I8_ipd, I7_ipd, I6_ipd, I5_ipd, 
                            I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I14_ipd) AND (I15_ipd) AND (I13_ipd) AND (I12_ipd) AND
              (I11_ipd) AND (I10_ipd) AND (I9_ipd) AND (I8_ipd) AND 
              (I7_ipd) AND (I6_ipd) AND (I5_ipd) AND (I4_ipd) AND 
              (I3_ipd) AND (I2_ipd) AND (I1_ipd) AND (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I15_ipd'last_event, tpd_I15_O, TRUE),
                 1 => (I14_ipd'last_event, tpd_I14_O, TRUE),
                 2 => (I13_ipd'last_event, tpd_I13_O, TRUE),
                 3 => (I12_ipd'last_event, tpd_I12_O, TRUE),
                 4 => (I11_ipd'last_event, tpd_I11_O, TRUE),
                 5 => (I10_ipd'last_event, tpd_I10_O, TRUE),
                 6 => (I9_ipd'last_event, tpd_I9_O, TRUE),
                 7 => (I8_ipd'last_event, tpd_I8_O, TRUE),
                 8 => (I7_ipd'last_event, tpd_I7_O, TRUE),
                 9 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 10 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 11 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 12 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 13 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 14 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 15 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND16_V;

configuration CFG_X_AND16_V of X_AND16 is
   for X_AND16_V
   end for;
end CFG_X_AND16_V;

----- CELL X_AND32 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_AND32 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I31_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I30_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I29_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I28_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I27_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I26_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I25_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I24_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I23_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I22_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I21_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I20_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I19_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I18_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I17_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I16_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I15_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I14_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I13_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I12_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I11_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I10_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I9_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I8_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);

      tipd_I31                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I30                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I29                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I28                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I27                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I26                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I25                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I24                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I23                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I22                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I21                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I20                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I19                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I18                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I17                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I16                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I15                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I14                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I13                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I12                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I11                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I10                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I9                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I8                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I31                            :	in    STD_ULOGIC;
      I30                            :	in    STD_ULOGIC;
      I29                            :	in    STD_ULOGIC;
      I28                            :	in    STD_ULOGIC;
      I27                            :	in    STD_ULOGIC;
      I26                            :	in    STD_ULOGIC;
      I25                            :	in    STD_ULOGIC;
      I24                            :	in    STD_ULOGIC;
      I23                            :	in    STD_ULOGIC;
      I22                            :	in    STD_ULOGIC;
      I21                            :	in    STD_ULOGIC;
      I20                            :	in    STD_ULOGIC;
      I19                            :	in    STD_ULOGIC;
      I18                            :	in    STD_ULOGIC;
      I17                            :	in    STD_ULOGIC;
      I16                            :	in    STD_ULOGIC;
      I15                            :	in    STD_ULOGIC;
      I14                            :	in    STD_ULOGIC;
      I13                            :	in    STD_ULOGIC;
      I12                            :	in    STD_ULOGIC;
      I11                            :	in    STD_ULOGIC;
      I10                            :	in    STD_ULOGIC;
      I9                             :	in    STD_ULOGIC;
      I8                             :	in    STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_AND32 : entity is TRUE;
end X_AND32;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_AND32_V of X_AND32 is
   attribute VITAL_LEVEL1 of X_AND32_V : architecture is TRUE;

   SIGNAL I31_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I30_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I29_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I28_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I27_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I26_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I25_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I24_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I23_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I22_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I21_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I20_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I19_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I18_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I17_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I16_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I15_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I14_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I13_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I12_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I11_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I10_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I9_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I8_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I31_ipd, I31, tipd_I31);
   VitalWireDelay (I30_ipd, I30, tipd_I30);
   VitalWireDelay (I29_ipd, I29, tipd_I29);
   VitalWireDelay (I28_ipd, I28, tipd_I28);
   VitalWireDelay (I27_ipd, I27, tipd_I27);
   VitalWireDelay (I26_ipd, I26, tipd_I26);
   VitalWireDelay (I25_ipd, I25, tipd_I25);
   VitalWireDelay (I24_ipd, I24, tipd_I24);
   VitalWireDelay (I23_ipd, I23, tipd_I23);
   VitalWireDelay (I22_ipd, I22, tipd_I22);
   VitalWireDelay (I21_ipd, I21, tipd_I21);
   VitalWireDelay (I20_ipd, I20, tipd_I20);
   VitalWireDelay (I19_ipd, I19, tipd_I19);
   VitalWireDelay (I18_ipd, I18, tipd_I18);
   VitalWireDelay (I17_ipd, I17, tipd_I17);
   VitalWireDelay (I16_ipd, I16, tipd_I16);
   VitalWireDelay (I15_ipd, I15, tipd_I15);
   VitalWireDelay (I14_ipd, I14, tipd_I14);
   VitalWireDelay (I13_ipd, I13, tipd_I13);
   VitalWireDelay (I12_ipd, I12, tipd_I12);
   VitalWireDelay (I11_ipd, I11, tipd_I11);
   VitalWireDelay (I10_ipd, I10, tipd_I10);
   VitalWireDelay (I9_ipd, I9, tipd_I9);
   VitalWireDelay (I8_ipd, I8, tipd_I8);
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I31_ipd, I30_ipd, I29_ipd, I28_ipd, I27_ipd, I26_ipd, 
                            I25_ipd, I24_ipd, I23_ipd, I22_ipd, I21_ipd, I20_ipd,
                            I19_ipd, I18_ipd, I17_ipd, I16_ipd, I15_ipd, I14_ipd,
                            I13_ipd, I12_ipd, I11_ipd, I10_ipd, I9_ipd, I8_ipd, I7_ipd,
                            I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
         (I31_ipd) AND (I30_ipd) AND (I29_ipd) AND (I28_ipd) AND (I27_ipd) AND
         (I26_ipd) AND (I25_ipd) AND (I24_ipd) AND (I23_ipd) AND (I22_ipd) AND
         (I21_ipd) AND (I20_ipd) AND (I19_ipd) AND (I18_ipd) AND (I17_ipd) AND
         (I16_ipd) AND (I15_ipd) AND (I14_ipd) AND (I13_ipd) AND (I12_ipd) AND 
         (I11_ipd) AND (I10_ipd) AND  (I9_ipd) AND  (I8_ipd) AND  (I7_ipd) AND
          (I6_ipd) AND  (I5_ipd) AND  (I4_ipd) AND  (I3_ipd) AND  (I2_ipd) AND
          (I1_ipd) AND  (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 =>  (I31_ipd'last_event, tpd_I31_O, TRUE),
                 1 =>  (I30_ipd'last_event, tpd_I30_O, TRUE),
                 2 =>  (I29_ipd'last_event, tpd_I29_O, TRUE),
                 3 =>  (I28_ipd'last_event, tpd_I28_O, TRUE),
                 4 =>  (I27_ipd'last_event, tpd_I27_O, TRUE),
                 5 =>  (I26_ipd'last_event, tpd_I26_O, TRUE),
                 6 =>  (I25_ipd'last_event, tpd_I25_O, TRUE),
                 7 =>  (I24_ipd'last_event, tpd_I24_O, TRUE),
                 8 =>  (I23_ipd'last_event, tpd_I23_O, TRUE),
                 9 =>  (I22_ipd'last_event, tpd_I22_O, TRUE),
                 10 => (I21_ipd'last_event, tpd_I21_O, TRUE),
                 11 => (I20_ipd'last_event, tpd_I20_O, TRUE),
                 12 => (I19_ipd'last_event, tpd_I19_O, TRUE),
                 13 => (I18_ipd'last_event, tpd_I18_O, TRUE),
                 14 => (I17_ipd'last_event, tpd_I17_O, TRUE),
                 15 => (I16_ipd'last_event, tpd_I16_O, TRUE),
                 16 => (I15_ipd'last_event, tpd_I15_O, TRUE),
                 17 => (I14_ipd'last_event, tpd_I14_O, TRUE),
                 18 => (I13_ipd'last_event, tpd_I13_O, TRUE),
                 19 => (I12_ipd'last_event, tpd_I12_O, TRUE),
                 20 => (I11_ipd'last_event, tpd_I11_O, TRUE),
                 21 => (I10_ipd'last_event, tpd_I10_O, TRUE),
                 22 =>  (I9_ipd'last_event, tpd_I9_O, TRUE),
                 23 =>  (I8_ipd'last_event, tpd_I8_O, TRUE),
                 24 =>  (I7_ipd'last_event, tpd_I7_O, TRUE),
                 25 =>  (I6_ipd'last_event, tpd_I6_O, TRUE),
                 26 =>  (I5_ipd'last_event, tpd_I5_O, TRUE),
                 27 =>  (I4_ipd'last_event, tpd_I4_O, TRUE),
                 28 =>  (I3_ipd'last_event, tpd_I3_O, TRUE),
                 29 =>  (I2_ipd'last_event, tpd_I2_O, TRUE),
                 30 =>  (I1_ipd'last_event, tpd_I1_O, TRUE),
                 31 =>  (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_AND32_V;

configuration CFG_X_AND32_V of X_AND32 is
   for X_AND32_V
   end for;
end CFG_X_AND32_V;

----- CELL X_BPAD -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_BPAD is
   generic(
      InstancePath: STRING := "*");

   port(
      PAD                            :	inout   STD_ULOGIC);
attribute VITAL_LEVEL0 of X_BPAD : entity is TRUE;
end X_BPAD;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_BPAD_V of X_BPAD is
   attribute VITAL_LEVEL0 of X_BPAD_V : architecture is TRUE;


begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   PAD <= 'Z';

end X_BPAD_V;

configuration CFG_X_BPAD_V of X_BPAD is
   for X_BPAD_V
   end for;
end CFG_X_BPAD_V;


----- CELL X_BUF -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_BUF is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I_O                        :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_BUF : entity is TRUE;
end X_BUF;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_BUF_V of X_BUF is
   attribute VITAL_LEVEL1 of X_BUF_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := TO_X01(I_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I_ipd'last_event, tpd_I_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_BUF_V;

configuration CFG_X_BUF_V of X_BUF is
   for X_BUF_V
   end for;
end CFG_X_BUF_V;


----- CELL X_CKBUF -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_CKBUF is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I_O                        :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_CKBUF : entity is TRUE;
end X_CKBUF;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_CKBUF_V of X_CKBUF is
   attribute VITAL_LEVEL1 of X_CKBUF_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := TO_X01(I_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I_ipd'last_event, tpd_I_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_CKBUF_V;

configuration CFG_X_CKBUF_V of X_CKBUF is
   for X_CKBUF_V
   end for;
end CFG_X_CKBUF_V;


----- CELL X_CLKDLL -----
-------------------------------------------------------------------------------
-- Simprim model for Clock Delay Locked Loop
--
-- Version 1.0
--
-- Dhimant Patel, April, 1998.
-------------------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.VITAL_Timing.all;

entity X_CLKDLL is
    generic (InstancePath : STRING := "*";
             tipd_CLKIN   : VitalDelayType01 := (0.000 ns, 0.000 ns);
             tipd_CLKFB   : VitalDelayType01 := (0.000 ns, 0.000 ns);
             tipd_RST     : VitalDelayType01 := (0.000 ns, 0.000 ns);
             DUTY_CYCLE_CORRECTION : boolean := TRUE;
             CLKDV_DIVIDE : real := 2.0);
 
    port (CLKIN   : in  std_ulogic := '0';
          CLKFB   : in  std_ulogic := '0';
          RST     : in  std_ulogic := '0';
          CLK0    : out std_ulogic := '0';
          CLK90   : out std_ulogic := '0';
          CLK180  : out std_ulogic := '0';
          CLK270  : out std_ulogic := '0';
          CLK2X   : out std_ulogic := '0';
          CLKDV   : out std_ulogic := '0';
          LOCKED  : out std_ulogic := '0');

    attribute VITAL_LEVEL0 of X_CLKDLL : entity is TRUE;
 
end X_CLKDLL;
 
architecture X_CLKDLL_V of X_CLKDLL is
 
procedure CHECK_DIVISOR (DIVISOR_IN : in real; signal DIVISOR_OUT : out real;
    signal FRACTIONAL : out boolean
) is

type DIVIDE_BY_ARRAY  is array (0 to 7) of real;
constant DIVIDE_BY_LEGAL : DIVIDE_BY_ARRAY := (1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 8.0, 16.0);
constant DIVIDE_BY_ERROR : string := "(1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 8.0, 16.0)";
variable VALID : boolean := FALSE;
variable X     : real    := 0.0;

begin
    for I in DIVIDE_BY_LEGAL'range loop
        if (DIVISOR_IN = DIVIDE_BY_LEGAL(I)) then
            VALID := TRUE;
        end if;
    end loop;

    if (VALID) then
        X := 2.0 * DIVISOR_IN;
        L : loop
           exit when (X < 2.0);
           X := X - 2.0;
        end loop;
        if (X > 0.0) then
            DIVISOR_OUT <= 2.0 * DIVISOR_IN;
            FRACTIONAL  <= TRUE;
        else
            DIVISOR_OUT <= DIVISOR_IN;
        end if;
    else
        assert FALSE report
        "*** Error: CLKDV_DIVIDE is not one of " & DIVIDE_BY_ERROR &
        " , using 2.0 ***"
        severity note;
        DIVISOR_OUT <= 2.0;
    end if;

end CHECK_DIVISOR;

constant CLKIN_WINDOW_WIDTH : time := 150 ps;
constant CLKFB_WINDOW_WIDTH : time := 150 ps;
constant DELTA_LOCK_DELAY   : time := 100 ps;

signal CLKIN_WINDOW         : std_ulogic := '0';
signal CLKFB_WINDOW         : std_ulogic := '0';
signal WINDOW_OVERLAP       : std_ulogic := '0';

signal CLKIN_ipd, CLKFB_ipd, RST_ipd      : std_ulogic := '0';
signal CLK_0, CLK_5050, CLK_2X            : std_ulogic := '0';
signal PERIOD_FOUND, RST_META2, IS_LOCKED : std_ulogic := '0';
signal DCC                                : std_ulogic := '1';

signal PERIOD, PERIOD_90, PERIOD_180, PERIOD_270 : time := 0 ps;
signal LOCK_DELAY                                : time := 0 ps;

signal CLKIN_DELAYED_0 : std_ulogic := '0';
signal CLK5050_DELAYED_0, CLK5050_DELAYED_90 : std_ulogic := '0';

signal DIVISOR : real := 0.0;
signal IS_FRACTIONAL : boolean := FALSE;

begin

    ---------------------
    --  Wire Delays
    ---------------------
    WireDelay : block
    begin
    VitalWireDelay (CLKIN_ipd, CLKIN, tipd_CLKIN);
    VitalWireDelay (CLKFB_ipd, CLKFB, tipd_CLKFB);
    VitalWireDelay (RST_ipd,   RST,   tipd_RST);
    end block;

    CHECK_DIVISOR (DIVISOR_IN  => CLKDV_DIVIDE,
                   DIVISOR_OUT => DIVISOR,
                   FRACTIONAL  => IS_FRACTIONAL);

    ---------------------------------------------------
    --  Generate Master Reset Signal
    ---------------------------------------------------
    RESET_X_CLKDLL : process (RST_ipd, CLKIN_ipd)
    variable COUNT_CLKIN : integer := 0;
    variable RST_EVENT   : boolean := FALSE;
    begin
        if (RST_ipd'event) then
            COUNT_CLKIN := 0;
            RST_EVENT   := TRUE;
        end if;
        if (RST_EVENT) then
            if (CLKIN_ipd'event AND CLKIN_ipd = '1') then
                if (COUNT_CLKIN < 1) then
                    COUNT_CLKIN := COUNT_CLKIN + 1;
                else
                    RST_META2 <= RST_ipd;
                    RST_EVENT := FALSE;
                end if;
            end if;
        end if;
    end process RESET_X_CLKDLL;

    ---------------------------------------------------
    --  Generate Windows
    ---------------------------------------------------
    GENERATE_WINDOWS : process (CLKIN_ipd, CLKFB_ipd, RST_META2)
    begin
        if (RST_META2'event AND RST_META2 = '1') then
            CLKIN_WINDOW <= '0';
            CLKFB_WINDOW <= '0';
        else
            if (CLKIN_ipd'event AND CLKIN_ipd = '1') then
                CLKIN_WINDOW <= '1';
                CLKIN_WINDOW <= transport '0' after CLKIN_WINDOW_WIDTH;
            end if;
            if (CLKFB_ipd'event AND CLKFB_ipd = '1') then
                CLKFB_WINDOW <= '1';
                CLKFB_WINDOW <= transport '0' after CLKFB_WINDOW_WIDTH;
            end if;
        end if;
    end process GENERATE_WINDOWS;
 
    WINDOW_OVERLAP <= CLKIN_WINDOW AND CLKFB_WINDOW;
 
    ---------------------------------------------------
    --  Check for a Lock
    ---------------------------------------------------
    DETERMINE_IF_LOCKED : process (CLKIN_ipd, RST_META2, WINDOW_OVERLAP)
    begin
        if (RST_META2'event AND RST_META2 = '1') then
            LOCKED    <= '0';
            IS_LOCKED <= '0';
        elsif (WINDOW_OVERLAP'event AND WINDOW_OVERLAP = '1') then
            IS_LOCKED <= '1';
        elsif (CLKIN_ipd'event AND CLKIN_ipd = '0') then
            LOCKED    <= IS_LOCKED;
            IS_LOCKED <= '0';
        end if;
    end process DETERMINE_IF_LOCKED;

    ---------------------------------------------------
    --  Increment Lock Delay
    ---------------------------------------------------
    INCREMENT_LOCK_DELAY : process (CLKIN_ipd, RST_META2)
    variable COUNT : integer := 0;
    begin
        if (RST_META2'event AND RST_META2 = '1') then
            LOCK_DELAY <= 0 ps;
            COUNT      := 0;
        elsif (CLKIN_ipd'event AND CLKIN_ipd = '0') then
            COUNT := COUNT + 1;
            if (COUNT = 3) then
                COUNT := 0;
                if (PERIOD_FOUND = '1' AND IS_LOCKED = '0') then
                    LOCK_DELAY <= LOCK_DELAY + DELTA_LOCK_DELAY;
                end if;
            end if;
        end if;
    end process INCREMENT_LOCK_DELAY;

    ---------------------------------------------------
    --  Determine Input Clock Period
    ---------------------------------------------------
    DETERMINE_PERIOD : process
    variable TIME_RISE_PREVIOUS, TIME_RISE_NOW, PERIOD_VAR : time := 0 ps;
    variable TIME_FALL_NOW, PW_CLKIN_HI, PW_CLKIN_LO : time := 0 ps;
    begin
        if (RST_META2 = '1') then
            TIME_RISE_PREVIOUS := 0 ps;
            TIME_RISE_NOW      := 0 ps;
            TIME_FALL_NOW      := 0 ps;
            PW_CLKIN_HI        := 0 ps;
            PW_CLKIN_LO        := 0 ps;
            PERIOD_VAR         := 0 ps;
            PERIOD_FOUND       <= '0';
        else
            if (CLKIN_ipd'event) then
                if (CLKIN_ipd = '1') then
                    TIME_RISE_PREVIOUS := TIME_RISE_NOW;
                    TIME_RISE_NOW      := NOW;
                elsif (CLKIN_ipd = '0') then
                    TIME_FALL_NOW      := NOW;
                end if;
                if (TIME_RISE_NOW > 0 ps AND TIME_FALL_NOW > 0 ps) then
                    if (TIME_FALL_NOW > TIME_RISE_NOW) then
                        PW_CLKIN_HI := TIME_FALL_NOW - TIME_RISE_NOW;
                        if (PW_CLKIN_HI < 4.0 ns) then
                            assert FALSE report
                            "*** Error: Input clock high pulse width is less than 4.0 ns ***"
                            severity failure;
                            wait;
                        end if;
                    else
                        PW_CLKIN_LO := TIME_RISE_NOW - TIME_FALL_NOW;
                        if (PW_CLKIN_LO < 2.2 ns) then
                            assert FALSE report
                            "*** Error: Input clock low pulse width is less than 2.2 ns ***"
                            severity failure;
                            wait;
                        end if;
                    end if;
                end if;
            end if;
            if (TIME_RISE_PREVIOUS > 0 ps) then
                PERIOD_VAR := TIME_RISE_NOW - TIME_RISE_PREVIOUS;
                if (PERIOD_VAR < 5.56 ns) then
                    assert FALSE report
                    "*** Error: Input clock frequency exceeds 180 MHz ***"
                    severity failure;
                    wait;
                elsif (PERIOD_VAR > 40.0 ns) then
                    assert FALSE report
                    "*** Error: Input clock frequency is less than 25 MHz ***"
                    severity failure;
                    wait;
                end if;
                PERIOD       <= PERIOD_VAR;
                PERIOD_90    <= PERIOD_VAR * 0.25;
                PERIOD_180   <= PERIOD_VAR * 0.5;
                PERIOD_270   <= PERIOD_VAR * 0.75;
                PERIOD_FOUND <= '1';
            end if;
        end if;

        wait on CLKIN_ipd, RST_META2;

    end process DETERMINE_PERIOD;

    ---------------------------------------------------
    --  Generate CLK_5050
    ---------------------------------------------------
    GENERATE_CLOCK_5050 : process (CLKIN_ipd, RST_META2)
    begin
        if (RST_META2'event AND RST_META2 = '1') then
            CLK_5050 <= '0';
        elsif (PERIOD_FOUND = '1') then
            if (CLKIN_ipd'event AND CLKIN_ipd = '1') then
                CLK_5050 <= '1';
                CLK_5050 <= transport '0' after PERIOD_180;
            end if;
        end if;
    end process GENERATE_CLOCK_5050;
    
    ---------------------------------------------------
    --  Delay CLKIN and CLK_5050 for Locking to CLKFB.
    ---------------------------------------------------
    CLKIN_DELAYED_0   <= transport CLKIN_ipd after LOCK_DELAY;
    CLK5050_DELAYED_0 <= transport CLK_5050  after LOCK_DELAY;

    ---------------------------------------------------
    --  CLK0, CLK90, CLK180, CLK270, CLK2X and CLK2X90
    ---------------------------------------------------
    DCC <= '1' when DUTY_CYCLE_CORRECTION else '0';
    
 
    CLK_0   <= (PERIOD_FOUND AND (NOT RST_META2))  AND
               (((NOT DCC)   AND CLKIN_DELAYED_0)  OR
               (      DCC    AND CLK5050_DELAYED_0));
    CLK0    <= CLK_0;

    CLK90   <= transport CLK_0 after PERIOD_90;
    CLK180  <= transport CLK_0 after PERIOD_180;
    CLK270  <= transport CLK_0 after PERIOD_270;

    CLK5050_DELAYED_90 <= transport CLK_5050 after (LOCK_DELAY + PERIOD_90);

    CLK_2X  <= (PERIOD_FOUND AND (NOT RST_META2)) AND
               (CLK5050_DELAYED_0 XOR CLK5050_DELAYED_90);
    CLK2X   <= CLK_2X;

    ---------------------------------------------------
    --  Clock Divider
    ---------------------------------------------------
    GENERATE_CLOCK_DIV : process (CLK_2X, RST_META2)
    variable FIRST_TIME      : boolean    := TRUE;
    variable COUNT_RISE_FALL : real       := -1.0;
    variable CLOCK_DIV       : std_ulogic := '0';
    begin
        if (RST_META2 = '1') then
            FIRST_TIME      := TRUE;
            COUNT_RISE_FALL := -1.0;
            CLOCK_DIV       := '0';
        elsif (PERIOD_FOUND = '1') then
            if (CLK_2X'event) then
                if (CLK_2X = '1') then
                    if (FIRST_TIME) then
                        CLOCK_DIV  := NOT CLOCK_DIV;
                        FIRST_TIME := FALSE;
                    end if;
                    COUNT_RISE_FALL := COUNT_RISE_FALL + 1.0;
                end if;
                if (CLK_2X = '0' AND IS_FRACTIONAL) then
                    COUNT_RISE_FALL := COUNT_RISE_FALL + 1.0;
                end if;
                if (COUNT_RISE_FALL >= DIVISOR) then
                    CLOCK_DIV       := NOT CLOCK_DIV;
                    COUNT_RISE_FALL := 0.0;
                end if;
            end if;
            CLKDV <= CLOCK_DIV;
        end if;
    end process GENERATE_CLOCK_DIV;

end X_CLKDLL_V;

configuration CFG_X_CLKDLL_V of X_CLKDLL is
    for X_CLKDLL_V
    end for;
end CFG_X_CLKDLL_V;


----- CELL X_FF -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_FF is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_SET_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_RST_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_CLK_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tsetup_I_CLK_posedge_posedge   :	VitalDelayType := 0.010 ns;
      tsetup_I_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      thold_I_CLK_posedge_posedge    :	VitalDelayType := 0.010 ns;
      thold_I_CLK_negedge_posedge    :	VitalDelayType := 0.010 ns;
      tsetup_CE_CLK_posedge_posedge  :	VitalDelayType := 0.010 ns;
      tsetup_CE_CLK_negedge_posedge  :	VitalDelayType := 0.010 ns;
      thold_CE_CLK_posedge_posedge   :	VitalDelayType := 0.010 ns;
      thold_CE_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      trecovery_RST_CLK_negedge_posedge :	VitalDelayType := 0.010 ns;
      thold_RST_CLK_negedge_posedge  :	VitalDelayType := 0.010 ns;
      trecovery_SET_CLK_negedge_posedge :	VitalDelayType := 0.010 ns;
      thold_SET_CLK_negedge_posedge  :	VitalDelayType := 0.010 ns;
      tpw_CLK_posedge                :	VitalDelayType := 0.010 ns;
      tpw_RST_posedge                :	VitalDelayType := 0.010 ns;
      tpw_SET_posedge                :	VitalDelayType := 0.010 ns;
      tpw_CLK_negedge                :	VitalDelayType := 0.010 ns;
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CLK                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CE                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_RST                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SET                       :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC;
      CLK                            :	in    STD_ULOGIC;
      CE                             :	in    STD_ULOGIC;
      RST                            :	in    STD_ULOGIC;
      SET                            :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_FF : entity is TRUE;
end X_FF;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_FF_V of X_FF is
   attribute VITAL_LEVEL1 of X_FF_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';
   SIGNAL CLK_ipd	 : STD_ULOGIC := 'X';
   SIGNAL CE_ipd	 : STD_ULOGIC := 'X';
   SIGNAL RST_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SET_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   VitalWireDelay (CLK_ipd, CLK, tipd_CLK);
   VitalWireDelay (CE_ipd, CE, tipd_CE);
   VitalWireDelay (RST_ipd, RST, tipd_RST);
   VitalWireDelay (SET_ipd, SET, tipd_SET);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd, CLK_ipd, CE_ipd, RST_ipd, SET_ipd)

   -- timing check results
   VARIABLE Tviol_I_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_I_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_CE_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_CE_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_RST_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_RST_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_SET_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_SET_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Pviol_CLK	: STD_ULOGIC := '0';
   VARIABLE PInfo_CLK	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_RST	: STD_ULOGIC := '0';
   VARIABLE PInfo_RST	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_SET	: STD_ULOGIC := '0';
   VARIABLE PInfo_SET	: VitalPeriodDataType := VitalPeriodDataInit;

   -- functionality results
   VARIABLE Violation : STD_ULOGIC := '0';
   VARIABLE PrevData_O : STD_LOGIC_VECTOR(0 to 6);
   VARIABLE I_delayed : STD_ULOGIC := 'X';
   VARIABLE CLK_delayed : STD_ULOGIC := 'X';
   VARIABLE CE_delayed : STD_ULOGIC := 'X';
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      ------------------------
      --  Timing Check Section
      ------------------------
      if (TimingChecksOn) then
         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_posedge,
          TimingData              => Tmkr_I_CLK_posedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_posedge,
          SetupLow                => tsetup_I_CLK_negedge_posedge,
          HoldLow                => thold_I_CLK_posedge_posedge,
          HoldHigh                 => thold_I_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND (CE_ipd)
                                     AND ((NOT SET_ipd))) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalSetupHoldCheck (
          Violation               => Tviol_CE_CLK_posedge,
          TimingData              => Tmkr_CE_CLK_posedge,
          TestSignal              => CE_ipd,
          TestSignalName          => "CE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CE_CLK_posedge_posedge,
          SetupLow                => tsetup_CE_CLK_negedge_posedge,
          HoldLow                => thold_CE_CLK_posedge_posedge,
          HoldHigh                 => thold_CE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND ((O_zd) XOR (I_ipd))
                                     AND ((NOT SET_ipd))) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_RST_CLK_negedge_posedge,
          Removal                 => thold_RST_CLK_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01(CE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_SET_CLK_posedge,
          TimingData              => Tmkr_SET_CLK_posedge,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_SET_CLK_negedge_posedge,
          Removal                 => thold_SET_CLK_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND (CE_ipd)) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_RST,
          PeriodData              => PInfo_RST,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_RST_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_SET,
          PeriodData              => PInfo_SET,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_SET_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_FF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
      end if;

      -------------------------
      --  Functionality Section
      -------------------------
      Violation := Tviol_I_CLK_posedge or Pviol_RST or 
                   Tviol_CE_CLK_posedge or Tviol_RST_CLK_posedge or
                   Tviol_SET_CLK_posedge or Pviol_SET or Pviol_CLK;
      VitalStateTable(
        Result => O_zd,
        PreviousDataIn => PrevData_O,
        StateTable => X_FF_O_tab,
        DataIn => (CLK_delayed, SET_ipd, O_zd, I_delayed, CE_delayed, CLK_ipd, RST_ipd));
      O_zd := Violation XOR O_zd;
      I_delayed := I_ipd;
      CLK_delayed := CLK_ipd;
      CE_delayed := CE_ipd;

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (SET_ipd'last_event, tpd_SET_O, TRUE),
                 1 => (RST_ipd'last_event, tpd_RST_O, TRUE),
                 2 => (CLK_ipd'last_event, tpd_CLK_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_FF_V;

configuration CFG_X_FF_V of X_FF is
   for X_FF_V
   end for;
end CFG_X_FF_V;


----- CELL X_INV -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_INV is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I_O                        :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_INV : entity is TRUE;
end X_INV;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_INV_V of X_INV is
   attribute VITAL_LEVEL1 of X_INV_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (NOT I_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I_ipd'last_event, tpd_I_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_INV_V;

configuration CFG_X_INV_V of X_INV is
   for X_INV_V
   end for;
end CFG_X_INV_V;


----- CELL X_IPAD -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_IPAD is
   generic(
      InstancePath: STRING := "*");

   port(
      PAD                            :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_IPAD : entity is TRUE;
end X_IPAD;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_IPAD_V of X_IPAD is
   attribute VITAL_LEVEL0 of X_IPAD_V : architecture is TRUE;

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (PAD)
   begin
end process;

end X_IPAD_V;

configuration CFG_X_IPAD_V of X_IPAD is
   for X_IPAD_V
   end for;
end CFG_X_IPAD_V;


----- CELL X_KEEPER -----
-------------------------------------------------------------------------------
-- Model for Weak Keeper
--
-- Version 1.0.1
--
-- Dhimant Patel, December, 1997.
-------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all;

entity X_KEEPER is
   generic( 
      InstancePath: STRING := "*";
      tipd_O : VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(O : inout STD_ULOGIC);

   attribute VITAL_LEVEL0 of X_KEEPER : entity is TRUE;

end X_KEEPER;

architecture X_KEEPER_V of X_KEEPER is

   attribute VITAL_LEVEL0 of X_KEEPER_V : architecture is TRUE;

   SIGNAL O_ipd : STD_ULOGIC := 'W';

begin

   process (O)
   begin
       if (O'event) then
           if (O = '1') then
               O_ipd <= transport 'H' after tipd_O(tr01);
           elsif (O = '0') then
               O_ipd <= transport 'L' after tipd_O(tr10);
           end if;
       end if;
   end process;
 
   O <= O_ipd;

end X_KEEPER_V;

configuration CFG_X_KEEPER_V of X_KEEPER is
   for X_KEEPER_V
   end for;
end CFG_X_KEEPER_V;


----- CELL X_LATCH -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_LATCH is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I_O                        :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_CLK_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_RST_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_SET_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tsetup_I_CLK_posedge_negedge   :	VitalDelayType := 0.010 ns;
      tsetup_I_CLK_negedge_negedge   :	VitalDelayType := 0.010 ns;
      thold_I_CLK_posedge_negedge    :	VitalDelayType := 0.010 ns;
      thold_I_CLK_negedge_negedge    :	VitalDelayType := 0.010 ns;
      trecovery_RST_CLK_negedge_negedge :	VitalDelayType := 0.010 ns;
      thold_RST_CLK_negedge_negedge  :	VitalDelayType := 0.010 ns;
      trecovery_SET_CLK_negedge_negedge :	VitalDelayType := 0.010 ns;
      thold_SET_CLK_negedge_negedge  :	VitalDelayType := 0.010 ns;
      tpw_CLK_posedge                :	VitalDelayType := 0.010 ns;
      tpw_RST_posedge                :	VitalDelayType := 0.010 ns;
      tpw_SET_posedge                :	VitalDelayType := 0.010 ns;
      tpw_CLK_negedge                :	VitalDelayType := 0.010 ns;
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CLK                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_RST                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SET                       :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC;
      CLK                            :	in    STD_ULOGIC;
      RST                            :	in    STD_ULOGIC;
      SET                            :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_LATCH : entity is TRUE;
end X_LATCH;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_LATCH_V of X_LATCH is
   attribute VITAL_LEVEL1 of X_LATCH_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';
   SIGNAL CLK_ipd	 : STD_ULOGIC := 'X';
   SIGNAL RST_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SET_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   VitalWireDelay (CLK_ipd, CLK, tipd_CLK);
   VitalWireDelay (RST_ipd, RST, tipd_RST);
   VitalWireDelay (SET_ipd, SET, tipd_SET);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd, CLK_ipd, RST_ipd, SET_ipd)

   -- timing check results
   VARIABLE Tviol_I_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_I_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_RST_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_RST_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_SET_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_SET_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Pviol_CLK	: STD_ULOGIC := '0';
   VARIABLE PInfo_CLK	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_RST	: STD_ULOGIC := '0';
   VARIABLE PInfo_RST	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_SET	: STD_ULOGIC := '0';
   VARIABLE PInfo_SET	: VitalPeriodDataType := VitalPeriodDataInit;

   -- functionality results
   VARIABLE Violation : STD_ULOGIC := '0';
   VARIABLE PrevData_O : STD_LOGIC_VECTOR(0 to 3);
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      ------------------------
      --  Timing Check Section
      ------------------------
      if (TimingChecksOn) then
         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_negedge,
          TimingData              => Tmkr_I_CLK_negedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_negedge,
          SetupLow                => tsetup_I_CLK_negedge_negedge,
          HoldHigh                => thold_I_CLK_posedge_negedge,
          HoldLow                 => thold_I_CLK_negedge_negedge,
          CheckEnabled            => TO_X01(((NOT SET_ipd)) AND ((NOT RST_ipd))) /= '0',
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCH",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_RST_CLK_negedge,
          TimingData              => Tmkr_RST_CLK_negedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_RST_CLK_negedge_negedge,
          Removal                 => thold_RST_CLK_negedge_negedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCH",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_SET_CLK_negedge,
          TimingData              => Tmkr_SET_CLK_negedge,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_SET_CLK_negedge_negedge,
          Removal                 => thold_SET_CLK_negedge_negedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01((NOT RST_ipd)) /= '0',
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCH",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_LATCH",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_RST,
          PeriodData              => PInfo_RST,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_RST_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_LATCH",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_SET,
          PeriodData              => PInfo_SET,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_SET_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_LATCH",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
      end if;

      -------------------------
      --  Functionality Section
      -------------------------
      Violation := Tviol_I_CLK_negedge or Tviol_SET_CLK_negedge or
                   Pviol_RST or Pviol_SET or Tviol_RST_CLK_negedge or Pviol_CLK;
      VitalStateTable(
        Result => O_zd,
        PreviousDataIn => PrevData_O,
        StateTable => X_LATCH_O_tab,
        DataIn => (
               I_ipd, SET_ipd, CLK_ipd, RST_ipd));
      O_zd := Violation XOR O_zd;

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I_ipd'last_event, tpd_I_O, TRUE),
                 1 => (CLK_ipd'last_event, tpd_CLK_O, TRUE),
                 2 => (RST_ipd'last_event, tpd_RST_O, TRUE),
                 3 => (SET_ipd'last_event, tpd_SET_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_LATCH_V;

configuration CFG_X_LATCH_V of X_LATCH is
   for X_LATCH_V
   end for;
end CFG_X_LATCH_V;


----- CELL X_LATCHE -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_LATCHE is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I_O                        :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_CLK_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_GE_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_RST_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_SET_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tsetup_I_CLK_posedge_negedge   :	VitalDelayType := 0.010 ns;
      tsetup_I_CLK_negedge_negedge   :	VitalDelayType := 0.010 ns;
      thold_I_CLK_posedge_negedge    :	VitalDelayType := 0.010 ns;
      thold_I_CLK_negedge_negedge    :	VitalDelayType := 0.010 ns;
      tsetup_GE_CLK_posedge_negedge  :	VitalDelayType := 0.010 ns;
      tsetup_GE_CLK_negedge_negedge  :	VitalDelayType := 0.010 ns;
      thold_GE_CLK_posedge_negedge   :	VitalDelayType := 0.010 ns;
      thold_GE_CLK_negedge_negedge   :	VitalDelayType := 0.010 ns;
      trecovery_RST_CLK_negedge_negedge :	VitalDelayType := 0.010 ns;
      thold_RST_CLK_negedge_negedge  :	VitalDelayType := 0.010 ns;
      trecovery_SET_CLK_negedge_negedge :	VitalDelayType := 0.010 ns;
      thold_SET_CLK_negedge_negedge  :	VitalDelayType := 0.010 ns;
      tpw_CLK_posedge                :	VitalDelayType := 0.010 ns;
      tpw_RST_posedge                :	VitalDelayType := 0.010 ns;
      tpw_SET_posedge                :	VitalDelayType := 0.010 ns;
      tpw_CLK_negedge                :	VitalDelayType := 0.010 ns;
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CLK                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_GE                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_RST                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SET                       :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC;
      CLK                            :	in    STD_ULOGIC;
      GE                             :	in    STD_ULOGIC;
      RST                            :	in    STD_ULOGIC;
      SET                            :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_LATCHE : entity is TRUE;
end X_LATCHE;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_LATCHE_V of X_LATCHE is
   attribute VITAL_LEVEL1 of X_LATCHE_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';
   SIGNAL CLK_ipd	 : STD_ULOGIC := 'X';
   SIGNAL GE_ipd	 : STD_ULOGIC := 'X';
   SIGNAL RST_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SET_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   VitalWireDelay (CLK_ipd, CLK, tipd_CLK);
   VitalWireDelay (GE_ipd, GE, tipd_GE);
   VitalWireDelay (RST_ipd, RST, tipd_RST);
   VitalWireDelay (SET_ipd, SET, tipd_SET);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd, CLK_ipd, GE_ipd, RST_ipd, SET_ipd)

   -- timing check results
   VARIABLE Tviol_I_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_I_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_GE_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_GE_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_RST_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_RST_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_SET_CLK_negedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_SET_CLK_negedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Pviol_CLK	: STD_ULOGIC := '0';
   VARIABLE PInfo_CLK	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_RST	: STD_ULOGIC := '0';
   VARIABLE PInfo_RST	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_SET	: STD_ULOGIC := '0';
   VARIABLE PInfo_SET	: VitalPeriodDataType := VitalPeriodDataInit;

   -- functionality results
   VARIABLE Violation : STD_ULOGIC := '0';
   VARIABLE PrevData_O : STD_LOGIC_VECTOR(0 to 5);
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      ------------------------
      --  Timing Check Section
      ------------------------
      if (TimingChecksOn) then
         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_negedge,
          TimingData              => Tmkr_I_CLK_negedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_negedge,
          SetupLow                => tsetup_I_CLK_negedge_negedge,
          HoldHigh                => thold_I_CLK_posedge_negedge,
          HoldLow                 => thold_I_CLK_negedge_negedge,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND (GE_ipd)
                                     AND ((NOT SET_ipd))) /= '0',
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalSetupHoldCheck (
          Violation               => Tviol_GE_CLK_negedge,
          TimingData              => Tmkr_GE_CLK_negedge,
          TestSignal              => GE_ipd,
          TestSignalName          => "GE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_GE_CLK_posedge_negedge,
          SetupLow                => tsetup_GE_CLK_negedge_negedge,
          HoldHigh                => thold_GE_CLK_posedge_negedge,
          HoldLow                 => thold_GE_CLK_negedge_negedge,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND ((O_zd) XOR (I_ipd))
                                     AND ((NOT SET_ipd))) /= '0',
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_RST_CLK_negedge,
          TimingData              => Tmkr_RST_CLK_negedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_RST_CLK_negedge_negedge,
          Removal                 => thold_RST_CLK_negedge_negedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01(GE_ipd) /= '0',
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_SET_CLK_negedge,
          TimingData              => Tmkr_SET_CLK_negedge,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_SET_CLK_negedge_negedge,
          Removal                 => thold_SET_CLK_negedge_negedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND (GE_ipd)) /= '0',
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_RST,
          PeriodData              => PInfo_RST,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_RST_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_SET,
          PeriodData              => PInfo_SET,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_SET_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_LATCHE",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
      end if;

      -------------------------
      --  Functionality Section
      -------------------------
      Violation := Tviol_I_CLK_negedge or Tviol_GE_CLK_negedge or
                   Tviol_SET_CLK_negedge or Pviol_RST or Pviol_SET or
                   Tviol_RST_CLK_negedge or Pviol_CLK;
      VitalStateTable(
        Result => O_zd,
        PreviousDataIn => PrevData_O,
        StateTable => X_LATCHE_O_tab,
        DataIn => (SET_ipd, O_zd, I_ipd, GE_ipd, CLK_ipd, RST_ipd));
      O_zd := Violation XOR O_zd;

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I_ipd'last_event, tpd_I_O, TRUE),
                 1 => (CLK_ipd'last_event, tpd_CLK_O, TRUE),
                 2 => (GE_ipd'last_event, tpd_GE_O, TRUE),
                 3 => (RST_ipd'last_event, tpd_RST_O, TRUE),
                 4 => (SET_ipd'last_event, tpd_SET_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_LATCHE_V;

configuration CFG_X_LATCHE_V of X_LATCHE is
   for X_LATCHE_V
   end for;
end CFG_X_LATCHE_V;


----- CELL X_LUT2 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_LUT2 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_ADR0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_ADR1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_ADR0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_ADR1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      INIT                             :  	bit_vector := X"0");

   port(
      O                                :	out   STD_ULOGIC;
      ADR0                             :	in    STD_ULOGIC;
      ADR1                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_LUT2 : entity is TRUE;
end X_LUT2;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_LUT2_V of X_LUT2 is
   attribute VITAL_LEVEL1 of X_LUT2_V : architecture is TRUE;

   SIGNAL ADR0_ipd	 : STD_ULOGIC := 'X';
   SIGNAL ADR1_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (ADR0_ipd, ADR0, tipd_ADR0);
   VitalWireDelay (ADR1_ipd, ADR1, tipd_ADR1);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (ADR0_ipd, ADR1_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := VitalMUX
                 (data => To_StdLogicVector(INIT),
                  dselect => (ADR1_ipd, ADR0_ipd));

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                 1 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_LUT2_V;

configuration CFG_X_LUT2_V of X_LUT2 is
   for X_LUT2_V
   end for;
end CFG_X_LUT2_V;


----- CELL X_LUT3 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_LUT3 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_ADR0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_ADR1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_ADR2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_ADR0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_ADR1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_ADR2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      INIT                             :  	bit_vector := X"00");

   port(
      O                                :	out   STD_ULOGIC;
      ADR0                             :	in    STD_ULOGIC;
      ADR1                             :	in    STD_ULOGIC;
      ADR2                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_LUT3 : entity is TRUE;
end X_LUT3;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_LUT3_V of X_LUT3 is
   attribute VITAL_LEVEL1 of X_LUT3_V : architecture is TRUE;

   SIGNAL ADR0_ipd	 : STD_ULOGIC := 'X';
   SIGNAL ADR1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL ADR2_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (ADR0_ipd, ADR0, tipd_ADR0);
   VitalWireDelay (ADR1_ipd, ADR1, tipd_ADR1);
   VitalWireDelay (ADR2_ipd, ADR2, tipd_ADR2);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (ADR0_ipd, ADR1_ipd, ADR2_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := VitalMUX
                 (data => To_StdLogicVector(INIT),
                  dselect => (ADR2_ipd, ADR1_ipd, ADR0_ipd));

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                 1 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE),
                 2 => (ADR2_ipd'last_event, tpd_ADR2_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_LUT3_V;

configuration CFG_X_LUT3_V of X_LUT3 is
   for X_LUT3_V
   end for;
end CFG_X_LUT3_V;


----- CELL X_LUT4 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_LUT4 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_ADR0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_ADR1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_ADR2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_ADR3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_ADR0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_ADR1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_ADR2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_ADR3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      INIT                             :  	bit_vector := X"0000");

   port(
      O                                :	out   STD_ULOGIC;
      ADR0                             :	in    STD_ULOGIC;
      ADR1                             :	in    STD_ULOGIC;
      ADR2                             :	in    STD_ULOGIC;
      ADR3                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_LUT4 : entity is TRUE;
end X_LUT4;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_LUT4_V of X_LUT4 is
   attribute VITAL_LEVEL1 of X_LUT4_V : architecture is TRUE;

   SIGNAL ADR0_ipd	 : STD_ULOGIC := 'X';
   SIGNAL ADR1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL ADR2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL ADR3_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (ADR0_ipd, ADR0, tipd_ADR0);
   VitalWireDelay (ADR1_ipd, ADR1, tipd_ADR1);
   VitalWireDelay (ADR2_ipd, ADR2, tipd_ADR2);
   VitalWireDelay (ADR3_ipd, ADR3, tipd_ADR3);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := VitalMUX
                 (data => To_StdLogicVector(INIT),
                  dselect => (ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                 1 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE),
                 2 => (ADR2_ipd'last_event, tpd_ADR2_O, TRUE),
                 3 => (ADR3_ipd'last_event, tpd_ADR3_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_LUT4_V;

configuration CFG_X_LUT4_V of X_LUT4 is
   for X_LUT4_V
   end for;
end CFG_X_LUT4_V;


----- CELL X_MUX2 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_MUX2 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_IA_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_IB_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_SEL_O                     :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_IA                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_IB                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SEL                      :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                             :	out   STD_ULOGIC;
      IA                            :	in    STD_ULOGIC;
      IB                            :	in    STD_ULOGIC;
      SEL                           :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_MUX2 : entity is TRUE;
end X_MUX2;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_MUX2_V of X_MUX2 is
   attribute VITAL_LEVEL1 of X_MUX2_V : architecture is TRUE;

   SIGNAL IA_ipd	 : STD_ULOGIC := 'X';
   SIGNAL IB_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SEL_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (IA_ipd,  IA,  tipd_IA);
   VitalWireDelay (IB_ipd,  IB,  tipd_IB);
   VitalWireDelay (SEL_ipd, SEL, tipd_SEL);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (IA_ipd, IB_ipd, SEL_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := VitalMUX
                 (data => (IB_ipd, IA_ipd),
                  dselect => (0 => SEL_ipd));

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (IA_ipd'last_event,  tpd_IA_O,  TRUE),
                 1 => (IB_ipd'last_event,  tpd_IB_O,  TRUE),
                 2 => (SEL_ipd'last_event, tpd_SEL_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_MUX2_V;

configuration CFG_X_MUX2_V of X_MUX2 is
   for X_MUX2_V
   end for;
end CFG_X_MUX2_V;


----- CELL X_ONE -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_ONE is
   generic(
      InstancePath: STRING := "*");

   port(
      O                              :	out   STD_ULOGIC := '1');
attribute VITAL_LEVEL0 of X_ONE : entity is TRUE;
end X_ONE;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_ONE_V of X_ONE is
   attribute VITAL_LEVEL0 of X_ONE_V : architecture is TRUE;

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   --  empty
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   O <= '1';

end X_ONE_V;

configuration CFG_X_ONE_V of X_ONE is
   for X_ONE_V
   end for;
end CFG_X_ONE_V;


----- CELL X_OPAD -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OPAD is
   generic(
      InstancePath: STRING := "*");

   port(
      PAD                            :	out   STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OPAD : entity is TRUE;
end X_OPAD;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OPAD_V of X_OPAD is
   attribute VITAL_LEVEL0 of X_OPAD_V : architecture is TRUE;

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   --  empty
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   PAD <= 'Z';

end X_OPAD_V;

configuration CFG_X_OPAD_V of X_OPAD is
   for X_OPAD_V
   end for;
end CFG_X_OPAD_V;


----- CELL X_OR2 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR2 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR2 : entity is TRUE;
end X_OR2;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR2_V of X_OR2 is
   attribute VITAL_LEVEL1 of X_OR2_V : architecture is TRUE;

   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I0_ipd) OR (I1_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 1 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR2_V;

configuration CFG_X_OR2_V of X_OR2 is
   for X_OR2_V
   end for;
end CFG_X_OR2_V;


----- CELL X_OR3 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR3 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR3 : entity is TRUE;
end X_OR3;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR3_V of X_OR3 is
   attribute VITAL_LEVEL1 of X_OR3_V : architecture is TRUE;

   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I1_ipd) OR (I2_ipd) OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 1 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 2 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR3_V;

configuration CFG_X_OR3_V of X_OR3 is
   for X_OR3_V
   end for;
end CFG_X_OR3_V;


----- CELL X_OR4 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR4 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR4 : entity is TRUE;
end X_OR4;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR4_V of X_OR4 is
   attribute VITAL_LEVEL1 of X_OR4_V : architecture is TRUE;

   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I2_ipd) OR (I3_ipd) OR (I1_ipd) OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 1 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 2 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 3 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR4_V;

configuration CFG_X_OR4_V of X_OR4 is
   for X_OR4_V
   end for;
end CFG_X_OR4_V;


----- CELL X_OR5 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR5 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR5 : entity is TRUE;
end X_OR5;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR5_V of X_OR5 is
   attribute VITAL_LEVEL1 of X_OR5_V : architecture is TRUE;

   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I3_ipd) OR (I4_ipd) OR (I2_ipd) OR (I1_ipd) OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 1 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 2 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 3 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 4 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR5_V;

configuration CFG_X_OR5_V of X_OR5 is
   for X_OR5_V
   end for;
end CFG_X_OR5_V;


----- CELL X_OR6 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR6 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR6 : entity is TRUE;
end X_OR6;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR6_V of X_OR6 is
   attribute VITAL_LEVEL1 of X_OR6_V : architecture is TRUE;

   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I4_ipd) OR (I5_ipd) OR (I3_ipd) OR (I2_ipd) OR (I1_ipd) OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 1 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 2 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 3 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 4 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 5 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR6_V;

configuration CFG_X_OR6_V of X_OR6 is
   for X_OR6_V
   end for;
end CFG_X_OR6_V;


----- CELL X_OR7 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR7 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR7 : entity is TRUE;
end X_OR7;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR7_V of X_OR7 is
   attribute VITAL_LEVEL1 of X_OR7_V : architecture is TRUE;

   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I5_ipd) OR (I6_ipd) OR (I4_ipd) OR (I3_ipd) OR (I2_ipd) OR (I1_ipd)
         OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 1 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 2 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 3 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 4 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 5 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 6 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR7_V;

configuration CFG_X_OR7_V of X_OR7 is
   for X_OR7_V
   end for;
end CFG_X_OR7_V;


----- CELL X_OR8 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR8 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR8 : entity is TRUE;
end X_OR8;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR8_V of X_OR8 is
   attribute VITAL_LEVEL1 of X_OR8_V : architecture is TRUE;

   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I7_ipd, I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I6_ipd) OR (I7_ipd) OR (I5_ipd) OR (I4_ipd) OR (I3_ipd) OR (I2_ipd)
         OR (I1_ipd) OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I7_ipd'last_event, tpd_I7_O, TRUE),
                 1 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 2 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 3 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 4 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 5 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 6 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 7 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR8_V;

configuration CFG_X_OR8_V of X_OR8 is
   for X_OR8_V
   end for;
end CFG_X_OR8_V;


----- CELL X_OR16 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR16 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I15_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I14_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I13_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I12_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I11_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I10_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I9_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I8_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I15                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I14                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I13                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I12                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I11                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I10                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I9                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I8                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I15                            :	in    STD_ULOGIC;
      I14                            :	in    STD_ULOGIC;
      I13                            :	in    STD_ULOGIC;
      I12                            :	in    STD_ULOGIC;
      I11                            :	in    STD_ULOGIC;
      I10                            :	in    STD_ULOGIC;
      I9                             :	in    STD_ULOGIC;
      I8                             :	in    STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR16 : entity is TRUE;
end X_OR16;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR16_V of X_OR16 is
   attribute VITAL_LEVEL1 of X_OR16_V : architecture is TRUE;

   SIGNAL I15_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I14_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I13_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I12_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I11_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I10_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I9_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I8_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I15_ipd, I15, tipd_I15);
   VitalWireDelay (I14_ipd, I14, tipd_I14);
   VitalWireDelay (I13_ipd, I13, tipd_I13);
   VitalWireDelay (I12_ipd, I12, tipd_I12);
   VitalWireDelay (I11_ipd, I11, tipd_I11);
   VitalWireDelay (I10_ipd, I10, tipd_I10);
   VitalWireDelay (I9_ipd, I9, tipd_I9);
   VitalWireDelay (I8_ipd, I8, tipd_I8);
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I15_ipd, I14_ipd, I13_ipd, I12_ipd, I11_ipd,
                            I10_ipd, I9_ipd, I8_ipd, I7_ipd, I6_ipd, I5_ipd,
                            I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I14_ipd) OR (I15_ipd) OR (I13_ipd) OR (I12_ipd) OR (I11_ipd) OR
         (I10_ipd) OR (I9_ipd) OR (I8_ipd) OR (I7_ipd) OR (I6_ipd) OR
         (I5_ipd) OR (I4_ipd) OR (I3_ipd) OR (I2_ipd) OR (I1_ipd) OR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I15_ipd'last_event, tpd_I15_O, TRUE),
                 1 => (I14_ipd'last_event, tpd_I14_O, TRUE),
                 2 => (I13_ipd'last_event, tpd_I13_O, TRUE),
                 3 => (I12_ipd'last_event, tpd_I12_O, TRUE),
                 4 => (I11_ipd'last_event, tpd_I11_O, TRUE),
                 5 => (I10_ipd'last_event, tpd_I10_O, TRUE),
                 6 => (I9_ipd'last_event, tpd_I9_O, TRUE),
                 7 => (I8_ipd'last_event, tpd_I8_O, TRUE),
                 8 => (I7_ipd'last_event, tpd_I7_O, TRUE),
                 9 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 10 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 11 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 12 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 13 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 14 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 15 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR16_V;

configuration CFG_X_OR16_V of X_OR16 is
   for X_OR16_V
   end for;
end CFG_X_OR16_V;


----- CELL X_OR32 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_OR32 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I31_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I30_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I29_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I28_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I27_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I26_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I25_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I24_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I23_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I22_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I21_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I20_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I19_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I18_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I17_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I16_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I15_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I14_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I13_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I12_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I11_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I10_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I9_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I8_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);

      tipd_I31                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I30                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I29                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I28                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I27                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I26                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I25                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I24                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I23                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I22                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I21                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I20                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I19                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I18                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I17                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I16                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I15                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I14                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I13                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I12                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I11                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I10                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I9                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I8                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I31                            :	in    STD_ULOGIC;
      I30                            :	in    STD_ULOGIC;
      I29                            :	in    STD_ULOGIC;
      I28                            :	in    STD_ULOGIC;
      I27                            :	in    STD_ULOGIC;
      I26                            :	in    STD_ULOGIC;
      I25                            :	in    STD_ULOGIC;
      I24                            :	in    STD_ULOGIC;
      I23                            :	in    STD_ULOGIC;
      I22                            :	in    STD_ULOGIC;
      I21                            :	in    STD_ULOGIC;
      I20                            :	in    STD_ULOGIC;
      I19                            :	in    STD_ULOGIC;
      I18                            :	in    STD_ULOGIC;
      I17                            :	in    STD_ULOGIC;
      I16                            :	in    STD_ULOGIC;
      I15                            :	in    STD_ULOGIC;
      I14                            :	in    STD_ULOGIC;
      I13                            :	in    STD_ULOGIC;
      I12                            :	in    STD_ULOGIC;
      I11                            :	in    STD_ULOGIC;
      I10                            :	in    STD_ULOGIC;
      I9                             :	in    STD_ULOGIC;
      I8                             :	in    STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_OR32 : entity is TRUE;
end X_OR32;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_OR32_V of X_OR32 is
   attribute VITAL_LEVEL1 of X_OR32_V : architecture is TRUE;

   SIGNAL I31_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I30_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I29_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I28_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I27_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I26_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I25_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I24_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I23_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I22_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I21_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I20_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I19_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I18_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I17_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I16_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I15_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I14_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I13_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I12_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I11_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I10_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I9_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I8_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I31_ipd, I31, tipd_I31);
   VitalWireDelay (I30_ipd, I30, tipd_I30);
   VitalWireDelay (I29_ipd, I29, tipd_I29);
   VitalWireDelay (I28_ipd, I28, tipd_I28);
   VitalWireDelay (I27_ipd, I27, tipd_I27);
   VitalWireDelay (I26_ipd, I26, tipd_I26);
   VitalWireDelay (I25_ipd, I25, tipd_I25);
   VitalWireDelay (I24_ipd, I24, tipd_I24);
   VitalWireDelay (I23_ipd, I23, tipd_I23);
   VitalWireDelay (I22_ipd, I22, tipd_I22);
   VitalWireDelay (I21_ipd, I21, tipd_I21);
   VitalWireDelay (I20_ipd, I20, tipd_I20);
   VitalWireDelay (I19_ipd, I19, tipd_I19);
   VitalWireDelay (I18_ipd, I18, tipd_I18);
   VitalWireDelay (I17_ipd, I17, tipd_I17);
   VitalWireDelay (I16_ipd, I16, tipd_I16);
   VitalWireDelay (I15_ipd, I15, tipd_I15);
   VitalWireDelay (I14_ipd, I14, tipd_I14);
   VitalWireDelay (I13_ipd, I13, tipd_I13);
   VitalWireDelay (I12_ipd, I12, tipd_I12);
   VitalWireDelay (I11_ipd, I11, tipd_I11);
   VitalWireDelay (I10_ipd, I10, tipd_I10);
   VitalWireDelay (I9_ipd, I9, tipd_I9);
   VitalWireDelay (I8_ipd, I8, tipd_I8);
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I31_ipd, I30_ipd, I29_ipd, I28_ipd, I27_ipd, I26_ipd, 
                            I25_ipd, I24_ipd, I23_ipd, I22_ipd, I21_ipd, I20_ipd,
                            I19_ipd, I18_ipd, I17_ipd, I16_ipd, I15_ipd, I14_ipd,
                            I13_ipd, I12_ipd, I11_ipd, I10_ipd, I9_ipd, I8_ipd, I7_ipd,
                            I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
         (I31_ipd) OR (I30_ipd) OR (I29_ipd) OR (I28_ipd) OR (I27_ipd) OR
         (I26_ipd) OR (I25_ipd) OR (I24_ipd) OR (I23_ipd) OR (I22_ipd) OR
         (I21_ipd) OR (I20_ipd) OR (I19_ipd) OR (I18_ipd) OR (I17_ipd) OR
         (I16_ipd) OR (I15_ipd) OR (I14_ipd) OR (I13_ipd) OR (I12_ipd) OR 
         (I11_ipd) OR (I10_ipd) OR  (I9_ipd) OR  (I8_ipd) OR  (I7_ipd) OR
          (I6_ipd) OR  (I5_ipd) OR  (I4_ipd) OR  (I3_ipd) OR  (I2_ipd) OR
          (I1_ipd) OR  (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 =>  (I31_ipd'last_event, tpd_I31_O, TRUE),
                 1 =>  (I30_ipd'last_event, tpd_I30_O, TRUE),
                 2 =>  (I29_ipd'last_event, tpd_I29_O, TRUE),
                 3 =>  (I28_ipd'last_event, tpd_I28_O, TRUE),
                 4 =>  (I27_ipd'last_event, tpd_I27_O, TRUE),
                 5 =>  (I26_ipd'last_event, tpd_I26_O, TRUE),
                 6 =>  (I25_ipd'last_event, tpd_I25_O, TRUE),
                 7 =>  (I24_ipd'last_event, tpd_I24_O, TRUE),
                 8 =>  (I23_ipd'last_event, tpd_I23_O, TRUE),
                 9 =>  (I22_ipd'last_event, tpd_I22_O, TRUE),
                 10 => (I21_ipd'last_event, tpd_I21_O, TRUE),
                 11 => (I20_ipd'last_event, tpd_I20_O, TRUE),
                 12 => (I19_ipd'last_event, tpd_I19_O, TRUE),
                 13 => (I18_ipd'last_event, tpd_I18_O, TRUE),
                 14 => (I17_ipd'last_event, tpd_I17_O, TRUE),
                 15 => (I16_ipd'last_event, tpd_I16_O, TRUE),
                 16 => (I15_ipd'last_event, tpd_I15_O, TRUE),
                 17 => (I14_ipd'last_event, tpd_I14_O, TRUE),
                 18 => (I13_ipd'last_event, tpd_I13_O, TRUE),
                 19 => (I12_ipd'last_event, tpd_I12_O, TRUE),
                 20 => (I11_ipd'last_event, tpd_I11_O, TRUE),
                 21 => (I10_ipd'last_event, tpd_I10_O, TRUE),
                 22 =>  (I9_ipd'last_event, tpd_I9_O, TRUE),
                 23 =>  (I8_ipd'last_event, tpd_I8_O, TRUE),
                 24 =>  (I7_ipd'last_event, tpd_I7_O, TRUE),
                 25 =>  (I6_ipd'last_event, tpd_I6_O, TRUE),
                 26 =>  (I5_ipd'last_event, tpd_I5_O, TRUE),
                 27 =>  (I4_ipd'last_event, tpd_I4_O, TRUE),
                 28 =>  (I3_ipd'last_event, tpd_I3_O, TRUE),
                 29 =>  (I2_ipd'last_event, tpd_I2_O, TRUE),
                 30 =>  (I1_ipd'last_event, tpd_I1_O, TRUE),
                 31 =>  (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_OR32_V;

configuration CFG_X_OR32_V of X_OR32 is
   for X_OR32_V
   end for;
end CFG_X_OR32_V;


----- CELL X_PD -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_PD is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False);

   port(
      O                              :	out   STD_ULOGIC := 'L');
attribute VITAL_LEVEL0 of X_PD : entity is TRUE;
end X_PD;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_PD_V of X_PD is
   attribute VITAL_LEVEL0 of X_PD_V : architecture is TRUE;


begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   --  empty
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   O <= 'L';



end X_PD_V;

configuration CFG_X_PD_V of X_PD is
   for X_PD_V
   end for;
end CFG_X_PD_V;


----- CELL X_PU -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_PU is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False);

   port(
      O                              :	out   STD_ULOGIC := 'H');
attribute VITAL_LEVEL0 of X_PU : entity is TRUE;
end X_PU;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_PU_V of X_PU is
   attribute VITAL_LEVEL0 of X_PU_V : architecture is TRUE;


begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   --  empty
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   O <= 'H';



end X_PU_V;

configuration CFG_X_PU_V of X_PU is
   for X_PU_V
   end for;
end CFG_X_PU_V;


----- CELL X_RAMB4_S1 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S1 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S1 is

  generic (

       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDR : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DI   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));

       tipd_EN  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RST : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLK_DO : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DO : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_EN_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_EN_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_DI_CLK_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DI_CLK_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDR_CLK_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_EN_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_EN_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RST_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RST_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;

       thold_DI_CLK_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DI_CLK_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDR_CLK_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DI     : in STD_LOGIC_VECTOR (0 downto 0);
        EN     : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        RST    : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADDR   : in STD_LOGIC_VECTOR (11 downto 0);
        DO     : out STD_LOGIC_VECTOR (0 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S1 : entity is TRUE;

end X_RAMB4_S1;

-----------------------------------------------------------------------------

architecture X_RAMB4_S1_V of X_RAMB4_S1 is

  attribute VITAL_LEVEL0 of X_RAMB4_S1_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDR_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal DI_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');

  signal EN_ipd   : std_ulogic := 'X';
  signal WE_ipd   : std_ulogic := 'X';
  signal RST_ipd  : std_ulogic := 'X';
  signal GSR_ipd  : std_ulogic := 'X';
  signal CLK_ipd  : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDR_ipd(0),  ADDR(0),  tipd_ADDR(0));
    VitalWireDelay (ADDR_ipd(1),  ADDR(1),  tipd_ADDR(1));
    VitalWireDelay (ADDR_ipd(2),  ADDR(2),  tipd_ADDR(2));
    VitalWireDelay (ADDR_ipd(3),  ADDR(3),  tipd_ADDR(3));
    VitalWireDelay (ADDR_ipd(4),  ADDR(4),  tipd_ADDR(4));
    VitalWireDelay (ADDR_ipd(5),  ADDR(5),  tipd_ADDR(5));
    VitalWireDelay (ADDR_ipd(6),  ADDR(6),  tipd_ADDR(6));
    VitalWireDelay (ADDR_ipd(7),  ADDR(7),  tipd_ADDR(7));
    VitalWireDelay (ADDR_ipd(8),  ADDR(8),  tipd_ADDR(8));
    VitalWireDelay (ADDR_ipd(9),  ADDR(9),  tipd_ADDR(9));
    VitalWireDelay (ADDR_ipd(10), ADDR(10), tipd_ADDR(10));
    VitalWireDelay (ADDR_ipd(11), ADDR(11), tipd_ADDR(11));
    VitalWireDelay (DI_ipd(0),    DI(0),    tipd_DI(0));
    VitalWireDelay (EN_ipd,       EN,       tipd_EN);
    VitalWireDelay (WE_ipd,       WE,       tipd_WE);
    VitalWireDelay (RST_ipd,      RST,      tipd_RST);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLK_ipd,      CLK,      tipd_CLK);
  end block;

  --------------------
  -- X_RAMB4_S1 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DI0_CLK_posedge     : std_ulogic := '0';
    variable Tviol_EN_CLK_posedge     : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge     : std_ulogic := '0';
    variable Tviol_RST_CLK_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLK_posedge    : std_ulogic := '0';
    variable Tviol_ADDR0_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR1_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR2_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR3_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR4_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR5_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR6_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR7_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR8_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR9_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR10_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR11_CLK_posedge : std_ulogic := '0';

    variable Tmkr_DI0_CLK_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_EN_CLK_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RST_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR0_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR1_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR2_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR3_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR4_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR5_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR6_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR7_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR8_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR9_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR10_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR11_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS : integer;
    variable VALID_ADDR : boolean := FALSE;
    constant DIW   : integer := 1;
    constant DIW_1 : integer := 0;
    variable DO_zd : std_logic_vector(0 downto 0) := (others => 'X');
    variable DO_GlitchData0 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
    
    if (FIRST_TIME) then
        wait until (GSR_ipd = '1' or CLK_ipd'last_value = '0' or CLK_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DI0_CLK_posedge,
          TimingData              => Tmkr_DI0_CLK_posedge,
          TestSignal              => DI_ipd(0),
          TestSignalName          => "DI(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(0),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(0),
          HoldLow                => thold_DI_CLK_posedge_posedge(0),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(0),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_EN_CLK_posedge,
          TimingData              => Tmkr_EN_CLK_posedge,
          TestSignal              => EN_ipd,
          TestSignalName          => "EN",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_EN_CLK_posedge_posedge,
          SetupLow                => tsetup_EN_CLK_negedge_posedge,
          HoldLow                => thold_EN_CLK_posedge_posedge,
          HoldHigh                 => thold_EN_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RST_CLK_posedge_posedge,
          SetupLow                => tsetup_RST_CLK_negedge_posedge,
          HoldLow                => thold_RST_CLK_posedge_posedge,
          HoldHigh                 => thold_RST_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLK_posedge,
          TimingData              => Tmkr_GSR_CLK_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLK_negedge_posedge,
          Removal                 => thold_GSR_CLK_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR11_CLK_posedge,
          TimingData              => Tmkr_ADDR11_CLK_posedge,
          TestSignal              => ADDR_ipd(11),
          TestSignalName          => "ADDR(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(11),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(11),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(11),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(11),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR10_CLK_posedge,
          TimingData              => Tmkr_ADDR10_CLK_posedge,
          TestSignal              => ADDR_ipd(10),
          TestSignalName          => "ADDR(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(10),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(10),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(10),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(10),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR9_CLK_posedge,
          TimingData              => Tmkr_ADDR9_CLK_posedge,
          TestSignal              => ADDR_ipd(9),
          TestSignalName          => "ADDR(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(9),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(9),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(9),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(9),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR8_CLK_posedge,
          TimingData              => Tmkr_ADDR8_CLK_posedge,
          TestSignal              => ADDR_ipd(8),
          TestSignalName          => "ADDR(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(8),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(8),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(8),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(8),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR7_CLK_posedge,
          TimingData              => Tmkr_ADDR7_CLK_posedge,
          TestSignal              => ADDR_ipd(7),
          TestSignalName          => "ADDR(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(7),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(7),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(7),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(7),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR6_CLK_posedge,
          TimingData              => Tmkr_ADDR6_CLK_posedge,
          TestSignal              => ADDR_ipd(6),
          TestSignalName          => "ADDR(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(6),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(6),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(6),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(6),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR5_CLK_posedge,
          TimingData              => Tmkr_ADDR5_CLK_posedge,
          TestSignal              => ADDR_ipd(5),
          TestSignalName          => "ADDR(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(5),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(5),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(5),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(5),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR4_CLK_posedge,
          TimingData              => Tmkr_ADDR4_CLK_posedge,
          TestSignal              => ADDR_ipd(4),
          TestSignalName          => "ADDR(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(4),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(4),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(4),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(4),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR3_CLK_posedge,
          TimingData              => Tmkr_ADDR3_CLK_posedge,
          TestSignal              => ADDR_ipd(3),
          TestSignalName          => "ADDR(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(3),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(3),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(3),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(3),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR2_CLK_posedge,
          TimingData              => Tmkr_ADDR2_CLK_posedge,
          TestSignal              => ADDR_ipd(2),
          TestSignalName          => "ADDR(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(2),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(2),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(2),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(2),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR1_CLK_posedge,
          TimingData              => Tmkr_ADDR1_CLK_posedge,
          TestSignal              => ADDR_ipd(1),
          TestSignalName          => "ADDR(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(1),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(1),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(1),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(1),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR0_CLK_posedge,
          TimingData              => Tmkr_ADDR0_CLK_posedge,
          TestSignal              => ADDR_ipd(0),
          TestSignalName          => "ADDR(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(0),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(0),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(0),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(0),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_DI0_CLK_posedge    or Tviol_EN_CLK_posedge     or
                 Tviol_WE_CLK_posedge     or Tviol_RST_CLK_posedge    or
                 Tviol_ADDR11_CLK_posedge or Tviol_ADDR10_CLK_posedge or
                 Tviol_ADDR9_CLK_posedge  or Tviol_ADDR8_CLK_posedge  or
                 Tviol_ADDR7_CLK_posedge  or Tviol_ADDR6_CLK_posedge  or
                 Tviol_ADDR5_CLK_posedge  or Tviol_ADDR4_CLK_posedge  or
                 Tviol_ADDR3_CLK_posedge  or Tviol_ADDR2_CLK_posedge  or
                 Tviol_ADDR1_CLK_posedge  or Tviol_ADDR0_CLK_posedge  or
                 Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    VALID_ADDR := ADDR_IS_VALID(ADDR_ipd);

    if (VALID_ADDR) then
        ADDRESS := CONV_INTEGER(ADDR_ipd);
    end if;

    if (GSR_ipd = '1') then
        DO_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (EN_ipd = '1') then
            if (CLK_ipd'event AND CLK_ipd'last_value = '0') then
                if (CLK_ipd = '1') then
                    if (WE_ipd = '1') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := DI_ipd;
                            DO_zd := DI_ipd;
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                            DO_zd := (others => 'X');
                        end if;
                    elsif (WE_ipd = 'X') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                        DO_zd := (others => 'X');
                    else 
                        if (VALID_ADDR) then
                            DO_zd := MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW));
                        else
                            DO_zd := (others => 'X');
                        end if;
                    end if;
                    if (RST_ipd = '1') then
                        DO_zd := (others => '0');
                    elsif (RST_ipd = 'X') then
                        DO_zd := (others => 'X');
                    end if;
                elsif (CLK_ipd = 'X') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if; 
            elsif (CLK_ipd'event AND CLK_ipd'last_value = 'X') then
                if (CLK_ipd = '1') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        elsif (EN_ipd = 'X') then
            if (CLK_ipd'event AND CLK_ipd'last_value /= '1') then
                if (CLK_ipd /= '0') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DO_zd := (others => 'X');
    end if;

    DO_zd(0) := Violation XOR DO_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (   
      OutSignal => DO(0),
      GlitchData => DO_GlitchData0,
      OutSignalName => "DO(0)",    
      OutTemp => DO_zd(0),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(0),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(0),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLK_ipd, WE_ipd, EN_ipd, RST_ipd, DI_ipd, ADDR_ipd;

  end process VITALBehavior;

end X_RAMB4_S1_V;

configuration CFG_X_RAMB4_S1_V of X_RAMB4_S1 is
   for X_RAMB4_S1_V
   end for;
end CFG_X_RAMB4_S1_V;


----- CELL X_RAMB4_S2 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S2 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S2 is

  generic (

       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDR : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DI   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_EN  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RST : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLK_DO : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DO : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_EN_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_EN_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_DI_CLK_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DI_CLK_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDR_CLK_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_EN_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_EN_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RST_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RST_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;

       thold_DI_CLK_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DI_CLK_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDR_CLK_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DI     : in STD_LOGIC_VECTOR (1 downto 0);
        EN     : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        RST    : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADDR   : in STD_LOGIC_VECTOR (10 downto 0);
        DO     : out STD_LOGIC_VECTOR (1 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S2 : entity is TRUE;

end X_RAMB4_S2;

-----------------------------------------------------------------------------

architecture X_RAMB4_S2_V of X_RAMB4_S2 is

  attribute VITAL_LEVEL0 of X_RAMB4_S2_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDR_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal DI_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');

  signal EN_ipd   : std_ulogic := 'X';
  signal WE_ipd   : std_ulogic := 'X';
  signal RST_ipd  : std_ulogic := 'X';
  signal GSR_ipd  : std_ulogic := 'X';
  signal CLK_ipd  : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDR_ipd(0),  ADDR(0),  tipd_ADDR(0));
    VitalWireDelay (ADDR_ipd(1),  ADDR(1),  tipd_ADDR(1));
    VitalWireDelay (ADDR_ipd(2),  ADDR(2),  tipd_ADDR(2));
    VitalWireDelay (ADDR_ipd(3),  ADDR(3),  tipd_ADDR(3));
    VitalWireDelay (ADDR_ipd(4),  ADDR(4),  tipd_ADDR(4));
    VitalWireDelay (ADDR_ipd(5),  ADDR(5),  tipd_ADDR(5));
    VitalWireDelay (ADDR_ipd(6),  ADDR(6),  tipd_ADDR(6));
    VitalWireDelay (ADDR_ipd(7),  ADDR(7),  tipd_ADDR(7));
    VitalWireDelay (ADDR_ipd(8),  ADDR(8),  tipd_ADDR(8));
    VitalWireDelay (ADDR_ipd(9),  ADDR(9),  tipd_ADDR(9));
    VitalWireDelay (ADDR_ipd(10), ADDR(10), tipd_ADDR(10));
    VitalWireDelay (DI_ipd(0),    DI(0),    tipd_DI(0));
    VitalWireDelay (DI_ipd(1),    DI(1),    tipd_DI(1));
    VitalWireDelay (EN_ipd,       EN,       tipd_EN);
    VitalWireDelay (WE_ipd,       WE,       tipd_WE);
    VitalWireDelay (RST_ipd,      RST,      tipd_RST);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLK_ipd,      CLK,      tipd_CLK);
  end block;

  --------------------
  -- X_RAMB4_S2 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DI0_CLK_posedge    : std_ulogic := '0';
    variable Tviol_DI1_CLK_posedge    : std_ulogic := '0';
    variable Tviol_EN_CLK_posedge     : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge     : std_ulogic := '0';
    variable Tviol_RST_CLK_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLK_posedge    : std_ulogic := '0';
    variable Tviol_ADDR0_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR1_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR2_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR3_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR4_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR5_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR6_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR7_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR8_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR9_CLK_posedge  : std_ulogic := '0';
    variable Tviol_ADDR10_CLK_posedge : std_ulogic := '0';

    variable Tmkr_DI0_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI1_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_EN_CLK_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RST_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR0_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR1_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR2_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR3_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR4_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR5_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR6_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR7_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR8_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR9_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR10_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS : integer;
    variable VALID_ADDR : boolean := FALSE;
    constant DIW   : integer := 2;
    constant DIW_1 : integer := 1;
    variable DO_zd  : std_logic_vector(1 downto 0) := (others => 'X');
    variable DO_GlitchData0 : VitalGlitchDataType;
    variable DO_GlitchData1 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then
        wait until (GSR_ipd = '1' or CLK_ipd'last_value = '0' or CLK_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DI1_CLK_posedge,
          TimingData              => Tmkr_DI1_CLK_posedge,
          TestSignal              => DI_ipd(1),
          TestSignalName          => "DI(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(1),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(1),
          HoldLow                => thold_DI_CLK_posedge_posedge(1),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(1),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI0_CLK_posedge,
          TimingData              => Tmkr_DI0_CLK_posedge,
          TestSignal              => DI_ipd(0),
          TestSignalName          => "DI(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(0),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(0),
          HoldLow                => thold_DI_CLK_posedge_posedge(0),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(0),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_EN_CLK_posedge,
          TimingData              => Tmkr_EN_CLK_posedge,
          TestSignal              => EN_ipd,
          TestSignalName          => "EN",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_EN_CLK_posedge_posedge,
          SetupLow                => tsetup_EN_CLK_negedge_posedge,
          HoldLow                => thold_EN_CLK_posedge_posedge,
          HoldHigh                 => thold_EN_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RST_CLK_posedge_posedge,
          SetupLow                => tsetup_RST_CLK_negedge_posedge,
          HoldLow                => thold_RST_CLK_posedge_posedge,
          HoldHigh                 => thold_RST_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck ( 
          Violation               => Tviol_GSR_CLK_posedge,
          TimingData              => Tmkr_GSR_CLK_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLK_negedge_posedge,
          Removal                 => thold_GSR_CLK_negedge_posedge,
          ActiveLow               => FALSE,  
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR10_CLK_posedge,
          TimingData              => Tmkr_ADDR10_CLK_posedge,
          TestSignal              => ADDR_ipd(10),
          TestSignalName          => "ADDR(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(10),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(10),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(10),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(10),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR9_CLK_posedge,
          TimingData              => Tmkr_ADDR9_CLK_posedge,
          TestSignal              => ADDR_ipd(9),
          TestSignalName          => "ADDR(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(9),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(9),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(9),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(9),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR8_CLK_posedge,
          TimingData              => Tmkr_ADDR8_CLK_posedge,
          TestSignal              => ADDR_ipd(8),
          TestSignalName          => "ADDR(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(8),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(8),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(8),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(8),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR7_CLK_posedge,
          TimingData              => Tmkr_ADDR7_CLK_posedge,
          TestSignal              => ADDR_ipd(7),
          TestSignalName          => "ADDR(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(7),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(7),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(7),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(7),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR6_CLK_posedge,
          TimingData              => Tmkr_ADDR6_CLK_posedge,
          TestSignal              => ADDR_ipd(6),
          TestSignalName          => "ADDR(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(6),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(6),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(6),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(6),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR5_CLK_posedge,
          TimingData              => Tmkr_ADDR5_CLK_posedge,
          TestSignal              => ADDR_ipd(5),
          TestSignalName          => "ADDR(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(5),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(5),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(5),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(5),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR4_CLK_posedge,
          TimingData              => Tmkr_ADDR4_CLK_posedge,
          TestSignal              => ADDR_ipd(4),
          TestSignalName          => "ADDR(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(4),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(4),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(4),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(4),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR3_CLK_posedge,
          TimingData              => Tmkr_ADDR3_CLK_posedge,
          TestSignal              => ADDR_ipd(3),
          TestSignalName          => "ADDR(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(3),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(3),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(3),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(3),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR2_CLK_posedge,
          TimingData              => Tmkr_ADDR2_CLK_posedge,
          TestSignal              => ADDR_ipd(2),
          TestSignalName          => "ADDR(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(2),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(2),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(2),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(2),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR1_CLK_posedge,
          TimingData              => Tmkr_ADDR1_CLK_posedge,
          TestSignal              => ADDR_ipd(1),
          TestSignalName          => "ADDR(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(1),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(1),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(1),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(1),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR0_CLK_posedge,
          TimingData              => Tmkr_ADDR0_CLK_posedge,
          TestSignal              => ADDR_ipd(0),
          TestSignalName          => "ADDR(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(0),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(0),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(0),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(0),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DI1_CLK_posedge   or  Tviol_DI0_CLK_posedge   or
                 Tviol_EN_CLK_posedge    or  Tviol_WE_CLK_posedge    or
                 Tviol_RST_CLK_posedge   or Tviol_ADDR10_CLK_posedge or
                 Tviol_ADDR9_CLK_posedge or Tviol_ADDR8_CLK_posedge  or
                 Tviol_ADDR7_CLK_posedge or Tviol_ADDR6_CLK_posedge  or
                 Tviol_ADDR5_CLK_posedge or Tviol_ADDR4_CLK_posedge  or
                 Tviol_ADDR3_CLK_posedge or Tviol_ADDR2_CLK_posedge  or
                 Tviol_ADDR1_CLK_posedge or Tviol_ADDR0_CLK_posedge  or
                 Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    VALID_ADDR := ADDR_IS_VALID(ADDR_ipd);

    if (VALID_ADDR) then
        ADDRESS := CONV_INTEGER(ADDR_ipd);
    end if;

    if (GSR_ipd = '1') then
        DO_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (EN_ipd = '1') then
            if (CLK_ipd'event AND CLK_ipd'last_value = '0') then
                if (CLK_ipd = '1') then
                    if (WE_ipd = '1') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := DI_ipd;
                            DO_zd := DI_ipd;
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                            DO_zd := (others => 'X');
                        end if;
                    elsif (WE_ipd = 'X') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                        DO_zd := (others => 'X');
                    else 
                        if (VALID_ADDR) then
                            DO_zd := MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW));
                        else
                            DO_zd := (others => 'X');
                        end if;
                    end if;
                    if (RST_ipd = '1') then
                        DO_zd := (others => '0');
                    elsif (RST_ipd = 'X') then
                        DO_zd := (others => 'X');
                    end if;
                elsif (CLK_ipd = 'X') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if; 
            elsif (CLK_ipd'event AND CLK_ipd'last_value = 'X') then
                if (CLK_ipd = '1') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        elsif (EN_ipd = 'X') then
            if (CLK_ipd'event AND CLK_ipd'last_value /= '1') then
                if (CLK_ipd /= '0') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DO_zd := (others => 'X');
    end if;

    DO_zd(1) := Violation XOR DO_zd(1);
    DO_zd(0) := Violation XOR DO_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (   
      OutSignal => DO(1),
      GlitchData => DO_GlitchData1,
      OutSignalName => "DO(1)",    
      OutTemp => DO_zd(1),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(1),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(1),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(0),
      GlitchData => DO_GlitchData0,
      OutSignalName => "DO(0)",    
      OutTemp => DO_zd(0),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(0),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(0),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLK_ipd, WE_ipd, EN_ipd, RST_ipd, DI_ipd, ADDR_ipd;

  end process VITALBehavior;

end X_RAMB4_S2_V;

configuration CFG_X_RAMB4_S2_V of X_RAMB4_S2 is
   for X_RAMB4_S2_V
   end for;
end CFG_X_RAMB4_S2_V;


----- CELL X_RAMB4_S4 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S4 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S4 is

  generic (

       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDR : VitalDelayArrayType01 (9 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DI   : VitalDelayArrayType01 (3 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_EN  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RST : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLK_DO : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DO : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_EN_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_EN_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_DI_CLK_posedge_posedge   : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       tsetup_DI_CLK_negedge_posedge   : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_posedge_posedge : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_negedge_posedge : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       thold_EN_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_EN_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RST_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RST_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;

       thold_DI_CLK_posedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_DI_CLK_negedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_posedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_negedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DI     : in STD_LOGIC_VECTOR (3 downto 0);
        EN     : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        RST    : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADDR   : in STD_LOGIC_VECTOR (9 downto 0);
        DO     : out STD_LOGIC_VECTOR (3 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S4 : entity is TRUE;

end X_RAMB4_S4;

-----------------------------------------------------------------------------

architecture X_RAMB4_S4_V of X_RAMB4_S4 is

  attribute VITAL_LEVEL0 of X_RAMB4_S4_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDR_ipd : std_logic_vector(9 downto 0) := (others => 'X');
  signal DI_ipd   : std_logic_vector(3 downto 0) := (others => 'X');

  signal EN_ipd   : std_ulogic := 'X';
  signal WE_ipd   : std_ulogic := 'X';
  signal RST_ipd  : std_ulogic := 'X';
  signal GSR_ipd  : std_ulogic := 'X';
  signal CLK_ipd  : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDR_ipd(0), ADDR(0), tipd_ADDR(0));
    VitalWireDelay (ADDR_ipd(1), ADDR(1), tipd_ADDR(1));
    VitalWireDelay (ADDR_ipd(2), ADDR(2), tipd_ADDR(2));
    VitalWireDelay (ADDR_ipd(3), ADDR(3), tipd_ADDR(3));
    VitalWireDelay (ADDR_ipd(4), ADDR(4), tipd_ADDR(4));
    VitalWireDelay (ADDR_ipd(5), ADDR(5), tipd_ADDR(5));
    VitalWireDelay (ADDR_ipd(6), ADDR(6), tipd_ADDR(6));
    VitalWireDelay (ADDR_ipd(7), ADDR(7), tipd_ADDR(7));
    VitalWireDelay (ADDR_ipd(8), ADDR(8), tipd_ADDR(8));
    VitalWireDelay (ADDR_ipd(9), ADDR(9), tipd_ADDR(9));
    VitalWireDelay (DI_ipd(0),   DI(0),   tipd_DI(0));
    VitalWireDelay (DI_ipd(1),   DI(1),   tipd_DI(1));
    VitalWireDelay (DI_ipd(2),   DI(2),   tipd_DI(2));
    VitalWireDelay (DI_ipd(3),   DI(3),   tipd_DI(3));
    VitalWireDelay (EN_ipd,      EN,      tipd_EN);
    VitalWireDelay (WE_ipd,      WE,      tipd_WE);
    VitalWireDelay (RST_ipd,     RST,     tipd_RST);
    VitalWireDelay (GSR_ipd,     GSR,     tipd_GSR);
    VitalWireDelay (CLK_ipd,     CLK,     tipd_CLK);
  end block;

  --------------------
  -- X_RAMB4_S4 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DI0_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI1_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI2_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI3_CLK_posedge   : std_ulogic := '0';
    variable Tviol_EN_CLK_posedge    : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge    : std_ulogic := '0';
    variable Tviol_RST_CLK_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLK_posedge   : std_ulogic := '0';
    variable Tviol_ADDR0_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR1_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR2_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR3_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR4_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR5_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR6_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR7_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR8_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR9_CLK_posedge : std_ulogic := '0';

    variable Tmkr_DI0_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI1_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI2_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI3_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_EN_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RST_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR0_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR3_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR4_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR5_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR6_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR7_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR8_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR9_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS : integer;
    variable VALID_ADDR : boolean := FALSE;
    constant DIW   : integer := 4;
    constant DIW_1 : integer := 3;
    variable DO_zd  : std_logic_vector(3 downto 0) := (others => 'X');
    variable DO_GlitchData0 : VitalGlitchDataType;
    variable DO_GlitchData1 : VitalGlitchDataType;
    variable DO_GlitchData2 : VitalGlitchDataType;
    variable DO_GlitchData3 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then
        wait until (GSR_ipd = '1' or CLK_ipd'last_value = '0' or CLK_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DI3_CLK_posedge,
          TimingData              => Tmkr_DI3_CLK_posedge,
          TestSignal              => DI_ipd(3),
          TestSignalName          => "DI(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(3),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(3),
          HoldLow                => thold_DI_CLK_posedge_posedge(3),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(3),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI2_CLK_posedge,
          TimingData              => Tmkr_DI2_CLK_posedge,
          TestSignal              => DI_ipd(2),
          TestSignalName          => "DI(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(2),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(2),
          HoldLow                => thold_DI_CLK_posedge_posedge(2),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(2),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI1_CLK_posedge,
          TimingData              => Tmkr_DI1_CLK_posedge,
          TestSignal              => DI_ipd(1),
          TestSignalName          => "DI(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(1),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(1),
          HoldLow                => thold_DI_CLK_posedge_posedge(1),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(1),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI0_CLK_posedge,
          TimingData              => Tmkr_DI0_CLK_posedge,
          TestSignal              => DI_ipd(0),
          TestSignalName          => "DI(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(0),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(0),
          HoldLow                => thold_DI_CLK_posedge_posedge(0),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(0),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_EN_CLK_posedge,
          TimingData              => Tmkr_EN_CLK_posedge,
          TestSignal              => EN_ipd,
          TestSignalName          => "EN",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_EN_CLK_posedge_posedge,
          SetupLow                => tsetup_EN_CLK_negedge_posedge,
          HoldLow                => thold_EN_CLK_posedge_posedge,
          HoldHigh                 => thold_EN_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RST_CLK_posedge_posedge,
          SetupLow                => tsetup_RST_CLK_negedge_posedge,
          HoldLow                => thold_RST_CLK_posedge_posedge,
          HoldHigh                 => thold_RST_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck ( 
          Violation               => Tviol_GSR_CLK_posedge,
          TimingData              => Tmkr_GSR_CLK_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLK_negedge_posedge,
          Removal                 => thold_GSR_CLK_negedge_posedge,
          ActiveLow               => FALSE,  
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR9_CLK_posedge,
          TimingData              => Tmkr_ADDR9_CLK_posedge,
          TestSignal              => ADDR_ipd(9),
          TestSignalName          => "ADDR(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(9),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(9),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(9),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(9),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR8_CLK_posedge,
          TimingData              => Tmkr_ADDR8_CLK_posedge,
          TestSignal              => ADDR_ipd(8),
          TestSignalName          => "ADDR(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(8),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(8),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(8),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(8),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR7_CLK_posedge,
          TimingData              => Tmkr_ADDR7_CLK_posedge,
          TestSignal              => ADDR_ipd(7),
          TestSignalName          => "ADDR(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(7),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(7),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(7),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(7),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR6_CLK_posedge,
          TimingData              => Tmkr_ADDR6_CLK_posedge,
          TestSignal              => ADDR_ipd(6),
          TestSignalName          => "ADDR(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(6),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(6),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(6),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(6),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR5_CLK_posedge,
          TimingData              => Tmkr_ADDR5_CLK_posedge,
          TestSignal              => ADDR_ipd(5),
          TestSignalName          => "ADDR(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(5),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(5),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(5),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(5),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR4_CLK_posedge,
          TimingData              => Tmkr_ADDR4_CLK_posedge,
          TestSignal              => ADDR_ipd(4),
          TestSignalName          => "ADDR(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(4),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(4),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(4),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(4),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR3_CLK_posedge,
          TimingData              => Tmkr_ADDR3_CLK_posedge,
          TestSignal              => ADDR_ipd(3),
          TestSignalName          => "ADDR(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(3),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(3),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(3),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(3),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR2_CLK_posedge,
          TimingData              => Tmkr_ADDR2_CLK_posedge,
          TestSignal              => ADDR_ipd(2),
          TestSignalName          => "ADDR(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(2),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(2),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(2),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(2),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR1_CLK_posedge,
          TimingData              => Tmkr_ADDR1_CLK_posedge,
          TestSignal              => ADDR_ipd(1),
          TestSignalName          => "ADDR(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(1),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(1),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(1),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(1),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR0_CLK_posedge,
          TimingData              => Tmkr_ADDR0_CLK_posedge,
          TestSignal              => ADDR_ipd(0),
          TestSignalName          => "ADDR(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(0),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(0),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(0),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(0),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DI3_CLK_posedge   or Tviol_DI2_CLK_posedge   or
                 Tviol_DI1_CLK_posedge   or Tviol_DI0_CLK_posedge   or
                 Tviol_EN_CLK_posedge    or Tviol_WE_CLK_posedge    or
                 Tviol_RST_CLK_posedge   or Tviol_ADDR9_CLK_posedge or
                 Tviol_ADDR8_CLK_posedge or Tviol_ADDR7_CLK_posedge or
                 Tviol_ADDR6_CLK_posedge or Tviol_ADDR5_CLK_posedge or
                 Tviol_ADDR4_CLK_posedge or Tviol_ADDR3_CLK_posedge or
                 Tviol_ADDR2_CLK_posedge or Tviol_ADDR1_CLK_posedge or
                 Tviol_ADDR0_CLK_posedge or Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    VALID_ADDR := ADDR_IS_VALID(ADDR_ipd);

    if (VALID_ADDR) then
        ADDRESS := CONV_INTEGER(ADDR_ipd);
    end if;

    if (GSR_ipd = '1') then
        DO_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (EN_ipd = '1') then
            if (CLK_ipd'event AND CLK_ipd'last_value = '0') then
                if (CLK_ipd = '1') then
                    if (WE_ipd = '1') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := DI_ipd;
                            DO_zd := DI_ipd;
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                            DO_zd := (others => 'X');
                        end if;
                    elsif (WE_ipd = 'X') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                        DO_zd := (others => 'X');
                    else 
                        if (VALID_ADDR) then
                            DO_zd := MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW));
                        else
                            DO_zd := (others => 'X');
                        end if;
                    end if;
                    if (RST_ipd = '1') then
                        DO_zd := (others => '0');
                    elsif (RST_ipd = 'X') then
                        DO_zd := (others => 'X');
                    end if;
                elsif (CLK_ipd = 'X') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if; 
            elsif (CLK_ipd'event AND CLK_ipd'last_value = 'X') then
                if (CLK_ipd = '1') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        elsif (EN_ipd = 'X') then
            if (CLK_ipd'event AND CLK_ipd'last_value /= '1') then
                if (CLK_ipd /= '0') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DO_zd := (others => 'X');
    end if;

    DO_zd(3) := Violation XOR DO_zd(3);
    DO_zd(2) := Violation XOR DO_zd(2);
    DO_zd(1) := Violation XOR DO_zd(1);
    DO_zd(0) := Violation XOR DO_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => DO(3),
      GlitchData => DO_GlitchData3,
      OutSignalName => "DO(3)",
      OutTemp => DO_zd(3),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(3),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(3),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(2),
      GlitchData => DO_GlitchData2,
      OutSignalName => "DO(2)",    
      OutTemp => DO_zd(2),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(2),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(2),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(1),
      GlitchData => DO_GlitchData1,
      OutSignalName => "DO(1)",    
      OutTemp => DO_zd(1),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(1),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(1),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(0),
      GlitchData => DO_GlitchData0,
      OutSignalName => "DO(0)",    
      OutTemp => DO_zd(0),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(0),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(0),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLK_ipd, WE_ipd, EN_ipd, RST_ipd, DI_ipd, ADDR_ipd;

  end process VITALBehavior;

end X_RAMB4_S4_V;

configuration CFG_X_RAMB4_S4_V of X_RAMB4_S4 is
   for X_RAMB4_S4_V
   end for;
end CFG_X_RAMB4_S4_V;


----- CELL X_RAMB4_S8 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S8 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S8 is

  generic (

       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDR : VitalDelayArrayType01 (8 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DI   : VitalDelayArrayType01 (7 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_EN  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RST : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLK_DO : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DO : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_EN_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_EN_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_DI_CLK_posedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_DI_CLK_negedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_posedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_negedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       thold_EN_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_EN_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RST_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RST_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;

       thold_DI_CLK_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DI_CLK_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_posedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_negedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DI     : in STD_LOGIC_VECTOR (7 downto 0);
        EN     : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        RST    : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADDR   : in STD_LOGIC_VECTOR (8 downto 0);
        DO     : out STD_LOGIC_VECTOR (7 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S8 : entity is TRUE;

end X_RAMB4_S8;

-----------------------------------------------------------------------------

architecture X_RAMB4_S8_V of X_RAMB4_S8 is

  attribute VITAL_LEVEL0 of X_RAMB4_S8_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDR_ipd : std_logic_vector(8 downto 0) := (others => 'X');
  signal DI_ipd   : std_logic_vector(7 downto 0) := (others => 'X');

  signal EN_ipd   : std_ulogic := 'X';
  signal WE_ipd   : std_ulogic := 'X';
  signal RST_ipd  : std_ulogic := 'X';
  signal GSR_ipd  : std_ulogic := 'X';
  signal CLK_ipd  : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDR_ipd(0), ADDR(0), tipd_ADDR(0));
    VitalWireDelay (ADDR_ipd(1), ADDR(1), tipd_ADDR(1));
    VitalWireDelay (ADDR_ipd(2), ADDR(2), tipd_ADDR(2));
    VitalWireDelay (ADDR_ipd(3), ADDR(3), tipd_ADDR(3));
    VitalWireDelay (ADDR_ipd(4), ADDR(4), tipd_ADDR(4));
    VitalWireDelay (ADDR_ipd(5), ADDR(5), tipd_ADDR(5));
    VitalWireDelay (ADDR_ipd(6), ADDR(6), tipd_ADDR(6));
    VitalWireDelay (ADDR_ipd(7), ADDR(7), tipd_ADDR(7));
    VitalWireDelay (ADDR_ipd(8), ADDR(8), tipd_ADDR(8));
    VitalWireDelay (DI_ipd(0),   DI(0),   tipd_DI(0));
    VitalWireDelay (DI_ipd(1),   DI(1),   tipd_DI(1));
    VitalWireDelay (DI_ipd(2),   DI(2),   tipd_DI(2));
    VitalWireDelay (DI_ipd(3),   DI(3),   tipd_DI(3));
    VitalWireDelay (DI_ipd(4),   DI(4),   tipd_DI(4));
    VitalWireDelay (DI_ipd(5),   DI(5),   tipd_DI(5));
    VitalWireDelay (DI_ipd(6),   DI(6),   tipd_DI(6));
    VitalWireDelay (DI_ipd(7),   DI(7),   tipd_DI(7));
    VitalWireDelay (EN_ipd,      EN,      tipd_EN);
    VitalWireDelay (WE_ipd,      WE,      tipd_WE);
    VitalWireDelay (RST_ipd,     RST,     tipd_RST);
    VitalWireDelay (GSR_ipd,     GSR,     tipd_GSR);
    VitalWireDelay (CLK_ipd,     CLK,     tipd_CLK);
  end block;

  --------------------
  -- X_RAMB4_S8 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DI0_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI1_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI2_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI3_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI4_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI5_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI6_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI7_CLK_posedge   : std_ulogic := '0';
    variable Tviol_EN_CLK_posedge    : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge    : std_ulogic := '0';
    variable Tviol_RST_CLK_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLK_posedge   : std_ulogic := '0';
    variable Tviol_ADDR0_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR1_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR2_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR3_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR4_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR5_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR6_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR7_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR8_CLK_posedge : std_ulogic := '0';

    variable Tmkr_DI0_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI1_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI2_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI3_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI4_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI5_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI6_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI7_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_EN_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RST_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR0_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR3_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR4_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR5_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR6_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR7_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR8_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS : integer;
    variable VALID_ADDR : boolean := FALSE;
    constant DIW   : integer := 8;
    constant DIW_1 : integer := 7;
    variable DO_zd  : std_logic_vector(7 downto 0) := (others => 'X');
    variable DO_GlitchData0 : VitalGlitchDataType;
    variable DO_GlitchData1 : VitalGlitchDataType;
    variable DO_GlitchData2 : VitalGlitchDataType;
    variable DO_GlitchData3 : VitalGlitchDataType;
    variable DO_GlitchData4 : VitalGlitchDataType;
    variable DO_GlitchData5 : VitalGlitchDataType;
    variable DO_GlitchData6 : VitalGlitchDataType;
    variable DO_GlitchData7 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then
        wait until (GSR_ipd = '1' or CLK_ipd'last_value = '0' or CLK_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DI7_CLK_posedge,
          TimingData              => Tmkr_DI7_CLK_posedge,
          TestSignal              => DI_ipd(7),
          TestSignalName          => "DI(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(7),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(7),
          HoldLow                => thold_DI_CLK_posedge_posedge(7),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(7),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI6_CLK_posedge,
          TimingData              => Tmkr_DI6_CLK_posedge,
          TestSignal              => DI_ipd(6),
          TestSignalName          => "DI(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(6),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(6),
          HoldLow                => thold_DI_CLK_posedge_posedge(6),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(6),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI5_CLK_posedge,
          TimingData              => Tmkr_DI5_CLK_posedge,
          TestSignal              => DI_ipd(5),
          TestSignalName          => "DI(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(5),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(5),
          HoldLow                => thold_DI_CLK_posedge_posedge(5),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(5),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI4_CLK_posedge,
          TimingData              => Tmkr_DI4_CLK_posedge,
          TestSignal              => DI_ipd(4),
          TestSignalName          => "DI(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(4),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(4),
          HoldLow                => thold_DI_CLK_posedge_posedge(4),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(4),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI3_CLK_posedge,
          TimingData              => Tmkr_DI3_CLK_posedge,
          TestSignal              => DI_ipd(3),
          TestSignalName          => "DI(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(3),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(3),
          HoldLow                => thold_DI_CLK_posedge_posedge(3),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(3),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI2_CLK_posedge,
          TimingData              => Tmkr_DI2_CLK_posedge,
          TestSignal              => DI_ipd(2),
          TestSignalName          => "DI(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(2),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(2),
          HoldLow                => thold_DI_CLK_posedge_posedge(2),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(2),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI1_CLK_posedge,
          TimingData              => Tmkr_DI1_CLK_posedge,
          TestSignal              => DI_ipd(1),
          TestSignalName          => "DI(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(1),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(1),
          HoldLow                => thold_DI_CLK_posedge_posedge(1),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(1),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI0_CLK_posedge,
          TimingData              => Tmkr_DI0_CLK_posedge,
          TestSignal              => DI_ipd(0),
          TestSignalName          => "DI(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(0),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(0),
          HoldLow                => thold_DI_CLK_posedge_posedge(0),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(0),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_EN_CLK_posedge,
          TimingData              => Tmkr_EN_CLK_posedge,
          TestSignal              => EN_ipd,
          TestSignalName          => "EN",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_EN_CLK_posedge_posedge,
          SetupLow                => tsetup_EN_CLK_negedge_posedge,
          HoldLow                => thold_EN_CLK_posedge_posedge,
          HoldHigh                 => thold_EN_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RST_CLK_posedge_posedge,
          SetupLow                => tsetup_RST_CLK_negedge_posedge,
          HoldLow                => thold_RST_CLK_posedge_posedge,
          HoldHigh                 => thold_RST_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck ( 
          Violation               => Tviol_GSR_CLK_posedge,
          TimingData              => Tmkr_GSR_CLK_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLK_negedge_posedge,
          Removal                 => thold_GSR_CLK_negedge_posedge,
          ActiveLow               => FALSE,  
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR8_CLK_posedge,
          TimingData              => Tmkr_ADDR8_CLK_posedge,
          TestSignal              => ADDR_ipd(8),
          TestSignalName          => "ADDR(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(8),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(8),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(8),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(8),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR7_CLK_posedge,
          TimingData              => Tmkr_ADDR7_CLK_posedge,
          TestSignal              => ADDR_ipd(7),
          TestSignalName          => "ADDR(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(7),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(7),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(7),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(7),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR6_CLK_posedge,
          TimingData              => Tmkr_ADDR6_CLK_posedge,
          TestSignal              => ADDR_ipd(6),
          TestSignalName          => "ADDR(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(6),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(6),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(6),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(6),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR5_CLK_posedge,
          TimingData              => Tmkr_ADDR5_CLK_posedge,
          TestSignal              => ADDR_ipd(5),
          TestSignalName          => "ADDR(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(5),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(5),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(5),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(5),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR4_CLK_posedge,
          TimingData              => Tmkr_ADDR4_CLK_posedge,
          TestSignal              => ADDR_ipd(4),
          TestSignalName          => "ADDR(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(4),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(4),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(4),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(4),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR3_CLK_posedge,
          TimingData              => Tmkr_ADDR3_CLK_posedge,
          TestSignal              => ADDR_ipd(3),
          TestSignalName          => "ADDR(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(3),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(3),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(3),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(3),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR2_CLK_posedge,
          TimingData              => Tmkr_ADDR2_CLK_posedge,
          TestSignal              => ADDR_ipd(2),
          TestSignalName          => "ADDR(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(2),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(2),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(2),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(2),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR1_CLK_posedge,
          TimingData              => Tmkr_ADDR1_CLK_posedge,
          TestSignal              => ADDR_ipd(1),
          TestSignalName          => "ADDR(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(1),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(1),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(1),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(1),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR0_CLK_posedge,
          TimingData              => Tmkr_ADDR0_CLK_posedge,
          TestSignal              => ADDR_ipd(0),
          TestSignalName          => "ADDR(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(0),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(0),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(0),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(0),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DI7_CLK_posedge   or Tviol_DI6_CLK_posedge   or
                 Tviol_DI5_CLK_posedge   or Tviol_DI4_CLK_posedge   or
                 Tviol_DI3_CLK_posedge   or Tviol_DI2_CLK_posedge   or
                 Tviol_DI1_CLK_posedge   or Tviol_DI0_CLK_posedge   or
                 Tviol_EN_CLK_posedge    or Tviol_WE_CLK_posedge    or
                 Tviol_RST_CLK_posedge   or Tviol_ADDR8_CLK_posedge or
                 Tviol_ADDR7_CLK_posedge or Tviol_ADDR6_CLK_posedge or 
                 Tviol_ADDR5_CLK_posedge or Tviol_ADDR4_CLK_posedge or
                 Tviol_ADDR3_CLK_posedge or Tviol_ADDR2_CLK_posedge or
                 Tviol_ADDR1_CLK_posedge or Tviol_ADDR0_CLK_posedge or
                 Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    VALID_ADDR := ADDR_IS_VALID(ADDR_ipd);

    if (VALID_ADDR) then
        ADDRESS := CONV_INTEGER(ADDR_ipd);
    end if;

    if (GSR_ipd = '1') then
        DO_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (EN_ipd = '1') then
            if (CLK_ipd'event AND CLK_ipd'last_value = '0') then
                if (CLK_ipd = '1') then
                    if (WE_ipd = '1') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := DI_ipd;
                            DO_zd := DI_ipd;
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                            DO_zd := (others => 'X');
                        end if;
                    elsif (WE_ipd = 'X') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                        DO_zd := (others => 'X');
                    else 
                        if (VALID_ADDR) then
                            DO_zd := MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW));
                        else
                            DO_zd := (others => 'X');
                        end if;
                    end if;
                    if (RST_ipd = '1') then
                        DO_zd := (others => '0');
                    elsif (RST_ipd = 'X') then
                        DO_zd := (others => 'X');
                    end if;
                elsif (CLK_ipd = 'X') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if; 
            elsif (CLK_ipd'event AND CLK_ipd'last_value = 'X') then
                if (CLK_ipd = '1') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        elsif (EN_ipd = 'X') then
            if (CLK_ipd'event AND CLK_ipd'last_value /= '1') then
                if (CLK_ipd /= '0') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DO_zd := (others => 'X');
    end if;

    DO_zd(7) := Violation XOR DO_zd(7);
    DO_zd(6) := Violation XOR DO_zd(6);
    DO_zd(5) := Violation XOR DO_zd(5);
    DO_zd(4) := Violation XOR DO_zd(4);
    DO_zd(3) := Violation XOR DO_zd(3);
    DO_zd(2) := Violation XOR DO_zd(2);
    DO_zd(1) := Violation XOR DO_zd(1);
    DO_zd(0) := Violation XOR DO_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => DO(7),
      GlitchData => DO_GlitchData7,
      OutSignalName => "DO(7)",
      OutTemp => DO_zd(7),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(7),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(7),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(6),
      GlitchData => DO_GlitchData6,
      OutSignalName => "DO(6)",    
      OutTemp => DO_zd(6),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(6),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(6),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(5),
      GlitchData => DO_GlitchData5,
      OutSignalName => "DO(5)",    
      OutTemp => DO_zd(5),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(5),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(5),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(4),
      GlitchData => DO_GlitchData4,
      OutSignalName => "DO(4)",    
      OutTemp => DO_zd(4),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(4),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(4),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DO(3),
      GlitchData => DO_GlitchData3,
      OutSignalName => "DO(3)",
      OutTemp => DO_zd(3),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(3),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(3),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(2),
      GlitchData => DO_GlitchData2,
      OutSignalName => "DO(2)",    
      OutTemp => DO_zd(2),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(2),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(2),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(1),
      GlitchData => DO_GlitchData1,
      OutSignalName => "DO(1)",    
      OutTemp => DO_zd(1),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(1),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(1),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(0),
      GlitchData => DO_GlitchData0,
      OutSignalName => "DO(0)",    
      OutTemp => DO_zd(0),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(0),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(0),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLK_ipd, WE_ipd, EN_ipd, RST_ipd, DI_ipd, ADDR_ipd;

  end process VITALBehavior;

end X_RAMB4_S8_V;

configuration CFG_X_RAMB4_S8_V of X_RAMB4_S8 is
   for X_RAMB4_S8_V
   end for;
end CFG_X_RAMB4_S8_V;


----- CELL X_RAMB4_S16 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S16 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S16 is

  generic (

       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDR : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DI   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_EN  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RST : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLK_DO : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DO : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_EN_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_EN_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RST_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_DI_CLK_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DI_CLK_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDR_CLK_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDR_CLK_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_EN_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_EN_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RST_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RST_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;

       thold_DI_CLK_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DI_CLK_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDR_CLK_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDR_CLK_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DI     : in STD_LOGIC_VECTOR (15 downto 0);
        EN     : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        RST    : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADDR   : in STD_LOGIC_VECTOR (7 downto 0);
        DO     : out STD_LOGIC_VECTOR (15 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S16 : entity is TRUE;

end X_RAMB4_S16;

-----------------------------------------------------------------------------

architecture X_RAMB4_S16_V of X_RAMB4_S16 is

  attribute VITAL_LEVEL0 of X_RAMB4_S16_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDR_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DI_ipd   : std_logic_vector(15 downto 0) := (others => 'X');

  signal EN_ipd   : std_ulogic := 'X';
  signal WE_ipd   : std_ulogic := 'X';
  signal RST_ipd  : std_ulogic := 'X';
  signal GSR_ipd  : std_ulogic := 'X';
  signal CLK_ipd  : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDR_ipd(0), ADDR(0), tipd_ADDR(0));
    VitalWireDelay (ADDR_ipd(1), ADDR(1), tipd_ADDR(1));
    VitalWireDelay (ADDR_ipd(2), ADDR(2), tipd_ADDR(2));
    VitalWireDelay (ADDR_ipd(3), ADDR(3), tipd_ADDR(3));
    VitalWireDelay (ADDR_ipd(4), ADDR(4), tipd_ADDR(4));
    VitalWireDelay (ADDR_ipd(5), ADDR(5), tipd_ADDR(5));
    VitalWireDelay (ADDR_ipd(6), ADDR(6), tipd_ADDR(6));
    VitalWireDelay (ADDR_ipd(7), ADDR(7), tipd_ADDR(7));
    VitalWireDelay (DI_ipd(0),   DI(0),   tipd_DI(0));
    VitalWireDelay (DI_ipd(1),   DI(1),   tipd_DI(1));
    VitalWireDelay (DI_ipd(2),   DI(2),   tipd_DI(2));
    VitalWireDelay (DI_ipd(3),   DI(3),   tipd_DI(3));
    VitalWireDelay (DI_ipd(4),   DI(4),   tipd_DI(4));
    VitalWireDelay (DI_ipd(5),   DI(5),   tipd_DI(5));
    VitalWireDelay (DI_ipd(6),   DI(6),   tipd_DI(6));
    VitalWireDelay (DI_ipd(7),   DI(7),   tipd_DI(7));
    VitalWireDelay (DI_ipd(8),   DI(8),   tipd_DI(8));
    VitalWireDelay (DI_ipd(9),   DI(9),   tipd_DI(9));
    VitalWireDelay (DI_ipd(10),  DI(10),  tipd_DI(10));
    VitalWireDelay (DI_ipd(11),  DI(11),  tipd_DI(11));
    VitalWireDelay (DI_ipd(12),  DI(12),  tipd_DI(12));
    VitalWireDelay (DI_ipd(13),  DI(13),  tipd_DI(13));
    VitalWireDelay (DI_ipd(14),  DI(14),  tipd_DI(14));
    VitalWireDelay (DI_ipd(15),  DI(15),  tipd_DI(15));
    VitalWireDelay (EN_ipd,      EN,      tipd_EN);
    VitalWireDelay (WE_ipd,      WE,      tipd_WE);
    VitalWireDelay (RST_ipd,     RST,     tipd_RST);
    VitalWireDelay (GSR_ipd,     GSR,     tipd_GSR);
    VitalWireDelay (CLK_ipd,     CLK,     tipd_CLK);
  end block;

  --------------------
  -- X_RAMB4_S16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DI0_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI1_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI2_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI3_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI4_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI5_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI6_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI7_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI8_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI9_CLK_posedge   : std_ulogic := '0';
    variable Tviol_DI10_CLK_posedge  : std_ulogic := '0';
    variable Tviol_DI11_CLK_posedge  : std_ulogic := '0';
    variable Tviol_DI12_CLK_posedge  : std_ulogic := '0';
    variable Tviol_DI13_CLK_posedge  : std_ulogic := '0';
    variable Tviol_DI14_CLK_posedge  : std_ulogic := '0';
    variable Tviol_DI15_CLK_posedge  : std_ulogic := '0';
    variable Tviol_EN_CLK_posedge    : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge    : std_ulogic := '0';
    variable Tviol_RST_CLK_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLK_posedge   : std_ulogic := '0';
    variable Tviol_ADDR0_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR1_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR2_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR3_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR4_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR5_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR6_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADDR7_CLK_posedge : std_ulogic := '0';

    variable Tmkr_DI0_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI1_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI2_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI3_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI4_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI5_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI6_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI7_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI8_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI9_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI10_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI11_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI12_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI13_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI14_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DI15_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_EN_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RST_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR0_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR3_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR4_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR5_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR6_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDR7_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS : integer;
    variable VALID_ADDR : boolean := FALSE;
    constant DIW   : integer := 16;
    constant DIW_1 : integer := 15;
    variable DO_zd  : std_logic_vector(15 downto 0) := (others => 'X');
    variable DO_GlitchData0  : VitalGlitchDataType;
    variable DO_GlitchData1  : VitalGlitchDataType;
    variable DO_GlitchData2  : VitalGlitchDataType;
    variable DO_GlitchData3  : VitalGlitchDataType;
    variable DO_GlitchData4  : VitalGlitchDataType;
    variable DO_GlitchData5  : VitalGlitchDataType;
    variable DO_GlitchData6  : VitalGlitchDataType;
    variable DO_GlitchData7  : VitalGlitchDataType;
    variable DO_GlitchData8  : VitalGlitchDataType;
    variable DO_GlitchData9  : VitalGlitchDataType;
    variable DO_GlitchData10 : VitalGlitchDataType;
    variable DO_GlitchData11 : VitalGlitchDataType;
    variable DO_GlitchData12 : VitalGlitchDataType;
    variable DO_GlitchData13 : VitalGlitchDataType;
    variable DO_GlitchData14 : VitalGlitchDataType;
    variable DO_GlitchData15 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then
        wait until (GSR_ipd = '1' or CLK_ipd'last_value = '0' or CLK_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DI15_CLK_posedge,
          TimingData              => Tmkr_DI15_CLK_posedge,
          TestSignal              => DI_ipd(15),
          TestSignalName          => "DI(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(15),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(15),
          HoldLow                => thold_DI_CLK_posedge_posedge(15),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(15),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI14_CLK_posedge,
          TimingData              => Tmkr_DI14_CLK_posedge,
          TestSignal              => DI_ipd(14),
          TestSignalName          => "DI(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(14),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(14),
          HoldLow                => thold_DI_CLK_posedge_posedge(14),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(14),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI13_CLK_posedge,
          TimingData              => Tmkr_DI13_CLK_posedge,
          TestSignal              => DI_ipd(13),
          TestSignalName          => "DI(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(13),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(13),
          HoldLow                => thold_DI_CLK_posedge_posedge(13),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(13),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI12_CLK_posedge,
          TimingData              => Tmkr_DI12_CLK_posedge,
          TestSignal              => DI_ipd(12),
          TestSignalName          => "DI(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(12),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(12),
          HoldLow                => thold_DI_CLK_posedge_posedge(12),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(12),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI11_CLK_posedge,
          TimingData              => Tmkr_DI11_CLK_posedge,
          TestSignal              => DI_ipd(11),
          TestSignalName          => "DI(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(11),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(11),
          HoldLow                => thold_DI_CLK_posedge_posedge(11),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(11),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI10_CLK_posedge,
          TimingData              => Tmkr_DI10_CLK_posedge,
          TestSignal              => DI_ipd(10),
          TestSignalName          => "DI(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(10),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(10),
          HoldLow                => thold_DI_CLK_posedge_posedge(10),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(10),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI9_CLK_posedge,
          TimingData              => Tmkr_DI9_CLK_posedge,
          TestSignal              => DI_ipd(9),
          TestSignalName          => "DI(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(9),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(9),
          HoldLow                => thold_DI_CLK_posedge_posedge(9),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(9),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI8_CLK_posedge,
          TimingData              => Tmkr_DI8_CLK_posedge,
          TestSignal              => DI_ipd(8),
          TestSignalName          => "DI(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(8),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(8),
          HoldLow                => thold_DI_CLK_posedge_posedge(8),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(8),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI7_CLK_posedge,
          TimingData              => Tmkr_DI7_CLK_posedge,
          TestSignal              => DI_ipd(7),
          TestSignalName          => "DI(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(7),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(7),
          HoldLow                => thold_DI_CLK_posedge_posedge(7),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(7),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI6_CLK_posedge,
          TimingData              => Tmkr_DI6_CLK_posedge,
          TestSignal              => DI_ipd(6),
          TestSignalName          => "DI(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(6),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(6),
          HoldLow                => thold_DI_CLK_posedge_posedge(6),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(6),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI5_CLK_posedge,
          TimingData              => Tmkr_DI5_CLK_posedge,
          TestSignal              => DI_ipd(5),
          TestSignalName          => "DI(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(5),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(5),
          HoldLow                => thold_DI_CLK_posedge_posedge(5),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(5),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI4_CLK_posedge,
          TimingData              => Tmkr_DI4_CLK_posedge,
          TestSignal              => DI_ipd(4),
          TestSignalName          => "DI(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(4),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(4),
          HoldLow                => thold_DI_CLK_posedge_posedge(4),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(4),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI3_CLK_posedge,
          TimingData              => Tmkr_DI3_CLK_posedge,
          TestSignal              => DI_ipd(3),
          TestSignalName          => "DI(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(3),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(3),
          HoldLow                => thold_DI_CLK_posedge_posedge(3),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(3),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI2_CLK_posedge,
          TimingData              => Tmkr_DI2_CLK_posedge,
          TestSignal              => DI_ipd(2),
          TestSignalName          => "DI(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(2),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(2),
          HoldLow                => thold_DI_CLK_posedge_posedge(2),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(2),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI1_CLK_posedge,
          TimingData              => Tmkr_DI1_CLK_posedge,
          TestSignal              => DI_ipd(1),
          TestSignalName          => "DI(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(1),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(1),
          HoldLow                => thold_DI_CLK_posedge_posedge(1),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(1),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DI0_CLK_posedge,
          TimingData              => Tmkr_DI0_CLK_posedge,
          TestSignal              => DI_ipd(0),
          TestSignalName          => "DI(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DI_CLK_posedge_posedge(0),
          SetupLow                => tsetup_DI_CLK_negedge_posedge(0),
          HoldLow                => thold_DI_CLK_posedge_posedge(0),
          HoldHigh                 => thold_DI_CLK_negedge_posedge(0),
          CheckEnabled            => (TO_X01(EN_ipd) = '1' AND TO_X01(WE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_EN_CLK_posedge,
          TimingData              => Tmkr_EN_CLK_posedge,
          TestSignal              => EN_ipd,
          TestSignalName          => "EN",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_EN_CLK_posedge_posedge,
          SetupLow                => tsetup_EN_CLK_negedge_posedge,
          HoldLow                => thold_EN_CLK_posedge_posedge,
          HoldHigh                 => thold_EN_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RST_CLK_posedge_posedge,
          SetupLow                => tsetup_RST_CLK_negedge_posedge,
          HoldLow                => thold_RST_CLK_posedge_posedge,
          HoldHigh                 => thold_RST_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck ( 
          Violation               => Tviol_GSR_CLK_posedge,
          TimingData              => Tmkr_GSR_CLK_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLK_negedge_posedge,
          Removal                 => thold_GSR_CLK_negedge_posedge,
          ActiveLow               => FALSE,  
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR7_CLK_posedge,
          TimingData              => Tmkr_ADDR7_CLK_posedge,
          TestSignal              => ADDR_ipd(7),
          TestSignalName          => "ADDR(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(7),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(7),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(7),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(7),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR6_CLK_posedge,
          TimingData              => Tmkr_ADDR6_CLK_posedge,
          TestSignal              => ADDR_ipd(6),
          TestSignalName          => "ADDR(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(6),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(6),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(6),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(6),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR5_CLK_posedge,
          TimingData              => Tmkr_ADDR5_CLK_posedge,
          TestSignal              => ADDR_ipd(5),
          TestSignalName          => "ADDR(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(5),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(5),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(5),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(5),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR4_CLK_posedge,
          TimingData              => Tmkr_ADDR4_CLK_posedge,
          TestSignal              => ADDR_ipd(4),
          TestSignalName          => "ADDR(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(4),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(4),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(4),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(4),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR3_CLK_posedge,
          TimingData              => Tmkr_ADDR3_CLK_posedge,
          TestSignal              => ADDR_ipd(3),
          TestSignalName          => "ADDR(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(3),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(3),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(3),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(3),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR2_CLK_posedge,
          TimingData              => Tmkr_ADDR2_CLK_posedge,
          TestSignal              => ADDR_ipd(2),
          TestSignalName          => "ADDR(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(2),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(2),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(2),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(2),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR1_CLK_posedge,
          TimingData              => Tmkr_ADDR1_CLK_posedge,
          TestSignal              => ADDR_ipd(1),
          TestSignalName          => "ADDR(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(1),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(1),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(1),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(1),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDR0_CLK_posedge,
          TimingData              => Tmkr_ADDR0_CLK_posedge,
          TestSignal              => ADDR_ipd(0),
          TestSignalName          => "ADDR(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDR_CLK_posedge_posedge(0),
          SetupLow                => tsetup_ADDR_CLK_negedge_posedge(0),
          HoldLow                => thold_ADDR_CLK_posedge_posedge(0),
          HoldHigh                 => thold_ADDR_CLK_negedge_posedge(0),
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TO_X01(EN_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DI15_CLK_posedge  or Tviol_DI14_CLK_posedge  or
                 Tviol_DI13_CLK_posedge  or Tviol_DI12_CLK_posedge  or
                 Tviol_DI11_CLK_posedge  or Tviol_DI10_CLK_posedge  or
                 Tviol_DI9_CLK_posedge   or Tviol_DI8_CLK_posedge   or
                 Tviol_DI7_CLK_posedge   or Tviol_DI6_CLK_posedge   or
                 Tviol_DI5_CLK_posedge   or Tviol_DI4_CLK_posedge   or
                 Tviol_DI3_CLK_posedge   or Tviol_DI2_CLK_posedge   or
                 Tviol_DI1_CLK_posedge   or Tviol_DI0_CLK_posedge   or
                 Tviol_EN_CLK_posedge    or Tviol_WE_CLK_posedge    or
                 Tviol_RST_CLK_posedge   or Tviol_ADDR7_CLK_posedge or 
                 Tviol_ADDR6_CLK_posedge or Tviol_ADDR5_CLK_posedge or
                 Tviol_ADDR4_CLK_posedge or Tviol_ADDR3_CLK_posedge or
                 Tviol_ADDR2_CLK_posedge or Tviol_ADDR1_CLK_posedge or 
                 Tviol_ADDR0_CLK_posedge or Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    VALID_ADDR := ADDR_IS_VALID(ADDR_ipd);

    if (VALID_ADDR) then
        ADDRESS := CONV_INTEGER(ADDR_ipd);
    end if;

    if (GSR_ipd = '1') then
        DO_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (EN_ipd = '1') then
            if (CLK_ipd'event AND CLK_ipd'last_value = '0') then
                if (CLK_ipd = '1') then
                    if (WE_ipd = '1') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := DI_ipd;
                            DO_zd := DI_ipd;
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                            DO_zd := (others => 'X');
                        end if;
                    elsif (WE_ipd = 'X') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                        DO_zd := (others => 'X');
                    else 
                        if (VALID_ADDR) then
                            DO_zd := MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW));
                        else
                            DO_zd := (others => 'X');
                        end if;
                    end if;
                    if (RST_ipd = '1') then
                        DO_zd := (others => '0');
                    elsif (RST_ipd = 'X') then
                        DO_zd := (others => 'X');
                    end if;
                elsif (CLK_ipd = 'X') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if; 
            elsif (CLK_ipd'event AND CLK_ipd'last_value = 'X') then
                if (CLK_ipd = '1') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        elsif (EN_ipd = 'X') then
            if (CLK_ipd'event AND CLK_ipd'last_value /= '1') then
                if (CLK_ipd /= '0') then
                    if (WE_ipd /= '0') then
                        if (VALID_ADDR) then
                            MEM((ADDRESS*DIW + DIW_1) downto (ADDRESS*DIW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDR_ipd, MEM);
                        end if;
                    end if;
                    DO_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DO_zd := (others => 'X');
    end if;

    DO_zd(15) := Violation XOR DO_zd(15);
    DO_zd(14) := Violation XOR DO_zd(14);
    DO_zd(13) := Violation XOR DO_zd(13);
    DO_zd(12) := Violation XOR DO_zd(12);
    DO_zd(11) := Violation XOR DO_zd(11);
    DO_zd(10) := Violation XOR DO_zd(10);
    DO_zd(9)  := Violation XOR DO_zd(9);
    DO_zd(8)  := Violation XOR DO_zd(8);
    DO_zd(7)  := Violation XOR DO_zd(7);
    DO_zd(6)  := Violation XOR DO_zd(6);
    DO_zd(5)  := Violation XOR DO_zd(5);
    DO_zd(4)  := Violation XOR DO_zd(4);
    DO_zd(3)  := Violation XOR DO_zd(3);
    DO_zd(2)  := Violation XOR DO_zd(2);
    DO_zd(1)  := Violation XOR DO_zd(1);
    DO_zd(0)  := Violation XOR DO_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => DO(15),
      GlitchData => DO_GlitchData15,
      OutSignalName => "DO(15)",
      OutTemp => DO_zd(15),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(15),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(15),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(14),
      GlitchData => DO_GlitchData14,
      OutSignalName => "DO(14)",    
      OutTemp => DO_zd(14),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(14),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(14),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(13),
      GlitchData => DO_GlitchData13,
      OutSignalName => "DO(13)",    
      OutTemp => DO_zd(13),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(13),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(13),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(12),
      GlitchData => DO_GlitchData12,
      OutSignalName => "DO(12)",    
      OutTemp => DO_zd(12),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(12),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(12),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DO(11),
      GlitchData => DO_GlitchData11,
      OutSignalName => "DO(11)",
      OutTemp => DO_zd(11),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(11),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(11),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(10),
      GlitchData => DO_GlitchData10,
      OutSignalName => "DO(10)",    
      OutTemp => DO_zd(10),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(10),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(10),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(9),
      GlitchData => DO_GlitchData9,
      OutSignalName => "DO(9)",    
      OutTemp => DO_zd(9),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(9),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(9),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(8),
      GlitchData => DO_GlitchData8,
      OutSignalName => "DO(8)",    
      OutTemp => DO_zd(8),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(8),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(8),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DO(7),
      GlitchData => DO_GlitchData7,
      OutSignalName => "DO(7)",
      OutTemp => DO_zd(7),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(7),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(7),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(6),
      GlitchData => DO_GlitchData6,
      OutSignalName => "DO(6)",    
      OutTemp => DO_zd(6),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(6),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(6),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(5),
      GlitchData => DO_GlitchData5,
      OutSignalName => "DO(5)",    
      OutTemp => DO_zd(5),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(5),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(5),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(4),
      GlitchData => DO_GlitchData4,
      OutSignalName => "DO(4)",    
      OutTemp => DO_zd(4),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(4),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(4),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DO(3),
      GlitchData => DO_GlitchData3,
      OutSignalName => "DO(3)",
      OutTemp => DO_zd(3),
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(3),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(3),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(2),
      GlitchData => DO_GlitchData2,
      OutSignalName => "DO(2)",    
      OutTemp => DO_zd(2),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(2),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(2),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(1),
      GlitchData => DO_GlitchData1,
      OutSignalName => "DO(1)",    
      OutTemp => DO_zd(1),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(1),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(1),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DO(0),
      GlitchData => DO_GlitchData0,
      OutSignalName => "DO(0)",    
      OutTemp => DO_zd(0),  
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_DO(0),  TRUE),
                1 => (GSR_ipd'last_event,  tpd_GSR_DO(0),  TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLK_ipd, WE_ipd, EN_ipd, RST_ipd, DI_ipd, ADDR_ipd;

  end process VITALBehavior;

end X_RAMB4_S16_V;

configuration CFG_X_RAMB4_S16_V of X_RAMB4_S16 is
   for X_RAMB4_S16_V
   end for;
end CFG_X_RAMB4_S16_V;


----- CELL X_RAMB4_S1_S1 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S1_S1 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S1_S1 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (0 downto 0);
        DIB    : in STD_LOGIC_VECTOR (0 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (11 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (11 downto 0);
        DOA    : out STD_LOGIC_VECTOR (0 downto 0);
        DOB    : out STD_LOGIC_VECTOR (0 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S1_S1 : entity is TRUE;

end X_RAMB4_S1_S1;

-----------------------------------------------------------------------------

architecture X_RAMB4_S1_S1_V of X_RAMB4_S1_S1 is

  attribute VITAL_LEVEL0 of X_RAMB4_S1_S1_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal DIA_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRA_ipd(11), ADDRA(11), tipd_ADDRA(11));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (ADDRB_ipd(9),  ADDRB(9),  tipd_ADDRB(9));
    VitalWireDelay (ADDRB_ipd(10), ADDRB(10), tipd_ADDRB(10));
    VitalWireDelay (ADDRB_ipd(11), ADDRB(11), tipd_ADDRB(11));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S1_S1 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA11_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB10_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB11_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA11_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB10_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB11_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 1;
    constant DIAW_1 : integer := 0;
    constant DIBW   : integer := 1;
    constant DIBW_1 : integer := 0;
    variable DOA_zd : std_logic_vector(0 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(0 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck ( 
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,  
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck ( 
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,  
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA11_CLKA_posedge,
          TimingData              => Tmkr_ADDRA11_CLKA_posedge,
          TestSignal              => ADDRA_ipd(11),
          TestSignalName          => "ADDRA(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(11),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(11),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(11),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(11),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB11_CLKB_posedge,
          TimingData              => Tmkr_ADDRB11_CLKB_posedge,
          TestSignal              => ADDRB_ipd(11),
          TestSignalName          => "ADDRB(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(11),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(11),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(11),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(11),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB10_CLKB_posedge,
          TimingData              => Tmkr_ADDRB10_CLKB_posedge,
          TestSignal              => ADDRB_ipd(10),
          TestSignalName          => "ADDRB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(10),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB9_CLKB_posedge,
          TimingData              => Tmkr_ADDRB9_CLKB_posedge,
          TestSignal              => ADDRB_ipd(9),
          TestSignalName          => "ADDRB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(9),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S1",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA0_CLKA_posedge    or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge     or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA11_CLKA_posedge or Tviol_ADDRA10_CLKA_posedge or 
                 Tviol_ADDRA9_CLKA_posedge  or Tviol_ADDRA8_CLKA_posedge  or
                 Tviol_ADDRA7_CLKA_posedge  or Tviol_ADDRA6_CLKA_posedge  or
                 Tviol_ADDRA5_CLKA_posedge  or Tviol_ADDRA4_CLKA_posedge  or
                 Tviol_ADDRA3_CLKA_posedge  or Tviol_ADDRA2_CLKA_posedge  or
                 Tviol_ADDRA1_CLKA_posedge  or Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB0_CLKB_posedge    or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge     or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB11_CLKB_posedge or Tviol_ADDRB10_CLKB_posedge or
                 Tviol_ADDRB9_CLKB_posedge  or Tviol_ADDRB8_CLKB_posedge  or
                 Tviol_ADDRB7_CLKB_posedge  or Tviol_ADDRB6_CLKB_posedge  or
                 Tviol_ADDRB5_CLKB_posedge  or Tviol_ADDRB4_CLKB_posedge  or
                 Tviol_ADDRB3_CLKB_posedge  or Tviol_ADDRB2_CLKB_posedge  or
                 Tviol_ADDRB1_CLKB_posedge  or Tviol_ADDRB0_CLKB_posedge  or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S1_S1_V;

configuration CFG_X_RAMB4_S1_S1_V of X_RAMB4_S1_S1 is
   for X_RAMB4_S1_S1_V
   end for;
end CFG_X_RAMB4_S1_S1_V;


----- CELL X_RAMB4_S1_S2 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S1_S2 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S1_S2 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (0 downto 0);
        DIB    : in STD_LOGIC_VECTOR (1 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (11 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (10 downto 0);
        DOA    : out STD_LOGIC_VECTOR (0 downto 0);
        DOB    : out STD_LOGIC_VECTOR (1 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S1_S2 : entity is TRUE;

end X_RAMB4_S1_S2;

-----------------------------------------------------------------------------

architecture X_RAMB4_S1_S2_V of X_RAMB4_S1_S2 is

  attribute VITAL_LEVEL0 of X_RAMB4_S1_S2_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal DIA_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRA_ipd(11), ADDRA(11), tipd_ADDRA(11));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (ADDRB_ipd(9),  ADDRB(9),  tipd_ADDRB(9));
    VitalWireDelay (ADDRB_ipd(10), ADDRB(10), tipd_ADDRB(10));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S1_S2 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA11_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB10_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA11_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB10_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 1;
    constant DIAW_1 : integer := 0;
    constant DIBW   : integer := 2;
    constant DIBW_1 : integer := 1;
    variable DOA_zd : std_logic_vector(0 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(1 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA11_CLKA_posedge,
          TimingData              => Tmkr_ADDRA11_CLKA_posedge,
          TestSignal              => ADDRA_ipd(11),
          TestSignalName          => "ADDRA(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(11),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(11),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(11),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(11),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB10_CLKB_posedge,
          TimingData              => Tmkr_ADDRB10_CLKB_posedge,
          TestSignal              => ADDRB_ipd(10),
          TestSignalName          => "ADDRB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(10),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB9_CLKB_posedge,
          TimingData              => Tmkr_ADDRB9_CLKB_posedge,
          TestSignal              => ADDRB_ipd(9),
          TestSignalName          => "ADDRB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(9),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA0_CLKA_posedge    or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge     or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA11_CLKA_posedge or Tviol_ADDRA10_CLKA_posedge or 
                 Tviol_ADDRA9_CLKA_posedge  or Tviol_ADDRA8_CLKA_posedge  or
                 Tviol_ADDRA7_CLKA_posedge  or Tviol_ADDRA6_CLKA_posedge  or
                 Tviol_ADDRA5_CLKA_posedge  or Tviol_ADDRA4_CLKA_posedge  or
                 Tviol_ADDRA3_CLKA_posedge  or Tviol_ADDRA2_CLKA_posedge  or
                 Tviol_ADDRA1_CLKA_posedge  or Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge    or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge     or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB10_CLKB_posedge or Tviol_ADDRB9_CLKB_posedge  or 
                 Tviol_ADDRB8_CLKB_posedge  or Tviol_ADDRB7_CLKB_posedge  or
                 Tviol_ADDRB6_CLKB_posedge  or Tviol_ADDRB5_CLKB_posedge  or
                 Tviol_ADDRB4_CLKB_posedge  or Tviol_ADDRB3_CLKB_posedge  or
                 Tviol_ADDRB2_CLKB_posedge  or Tviol_ADDRB1_CLKB_posedge  or
                 Tviol_ADDRB0_CLKB_posedge  or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S1_S2_V;

configuration CFG_X_RAMB4_S1_S2_V of X_RAMB4_S1_S2 is
   for X_RAMB4_S1_S2_V
   end for;
end CFG_X_RAMB4_S1_S2_V;


----- CELL X_RAMB4_S1_S4 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S1_S4 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S1_S4 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (9 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (3 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (0 downto 0);
        DIB    : in STD_LOGIC_VECTOR (3 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (11 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (9 downto 0);
        DOA    : out STD_LOGIC_VECTOR (0 downto 0);
        DOB    : out STD_LOGIC_VECTOR (3 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S1_S4 : entity is TRUE;

end X_RAMB4_S1_S4;

-----------------------------------------------------------------------------

architecture X_RAMB4_S1_S4_V of X_RAMB4_S1_S4 is

  attribute VITAL_LEVEL0 of X_RAMB4_S1_S4_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(9 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(3 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRA_ipd(11), ADDRA(11), tipd_ADDRA(11));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (ADDRB_ipd(9),  ADDRB(9),  tipd_ADDRB(9));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),    DIB(2),    tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),    DIB(3),    tipd_DIB(3));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S1_S4 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA11_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge  : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA11_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 1;
    constant DIAW_1 : integer := 0;
    constant DIBW   : integer := 4;
    constant DIBW_1 : integer := 3;
    variable DOA_zd : std_logic_vector(0 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(3 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA11_CLKA_posedge,
          TimingData              => Tmkr_ADDRA11_CLKA_posedge,
          TestSignal              => ADDRA_ipd(11),
          TestSignalName          => "ADDRA(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(11),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(11),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(11),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(11),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB9_CLKB_posedge,
          TimingData              => Tmkr_ADDRB9_CLKB_posedge,
          TestSignal              => ADDRB_ipd(9),
          TestSignalName          => "ADDRB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(9),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA0_CLKA_posedge    or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge     or
                 Tviol_RSTA_CLKA_posedge    or 
 
                 Tviol_ADDRA11_CLKA_posedge or Tviol_ADDRA10_CLKA_posedge or
                 Tviol_ADDRA9_CLKA_posedge  or Tviol_ADDRA8_CLKA_posedge  or
                 Tviol_ADDRA7_CLKA_posedge  or Tviol_ADDRA6_CLKA_posedge  or
                 Tviol_ADDRA5_CLKA_posedge  or Tviol_ADDRA4_CLKA_posedge  or
                 Tviol_ADDRA3_CLKA_posedge  or Tviol_ADDRA2_CLKA_posedge  or
                 Tviol_ADDRA1_CLKA_posedge  or Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB3_CLKB_posedge    or Tviol_DIB2_CLKB_posedge    or
                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge    or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge     or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB9_CLKB_posedge  or Tviol_ADDRB8_CLKB_posedge  or
                 Tviol_ADDRB7_CLKB_posedge  or Tviol_ADDRB6_CLKB_posedge  or
                 Tviol_ADDRB5_CLKB_posedge  or Tviol_ADDRB4_CLKB_posedge  or
                 Tviol_ADDRB3_CLKB_posedge  or Tviol_ADDRB2_CLKB_posedge  or
                 Tviol_ADDRB1_CLKB_posedge  or Tviol_ADDRB0_CLKB_posedge  or

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(3) := Violation XOR DOB_zd(3);
    DOB_zd(2) := Violation XOR DOB_zd(2);
    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S1_S4_V;

configuration CFG_X_RAMB4_S1_S4_V of X_RAMB4_S1_S4 is
   for X_RAMB4_S1_S4_V
   end for;
end CFG_X_RAMB4_S1_S4_V;


----- CELL X_RAMB4_S1_S8 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S1_S8 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S1_S8 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (8 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (0 downto 0);
        DIB    : in STD_LOGIC_VECTOR (7 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (11 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (8 downto 0);
        DOA    : out STD_LOGIC_VECTOR (0 downto 0);
        DOB    : out STD_LOGIC_VECTOR (7 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S1_S8 : entity is TRUE;

end X_RAMB4_S1_S8;

-----------------------------------------------------------------------------

architecture X_RAMB4_S1_S8_V of X_RAMB4_S1_S8 is

  attribute VITAL_LEVEL0 of X_RAMB4_S1_S8_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(8 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(7 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRA_ipd(11), ADDRA(11), tipd_ADDRA(11));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),    DIB(2),    tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),    DIB(3),    tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),    DIB(4),    tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),    DIB(5),    tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),    DIB(6),    tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),    DIB(7),    tipd_DIB(7));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S1_S8 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA11_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA11_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 1;
    constant DIAW_1 : integer := 0;
    constant DIBW   : integer := 8;
    constant DIBW_1 : integer := 7;
    variable DOA_zd : std_logic_vector(0 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(7 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA11_CLKA_posedge,
          TimingData              => Tmkr_ADDRA11_CLKA_posedge,
          TestSignal              => ADDRA_ipd(11),
          TestSignalName          => "ADDRA(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(11),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(11),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(11),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(11),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA0_CLKA_posedge    or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge     or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA11_CLKA_posedge or Tviol_ADDRA10_CLKA_posedge or
                 Tviol_ADDRA9_CLKA_posedge  or Tviol_ADDRA8_CLKA_posedge  or
                 Tviol_ADDRA7_CLKA_posedge  or Tviol_ADDRA6_CLKA_posedge  or
                 Tviol_ADDRA5_CLKA_posedge  or Tviol_ADDRA4_CLKA_posedge  or
                 Tviol_ADDRA3_CLKA_posedge  or Tviol_ADDRA2_CLKA_posedge  or
                 Tviol_ADDRA1_CLKA_posedge  or Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB7_CLKB_posedge    or Tviol_DIB6_CLKB_posedge    or
                 Tviol_DIB5_CLKB_posedge    or Tviol_DIB4_CLKB_posedge    or
                 Tviol_DIB3_CLKB_posedge    or Tviol_DIB2_CLKB_posedge    or
                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge    or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge     or
                 Tviol_RSTB_CLKB_posedge    or  

                 Tviol_ADDRB8_CLKB_posedge  or Tviol_ADDRB7_CLKB_posedge  or
                 Tviol_ADDRB6_CLKB_posedge  or Tviol_ADDRB5_CLKB_posedge  or
                 Tviol_ADDRB4_CLKB_posedge  or Tviol_ADDRB3_CLKB_posedge  or
                 Tviol_ADDRB2_CLKB_posedge  or Tviol_ADDRB1_CLKB_posedge  or 
                 Tviol_ADDRB0_CLKB_posedge  or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(7) := Violation XOR DOB_zd(7);
    DOB_zd(6) := Violation XOR DOB_zd(6);
    DOB_zd(5) := Violation XOR DOB_zd(5);
    DOB_zd(4) := Violation XOR DOB_zd(4);
    DOB_zd(3) := Violation XOR DOB_zd(3);
    DOB_zd(2) := Violation XOR DOB_zd(2);
    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S1_S8_V;

configuration CFG_X_RAMB4_S1_S8_V of X_RAMB4_S1_S8 is
   for X_RAMB4_S1_S8_V
   end for;
end CFG_X_RAMB4_S1_S8_V;


----- CELL X_RAMB4_S1_S16 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S1_S16 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S1_S16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (11 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (0 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (0 downto 0)  := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (0 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (0 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (11 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (0 downto 0);
        DIB    : in STD_LOGIC_VECTOR (15 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (11 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (7 downto 0);
        DOA    : out STD_LOGIC_VECTOR (0 downto 0);
        DOB    : out STD_LOGIC_VECTOR (15 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S1_S16 : entity is TRUE;

end X_RAMB4_S1_S16;

-----------------------------------------------------------------------------

architecture X_RAMB4_S1_S16_V of X_RAMB4_S1_S16 is

  attribute VITAL_LEVEL0 of X_RAMB4_S1_S16_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(11 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(0 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(15 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRA_ipd(11), ADDRA(11), tipd_ADDRA(11));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),    DIB(2),    tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),    DIB(3),    tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),    DIB(4),    tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),    DIB(5),    tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),    DIB(6),    tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),    DIB(7),    tipd_DIB(7));
    VitalWireDelay (DIB_ipd(8),    DIB(8),    tipd_DIB(8));
    VitalWireDelay (DIB_ipd(9),    DIB(9),    tipd_DIB(9));
    VitalWireDelay (DIB_ipd(10),   DIB(10),   tipd_DIB(10));
    VitalWireDelay (DIB_ipd(11),   DIB(11),   tipd_DIB(11));
    VitalWireDelay (DIB_ipd(12),   DIB(12),   tipd_DIB(12));
    VitalWireDelay (DIB_ipd(13),   DIB(13),   tipd_DIB(13));
    VitalWireDelay (DIB_ipd(14),   DIB(14),   tipd_DIB(14));
    VitalWireDelay (DIB_ipd(15),   DIB(15),   tipd_DIB(15));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S1_S16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB8_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB9_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB10_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB11_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB12_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB13_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB14_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB15_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA11_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
 
    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB8_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB9_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB10_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB11_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB12_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB13_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB14_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB15_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA11_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 1;
    constant DIAW_1 : integer := 0;
    constant DIBW   : integer := 16;
    constant DIBW_1 : integer := 15;
    variable DOA_zd : std_logic_vector(0 downto 0)  := (others => 'X');
    variable DOB_zd : std_logic_vector(15 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData8  : VitalGlitchDataType;
    variable DOB_GlitchData9  : VitalGlitchDataType;
    variable DOB_GlitchData10 : VitalGlitchDataType;
    variable DOB_GlitchData11 : VitalGlitchDataType;
    variable DOB_GlitchData12 : VitalGlitchDataType;
    variable DOB_GlitchData13 : VitalGlitchDataType;
    variable DOB_GlitchData14 : VitalGlitchDataType;
    variable DOB_GlitchData15 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB15_CLKB_posedge,
          TimingData              => Tmkr_DIB15_CLKB_posedge,
          TestSignal              => DIB_ipd(15),
          TestSignalName          => "DIB(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(15),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(15),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(15),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(15),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB14_CLKB_posedge,
          TimingData              => Tmkr_DIB14_CLKB_posedge,
          TestSignal              => DIB_ipd(14),
          TestSignalName          => "DIB(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(14),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(14),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(14),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(14),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB13_CLKB_posedge,
          TimingData              => Tmkr_DIB13_CLKB_posedge,
          TestSignal              => DIB_ipd(13),
          TestSignalName          => "DIB(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(13),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(13),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(13),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(13),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB12_CLKB_posedge,
          TimingData              => Tmkr_DIB12_CLKB_posedge,
          TestSignal              => DIB_ipd(12),
          TestSignalName          => "DIB(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(12),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(12),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(12),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(12),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB11_CLKB_posedge,
          TimingData              => Tmkr_DIB11_CLKB_posedge,
          TestSignal              => DIB_ipd(11),
          TestSignalName          => "DIB(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(11),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(11),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(11),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(11),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB10_CLKB_posedge,
          TimingData              => Tmkr_DIB10_CLKB_posedge,
          TestSignal              => DIB_ipd(10),
          TestSignalName          => "DIB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(10),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(10),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB9_CLKB_posedge,
          TimingData              => Tmkr_DIB9_CLKB_posedge,
          TestSignal              => DIB_ipd(9),
          TestSignalName          => "DIB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(9),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(9),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB8_CLKB_posedge,
          TimingData              => Tmkr_DIB8_CLKB_posedge,
          TestSignal              => DIB_ipd(8),
          TestSignalName          => "DIB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(8),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(8),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA11_CLKA_posedge,
          TimingData              => Tmkr_ADDRA11_CLKA_posedge,
          TestSignal              => ADDRA_ipd(11),
          TestSignalName          => "ADDRA(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(11),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(11),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(11),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(11),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S1_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA0_CLKA_posedge    or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge     or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA11_CLKA_posedge or Tviol_ADDRA10_CLKA_posedge or
                 Tviol_ADDRA9_CLKA_posedge  or Tviol_ADDRA8_CLKA_posedge  or
                 Tviol_ADDRA7_CLKA_posedge  or Tviol_ADDRA6_CLKA_posedge  or
                 Tviol_ADDRA5_CLKA_posedge  or Tviol_ADDRA4_CLKA_posedge  or
                 Tviol_ADDRA3_CLKA_posedge  or Tviol_ADDRA2_CLKA_posedge  or
                 Tviol_ADDRA1_CLKA_posedge  or Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB15_CLKB_posedge   or Tviol_DIB14_CLKB_posedge   or 
                 Tviol_DIB13_CLKB_posedge   or Tviol_DIB12_CLKB_posedge   or
                 Tviol_DIB11_CLKB_posedge   or Tviol_DIB10_CLKB_posedge   or
                 Tviol_DIB9_CLKB_posedge    or Tviol_DIB8_CLKB_posedge    or
                 Tviol_DIB7_CLKB_posedge    or Tviol_DIB6_CLKB_posedge    or
                 Tviol_DIB5_CLKB_posedge    or Tviol_DIB4_CLKB_posedge    or
                 Tviol_DIB3_CLKB_posedge    or Tviol_DIB2_CLKB_posedge    or
                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge    or
 
                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge     or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB7_CLKB_posedge  or Tviol_ADDRB6_CLKB_posedge  or
                 Tviol_ADDRB5_CLKB_posedge  or Tviol_ADDRB4_CLKB_posedge  or
                 Tviol_ADDRB3_CLKB_posedge  or Tviol_ADDRB2_CLKB_posedge  or
                 Tviol_ADDRB1_CLKB_posedge  or Tviol_ADDRB0_CLKB_posedge  or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(0)  := Violation XOR DOA_zd(0);

    DOB_zd(15) := Violation XOR DOB_zd(15);
    DOB_zd(14) := Violation XOR DOB_zd(14);
    DOB_zd(13) := Violation XOR DOB_zd(13);
    DOB_zd(12) := Violation XOR DOB_zd(12);
    DOB_zd(11) := Violation XOR DOB_zd(11);
    DOB_zd(10) := Violation XOR DOB_zd(10);
    DOB_zd(9)  := Violation XOR DOB_zd(9);
    DOB_zd(8)  := Violation XOR DOB_zd(8);
    DOB_zd(7)  := Violation XOR DOB_zd(7);
    DOB_zd(6)  := Violation XOR DOB_zd(6);
    DOB_zd(5)  := Violation XOR DOB_zd(5);
    DOB_zd(4)  := Violation XOR DOB_zd(4);
    DOB_zd(3)  := Violation XOR DOB_zd(3);
    DOB_zd(2)  := Violation XOR DOB_zd(2);
    DOB_zd(1)  := Violation XOR DOB_zd(1);
    DOB_zd(0)  := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(15),
      GlitchData => DOB_GlitchData15,
      OutSignalName => "DOB(15)",
      OutTemp => DOB_zd(15),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(15),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(15),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(14),
      GlitchData => DOB_GlitchData14,
      OutSignalName => "DOB(14)",
      OutTemp => DOB_zd(14),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(14),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(14),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(13),
      GlitchData => DOB_GlitchData13,
      OutSignalName => "DOB(13)",
      OutTemp => DOB_zd(13),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(13),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(13),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(12),
      GlitchData => DOB_GlitchData12,
      OutSignalName => "DOB(12)",
      OutTemp => DOB_zd(12),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(12),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(12),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(11),
      GlitchData => DOB_GlitchData11,
      OutSignalName => "DOB(11)",
      OutTemp => DOB_zd(11),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(11),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(11),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(10),
      GlitchData => DOB_GlitchData10,
      OutSignalName => "DOB(10)",
      OutTemp => DOB_zd(10),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(10),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(10),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(9),
      GlitchData => DOB_GlitchData9,
      OutSignalName => "DOB(9)",
      OutTemp => DOB_zd(9),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(9),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(9),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(8),
      GlitchData => DOB_GlitchData8,
      OutSignalName => "DOB(8)",
      OutTemp => DOB_zd(8),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(8),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(8),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S1_S16_V;

configuration CFG_X_RAMB4_S1_S16_V of X_RAMB4_S1_S16 is
   for X_RAMB4_S1_S16_V
   end for;
end CFG_X_RAMB4_S1_S16_V;


----- CELL X_RAMB4_S2_S2 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S2_S2 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S2_S2 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (1 downto 0);
        DIB    : in STD_LOGIC_VECTOR (1 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (10 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (10 downto 0);
        DOA    : out STD_LOGIC_VECTOR (1 downto 0);
        DOB    : out STD_LOGIC_VECTOR (1 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S2_S2 : entity is TRUE;

end X_RAMB4_S2_S2;

-----------------------------------------------------------------------------

architecture X_RAMB4_S2_S2_V of X_RAMB4_S2_S2 is

  attribute VITAL_LEVEL0 of X_RAMB4_S2_S2_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal DIA_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (ADDRB_ipd(9),  ADDRB(9),  tipd_ADDRB(9));
    VitalWireDelay (ADDRB_ipd(10), ADDRB(10), tipd_ADDRB(10));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),    DIA(1),    tipd_DIA(1));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S2_S2 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB10_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB10_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 2;
    constant DIAW_1 : integer := 1;
    constant DIBW   : integer := 2;
    constant DIBW_1 : integer := 1;
    variable DOA_zd : std_logic_vector(1 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(1 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB10_CLKB_posedge,
          TimingData              => Tmkr_ADDRB10_CLKB_posedge,
          TestSignal              => ADDRB_ipd(10),
          TestSignalName          => "ADDRB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(10),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB9_CLKB_posedge,
          TimingData              => Tmkr_ADDRB9_CLKB_posedge,
          TestSignal              => ADDRB_ipd(9),
          TestSignalName          => "ADDRB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(9),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S2",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA1_CLKA_posedge    or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA10_CLKA_posedge or Tviol_ADDRA9_CLKA_posedge or
                 Tviol_ADDRA8_CLKA_posedge  or Tviol_ADDRA7_CLKA_posedge or
                 Tviol_ADDRA6_CLKA_posedge  or Tviol_ADDRA5_CLKA_posedge or
                 Tviol_ADDRA4_CLKA_posedge  or Tviol_ADDRA3_CLKA_posedge or 
                 Tviol_ADDRA2_CLKA_posedge  or Tviol_ADDRA1_CLKA_posedge or 
                 Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB10_CLKB_posedge or Tviol_ADDRB9_CLKB_posedge or 
                 Tviol_ADDRB8_CLKB_posedge  or Tviol_ADDRB7_CLKB_posedge or
                 Tviol_ADDRB6_CLKB_posedge  or Tviol_ADDRB5_CLKB_posedge or
                 Tviol_ADDRB4_CLKB_posedge  or Tviol_ADDRB3_CLKB_posedge or
                 Tviol_ADDRB2_CLKB_posedge  or Tviol_ADDRB1_CLKB_posedge or
                 Tviol_ADDRB0_CLKB_posedge  or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(1) := Violation XOR DOA_zd(1);
    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S2_S2_V;

configuration CFG_X_RAMB4_S2_S2_V of X_RAMB4_S2_S2 is
   for X_RAMB4_S2_S2_V
   end for;
end CFG_X_RAMB4_S2_S2_V;


----- CELL X_RAMB4_S2_S4 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S2_S4 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S2_S4 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (9 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (3 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (1 downto 0);
        DIB    : in STD_LOGIC_VECTOR (3 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (10 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (9 downto 0);
        DOA    : out STD_LOGIC_VECTOR (1 downto 0);
        DOB    : out STD_LOGIC_VECTOR (3 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S2_S4 : entity is TRUE;

end X_RAMB4_S2_S4;

-----------------------------------------------------------------------------

architecture X_RAMB4_S2_S4_V of X_RAMB4_S2_S4 is

  attribute VITAL_LEVEL0 of X_RAMB4_S2_S4_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(9 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(3 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (ADDRB_ipd(9),  ADDRB(9),  tipd_ADDRB(9));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),    DIA(1),    tipd_DIA(1));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),    DIB(2),    tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),    DIB(3),    tipd_DIB(3));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S2_S4 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge  : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 2;
    constant DIAW_1 : integer := 1;
    constant DIBW   : integer := 4;
    constant DIBW_1 : integer := 3;
    variable DOA_zd : std_logic_vector(1 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(3 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB9_CLKB_posedge,
          TimingData              => Tmkr_ADDRB9_CLKB_posedge,
          TestSignal              => ADDRB_ipd(9),
          TestSignalName          => "ADDRB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(9),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA1_CLKA_posedge    or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge    or 
 
                 Tviol_ADDRA10_CLKA_posedge or Tviol_ADDRA9_CLKA_posedge or
                 Tviol_ADDRA8_CLKA_posedge  or Tviol_ADDRA7_CLKA_posedge or
                 Tviol_ADDRA6_CLKA_posedge  or Tviol_ADDRA5_CLKA_posedge or
                 Tviol_ADDRA4_CLKA_posedge  or Tviol_ADDRA3_CLKA_posedge or 
                 Tviol_ADDRA2_CLKA_posedge  or Tviol_ADDRA1_CLKA_posedge or 
                 Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB3_CLKB_posedge    or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB9_CLKB_posedge  or Tviol_ADDRB8_CLKB_posedge or
                 Tviol_ADDRB7_CLKB_posedge  or Tviol_ADDRB6_CLKB_posedge or
                 Tviol_ADDRB5_CLKB_posedge  or Tviol_ADDRB4_CLKB_posedge or
                 Tviol_ADDRB3_CLKB_posedge  or Tviol_ADDRB2_CLKB_posedge or
                 Tviol_ADDRB1_CLKB_posedge  or Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(1) := Violation XOR DOA_zd(1);
    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(3) := Violation XOR DOB_zd(3);
    DOB_zd(2) := Violation XOR DOB_zd(2);
    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S2_S4_V;

configuration CFG_X_RAMB4_S2_S4_V of X_RAMB4_S2_S4 is
   for X_RAMB4_S2_S4_V
   end for;
end CFG_X_RAMB4_S2_S4_V;


----- CELL X_RAMB4_S2_S8 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S2_S8 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S2_S8 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (8 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (1 downto 0);
        DIB    : in STD_LOGIC_VECTOR (7 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (10 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (8 downto 0);
        DOA    : out STD_LOGIC_VECTOR (1 downto 0);
        DOB    : out STD_LOGIC_VECTOR (7 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S2_S8 : entity is TRUE;

end X_RAMB4_S2_S8;

-----------------------------------------------------------------------------

architecture X_RAMB4_S2_S8_V of X_RAMB4_S2_S8 is

  attribute VITAL_LEVEL0 of X_RAMB4_S2_S8_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(8 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(7 downto 0)  := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8),  ADDRB(8),  tipd_ADDRB(8));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),    DIA(1),    tipd_DIA(1));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),    DIB(2),    tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),    DIB(3),    tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),    DIB(4),    tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),    DIB(5),    tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),    DIB(6),    tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),    DIB(7),    tipd_DIB(7));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S2_S8 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge  : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 2;
    constant DIAW_1 : integer := 1;
    constant DIBW   : integer := 8;
    constant DIBW_1 : integer := 7;
    variable DOA_zd : std_logic_vector(1 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(7 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA1_CLKA_posedge    or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA10_CLKA_posedge or Tviol_ADDRA9_CLKA_posedge or
                 Tviol_ADDRA8_CLKA_posedge  or Tviol_ADDRA7_CLKA_posedge or
                 Tviol_ADDRA6_CLKA_posedge  or Tviol_ADDRA5_CLKA_posedge or
                 Tviol_ADDRA4_CLKA_posedge  or Tviol_ADDRA3_CLKA_posedge or 
                 Tviol_ADDRA2_CLKA_posedge  or Tviol_ADDRA1_CLKA_posedge or 
                 Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB7_CLKB_posedge    or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge    or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge    or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB8_CLKB_posedge  or Tviol_ADDRB7_CLKB_posedge or
                 Tviol_ADDRB6_CLKB_posedge  or Tviol_ADDRB5_CLKB_posedge or
                 Tviol_ADDRB4_CLKB_posedge  or Tviol_ADDRB3_CLKB_posedge or
                 Tviol_ADDRB2_CLKB_posedge  or Tviol_ADDRB1_CLKB_posedge or 
                 Tviol_ADDRB0_CLKB_posedge  or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(1) := Violation XOR DOA_zd(1);
    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(7) := Violation XOR DOB_zd(7);
    DOB_zd(6) := Violation XOR DOB_zd(6);
    DOB_zd(5) := Violation XOR DOB_zd(5);
    DOB_zd(4) := Violation XOR DOB_zd(4);
    DOB_zd(3) := Violation XOR DOB_zd(3);
    DOB_zd(2) := Violation XOR DOB_zd(2);
    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S2_S8_V;

configuration CFG_X_RAMB4_S2_S8_V of X_RAMB4_S2_S8 is
   for X_RAMB4_S2_S8_V
   end for;
end CFG_X_RAMB4_S2_S8_V;


----- CELL X_RAMB4_S2_S16 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S2_S16 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S2_S16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (10 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (1 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (1 downto 0)  := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (1 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (1 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (10 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (1 downto 0);
        DIB    : in STD_LOGIC_VECTOR (15 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (10 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (7 downto 0);
        DOA    : out STD_LOGIC_VECTOR (1 downto 0);
        DOB    : out STD_LOGIC_VECTOR (15 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S2_S16 : entity is TRUE;

end X_RAMB4_S2_S16;

-----------------------------------------------------------------------------

architecture X_RAMB4_S2_S16_V of X_RAMB4_S2_S16 is

  attribute VITAL_LEVEL0 of X_RAMB4_S2_S16_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(10 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(1 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(15 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0),  ADDRA(0),  tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1),  ADDRA(1),  tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2),  ADDRA(2),  tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3),  ADDRA(3),  tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4),  ADDRA(4),  tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5),  ADDRA(5),  tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6),  ADDRA(6),  tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7),  ADDRA(7),  tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8),  ADDRA(8),  tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9),  ADDRA(9),  tipd_ADDRA(9));
    VitalWireDelay (ADDRA_ipd(10), ADDRA(10), tipd_ADDRA(10));
    VitalWireDelay (ADDRB_ipd(0),  ADDRB(0),  tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1),  ADDRB(1),  tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2),  ADDRB(2),  tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3),  ADDRB(3),  tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4),  ADDRB(4),  tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5),  ADDRB(5),  tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6),  ADDRB(6),  tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7),  ADDRB(7),  tipd_ADDRB(7));
    VitalWireDelay (DIA_ipd(0),    DIA(0),    tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),    DIA(1),    tipd_DIA(1));
    VitalWireDelay (DIB_ipd(0),    DIB(0),    tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),    DIB(1),    tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),    DIB(2),    tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),    DIB(3),    tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),    DIB(4),    tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),    DIB(5),    tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),    DIB(6),    tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),    DIB(7),    tipd_DIB(7));
    VitalWireDelay (DIB_ipd(8),    DIB(8),    tipd_DIB(8));
    VitalWireDelay (DIB_ipd(9),    DIB(9),    tipd_DIB(9));
    VitalWireDelay (DIB_ipd(10),   DIB(10),   tipd_DIB(10));
    VitalWireDelay (DIB_ipd(11),   DIB(11),   tipd_DIB(11));
    VitalWireDelay (DIB_ipd(12),   DIB(12),   tipd_DIB(12));
    VitalWireDelay (DIB_ipd(13),   DIB(13),   tipd_DIB(13));
    VitalWireDelay (DIB_ipd(14),   DIB(14),   tipd_DIB(14));
    VitalWireDelay (DIB_ipd(15),   DIB(15),   tipd_DIB(15));
    VitalWireDelay (ENA_ipd,       ENA,       tipd_ENA);
    VitalWireDelay (ENB_ipd,       ENB,       tipd_ENB);
    VitalWireDelay (WEA_ipd,       WEA,       tipd_WEA);
    VitalWireDelay (WEB_ipd,       WEB,       tipd_WEB);
    VitalWireDelay (RSTA_ipd,      RSTA,      tipd_RSTA);
    VitalWireDelay (RSTB_ipd,      RSTB,      tipd_RSTB);
    VitalWireDelay (GSR_ipd,       GSR,       tipd_GSR);
    VitalWireDelay (CLKA_ipd,      CLKA,      tipd_CLKA);
    VitalWireDelay (CLKB_ipd,      CLKB,      tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S2_S16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB8_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB9_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_DIB10_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB11_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB12_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB13_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB14_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB15_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge     : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge     : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_ADDRA10_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge  : std_ulogic := '0';
 
    variable Tmkr_DIA0_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB8_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB9_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB10_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB11_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB12_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB13_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB14_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB15_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge      : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA10_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 2;
    constant DIAW_1 : integer := 1;
    constant DIBW   : integer := 16;
    constant DIBW_1 : integer := 15;
    variable DOA_zd : std_logic_vector(1 downto 0)  := (others => 'X');
    variable DOB_zd : std_logic_vector(15 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData8  : VitalGlitchDataType;
    variable DOB_GlitchData9  : VitalGlitchDataType;
    variable DOB_GlitchData10 : VitalGlitchDataType;
    variable DOB_GlitchData11 : VitalGlitchDataType;
    variable DOB_GlitchData12 : VitalGlitchDataType;
    variable DOB_GlitchData13 : VitalGlitchDataType;
    variable DOB_GlitchData14 : VitalGlitchDataType;
    variable DOB_GlitchData15 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB15_CLKB_posedge,
          TimingData              => Tmkr_DIB15_CLKB_posedge,
          TestSignal              => DIB_ipd(15),
          TestSignalName          => "DIB(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(15),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(15),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(15),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(15),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB14_CLKB_posedge,
          TimingData              => Tmkr_DIB14_CLKB_posedge,
          TestSignal              => DIB_ipd(14),
          TestSignalName          => "DIB(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(14),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(14),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(14),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(14),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB13_CLKB_posedge,
          TimingData              => Tmkr_DIB13_CLKB_posedge,
          TestSignal              => DIB_ipd(13),
          TestSignalName          => "DIB(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(13),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(13),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(13),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(13),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB12_CLKB_posedge,
          TimingData              => Tmkr_DIB12_CLKB_posedge,
          TestSignal              => DIB_ipd(12),
          TestSignalName          => "DIB(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(12),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(12),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(12),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(12),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB11_CLKB_posedge,
          TimingData              => Tmkr_DIB11_CLKB_posedge,
          TestSignal              => DIB_ipd(11),
          TestSignalName          => "DIB(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(11),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(11),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(11),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(11),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB10_CLKB_posedge,
          TimingData              => Tmkr_DIB10_CLKB_posedge,
          TestSignal              => DIB_ipd(10),
          TestSignalName          => "DIB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(10),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(10),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB9_CLKB_posedge,
          TimingData              => Tmkr_DIB9_CLKB_posedge,
          TestSignal              => DIB_ipd(9),
          TestSignalName          => "DIB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(9),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(9),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB8_CLKB_posedge,
          TimingData              => Tmkr_DIB8_CLKB_posedge,
          TestSignal              => DIB_ipd(8),
          TestSignalName          => "DIB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(8),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(8),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA10_CLKA_posedge,
          TimingData              => Tmkr_ADDRA10_CLKA_posedge,
          TestSignal              => ADDRA_ipd(10),
          TestSignalName          => "ADDRA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(10),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(10),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S2_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA1_CLKA_posedge    or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge     or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge    or 

                 Tviol_ADDRA10_CLKA_posedge or Tviol_ADDRA9_CLKA_posedge or
                 Tviol_ADDRA8_CLKA_posedge  or Tviol_ADDRA7_CLKA_posedge or
                 Tviol_ADDRA6_CLKA_posedge  or Tviol_ADDRA5_CLKA_posedge or
                 Tviol_ADDRA4_CLKA_posedge  or Tviol_ADDRA3_CLKA_posedge or
                 Tviol_ADDRA2_CLKA_posedge  or Tviol_ADDRA1_CLKA_posedge or
                 Tviol_ADDRA0_CLKA_posedge  or 

                 Pviol_CLKA                 or

                 Tviol_DIB15_CLKB_posedge   or Tviol_DIB14_CLKB_posedge  or 
                 Tviol_DIB13_CLKB_posedge   or Tviol_DIB12_CLKB_posedge  or
                 Tviol_DIB11_CLKB_posedge   or Tviol_DIB10_CLKB_posedge  or
                 Tviol_DIB9_CLKB_posedge    or Tviol_DIB8_CLKB_posedge   or
                 Tviol_DIB7_CLKB_posedge    or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge    or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge    or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge    or Tviol_DIB0_CLKB_posedge   or
 
                 Tviol_ENB_CLKB_posedge     or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge    or 

                 Tviol_ADDRB7_CLKB_posedge  or Tviol_ADDRB6_CLKB_posedge or
                 Tviol_ADDRB5_CLKB_posedge  or Tviol_ADDRB4_CLKB_posedge or
                 Tviol_ADDRB3_CLKB_posedge  or Tviol_ADDRB2_CLKB_posedge or
                 Tviol_ADDRB1_CLKB_posedge  or Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(1)  := Violation XOR DOA_zd(1);
    DOA_zd(0)  := Violation XOR DOA_zd(0);

    DOB_zd(15) := Violation XOR DOB_zd(15);
    DOB_zd(14) := Violation XOR DOB_zd(14);
    DOB_zd(13) := Violation XOR DOB_zd(13);
    DOB_zd(12) := Violation XOR DOB_zd(12);
    DOB_zd(11) := Violation XOR DOB_zd(11);
    DOB_zd(10) := Violation XOR DOB_zd(10);
    DOB_zd(9)  := Violation XOR DOB_zd(9);
    DOB_zd(8)  := Violation XOR DOB_zd(8);
    DOB_zd(7)  := Violation XOR DOB_zd(7);
    DOB_zd(6)  := Violation XOR DOB_zd(6);
    DOB_zd(5)  := Violation XOR DOB_zd(5);
    DOB_zd(4)  := Violation XOR DOB_zd(4);
    DOB_zd(3)  := Violation XOR DOB_zd(3);
    DOB_zd(2)  := Violation XOR DOB_zd(2);
    DOB_zd(1)  := Violation XOR DOB_zd(1);
    DOB_zd(0)  := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(15),
      GlitchData => DOB_GlitchData15,
      OutSignalName => "DOB(15)",
      OutTemp => DOB_zd(15),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(15),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(15),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(14),
      GlitchData => DOB_GlitchData14,
      OutSignalName => "DOB(14)",
      OutTemp => DOB_zd(14),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(14),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(14),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(13),
      GlitchData => DOB_GlitchData13,
      OutSignalName => "DOB(13)",
      OutTemp => DOB_zd(13),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(13),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(13),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(12),
      GlitchData => DOB_GlitchData12,
      OutSignalName => "DOB(12)",
      OutTemp => DOB_zd(12),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(12),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(12),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(11),
      GlitchData => DOB_GlitchData11,
      OutSignalName => "DOB(11)",
      OutTemp => DOB_zd(11),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(11),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(11),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(10),
      GlitchData => DOB_GlitchData10,
      OutSignalName => "DOB(10)",
      OutTemp => DOB_zd(10),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(10),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(10),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(9),
      GlitchData => DOB_GlitchData9,
      OutSignalName => "DOB(9)",
      OutTemp => DOB_zd(9),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(9),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(9),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(8),
      GlitchData => DOB_GlitchData8,
      OutSignalName => "DOB(8)",
      OutTemp => DOB_zd(8),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(8),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(8),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S2_S16_V;

configuration CFG_X_RAMB4_S2_S16_V of X_RAMB4_S2_S16 is
   for X_RAMB4_S2_S16_V
   end for;
end CFG_X_RAMB4_S2_S16_V;


----- CELL X_RAMB4_S4_S4 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S4_S4 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S4_S4 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (9 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (9 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (3 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (3 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (3 downto 0);
        DIB    : in STD_LOGIC_VECTOR (3 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (9 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (9 downto 0);
        DOA    : out STD_LOGIC_VECTOR (3 downto 0);
        DOB    : out STD_LOGIC_VECTOR (3 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S4_S4 : entity is TRUE;

end X_RAMB4_S4_S4;

-----------------------------------------------------------------------------

architecture X_RAMB4_S4_S4_V of X_RAMB4_S4_S4 is

  attribute VITAL_LEVEL0 of X_RAMB4_S4_S4_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(9 downto 0) := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(9 downto 0) := (others => 'X');
  signal DIA_ipd   : std_logic_vector(3 downto 0) := (others => 'X');
  signal DIB_ipd   : std_logic_vector(3 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0), ADDRA(0), tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1), ADDRA(1), tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2), ADDRA(2), tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3), ADDRA(3), tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4), ADDRA(4), tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5), ADDRA(5), tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6), ADDRA(6), tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7), ADDRA(7), tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8), ADDRA(8), tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9), ADDRA(9), tipd_ADDRA(9));
    VitalWireDelay (ADDRB_ipd(0), ADDRB(0), tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1), ADDRB(1), tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2), ADDRB(2), tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3), ADDRB(3), tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4), ADDRB(4), tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5), ADDRB(5), tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6), ADDRB(6), tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7), ADDRB(7), tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8), ADDRB(8), tipd_ADDRB(8));
    VitalWireDelay (ADDRB_ipd(9), ADDRB(9), tipd_ADDRB(9));
    VitalWireDelay (DIA_ipd(0),   DIA(0),   tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),   DIA(1),   tipd_DIA(1));
    VitalWireDelay (DIA_ipd(2),   DIA(2),   tipd_DIA(2));
    VitalWireDelay (DIA_ipd(3),   DIA(3),   tipd_DIA(3));
    VitalWireDelay (DIB_ipd(0),   DIB(0),   tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),   DIB(1),   tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),   DIB(2),   tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),   DIB(3),   tipd_DIB(3));
    VitalWireDelay (ENA_ipd,      ENA,      tipd_ENA);
    VitalWireDelay (ENB_ipd,      ENB,      tipd_ENB);
    VitalWireDelay (WEA_ipd,      WEA,      tipd_WEA);
    VitalWireDelay (WEB_ipd,      WEB,      tipd_WEB);
    VitalWireDelay (RSTA_ipd,     RSTA,     tipd_RSTA);
    VitalWireDelay (RSTB_ipd,     RSTB,     tipd_RSTB);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLKA_ipd,     CLKA,     tipd_CLKA);
    VitalWireDelay (CLKB_ipd,     CLKB,     tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S4_S4 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB9_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB9_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 4;
    constant DIAW_1 : integer := 3;
    constant DIBW   : integer := 4;
    constant DIBW_1 : integer := 3;
    variable DOA_zd : std_logic_vector(3 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(3 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA3_CLKA_posedge,
          TimingData              => Tmkr_DIA3_CLKA_posedge,
          TestSignal              => DIA_ipd(3),
          TestSignalName          => "DIA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(3),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA2_CLKA_posedge,
          TimingData              => Tmkr_DIA2_CLKA_posedge,
          TestSignal              => DIA_ipd(2),
          TestSignalName          => "DIA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(2),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB9_CLKB_posedge,
          TimingData              => Tmkr_ADDRB9_CLKB_posedge,
          TestSignal              => ADDRB_ipd(9),
          TestSignalName          => "ADDRB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(9),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S4",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA3_CLKA_posedge   or Tviol_DIA2_CLKA_posedge   or
                 Tviol_DIA1_CLKA_posedge   or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge    or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge   or 

                 Tviol_ADDRA9_CLKA_posedge or Tviol_ADDRA8_CLKA_posedge or
                 Tviol_ADDRA7_CLKA_posedge or Tviol_ADDRA6_CLKA_posedge or
                 Tviol_ADDRA5_CLKA_posedge or Tviol_ADDRA4_CLKA_posedge or 
                 Tviol_ADDRA3_CLKA_posedge or Tviol_ADDRA2_CLKA_posedge or 
                 Tviol_ADDRA1_CLKA_posedge or Tviol_ADDRA0_CLKA_posedge or 

                 Pviol_CLKA                or

                 Tviol_DIB3_CLKB_posedge   or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge   or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge    or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge   or 

                 Tviol_ADDRB9_CLKB_posedge or Tviol_ADDRB8_CLKB_posedge or
                 Tviol_ADDRB7_CLKB_posedge or Tviol_ADDRB6_CLKB_posedge or
                 Tviol_ADDRB5_CLKB_posedge or Tviol_ADDRB4_CLKB_posedge or
                 Tviol_ADDRB3_CLKB_posedge or Tviol_ADDRB2_CLKB_posedge or
                 Tviol_ADDRB1_CLKB_posedge or Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(3) := Violation XOR DOA_zd(3);
    DOA_zd(2) := Violation XOR DOA_zd(2);
    DOA_zd(1) := Violation XOR DOA_zd(1);
    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(3) := Violation XOR DOB_zd(3);
    DOB_zd(2) := Violation XOR DOB_zd(2);
    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (
      OutSignal => DOA(3),
      GlitchData => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp => DOA_zd(3),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(2),
      GlitchData => DOA_GlitchData2,
      OutSignalName => "DOA(2)",    
      OutTemp => DOA_zd(2),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S4_S4_V;

configuration CFG_X_RAMB4_S4_S4_V of X_RAMB4_S4_S4 is
   for X_RAMB4_S4_S4_V
   end for;
end CFG_X_RAMB4_S4_S4_V;


----- CELL X_RAMB4_S4_S8 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S4_S8 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S4_S8 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (9 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (8 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (3 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (7 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (3 downto 0);
        DIB    : in STD_LOGIC_VECTOR (7 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (9 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (8 downto 0);
        DOA    : out STD_LOGIC_VECTOR (3 downto 0);
        DOB    : out STD_LOGIC_VECTOR (7 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S4_S8 : entity is TRUE;

end X_RAMB4_S4_S8;

-----------------------------------------------------------------------------

architecture X_RAMB4_S4_S8_V of X_RAMB4_S4_S8 is

  attribute VITAL_LEVEL0 of X_RAMB4_S4_S8_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(9 downto 0)  := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(8 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(3 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(7 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0), ADDRA(0), tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1), ADDRA(1), tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2), ADDRA(2), tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3), ADDRA(3), tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4), ADDRA(4), tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5), ADDRA(5), tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6), ADDRA(6), tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7), ADDRA(7), tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8), ADDRA(8), tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9), ADDRA(9), tipd_ADDRA(9));
    VitalWireDelay (ADDRB_ipd(0), ADDRB(0), tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1), ADDRB(1), tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2), ADDRB(2), tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3), ADDRB(3), tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4), ADDRB(4), tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5), ADDRB(5), tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6), ADDRB(6), tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7), ADDRB(7), tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8), ADDRB(8), tipd_ADDRB(8));
    VitalWireDelay (DIA_ipd(0),   DIA(0),   tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),   DIA(1),   tipd_DIA(1));
    VitalWireDelay (DIA_ipd(2),   DIA(2),   tipd_DIA(2));
    VitalWireDelay (DIA_ipd(3),   DIA(3),   tipd_DIA(3));
    VitalWireDelay (DIB_ipd(0),   DIB(0),   tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),   DIB(1),   tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),   DIB(2),   tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),   DIB(3),   tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),   DIB(4),   tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),   DIB(5),   tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),   DIB(6),   tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),   DIB(7),   tipd_DIB(7));
    VitalWireDelay (ENA_ipd,      ENA,      tipd_ENA);
    VitalWireDelay (ENB_ipd,      ENB,      tipd_ENB);
    VitalWireDelay (WEA_ipd,      WEA,      tipd_WEA);
    VitalWireDelay (WEB_ipd,      WEB,      tipd_WEB);
    VitalWireDelay (RSTA_ipd,     RSTA,     tipd_RSTA);
    VitalWireDelay (RSTB_ipd,     RSTB,     tipd_RSTB);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLKA_ipd,     CLKA,     tipd_CLKA);
    VitalWireDelay (CLKB_ipd,     CLKB,     tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S4_S8 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 4;
    constant DIAW_1 : integer := 3;
    constant DIBW   : integer := 8;
    constant DIBW_1 : integer := 7;
    variable DOA_zd : std_logic_vector(3 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(7 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA3_CLKA_posedge,
          TimingData              => Tmkr_DIA3_CLKA_posedge,
          TestSignal              => DIA_ipd(3),
          TestSignalName          => "DIA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(3),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA2_CLKA_posedge,
          TimingData              => Tmkr_DIA2_CLKA_posedge,
          TestSignal              => DIA_ipd(2),
          TestSignalName          => "DIA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(2),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA3_CLKA_posedge   or Tviol_DIA2_CLKA_posedge   or
                 Tviol_DIA1_CLKA_posedge   or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge    or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge   or 

                 Tviol_ADDRA9_CLKA_posedge or Tviol_ADDRA8_CLKA_posedge or
                 Tviol_ADDRA7_CLKA_posedge or Tviol_ADDRA6_CLKA_posedge or
                 Tviol_ADDRA5_CLKA_posedge or Tviol_ADDRA4_CLKA_posedge or 
                 Tviol_ADDRA3_CLKA_posedge or Tviol_ADDRA2_CLKA_posedge or 
                 Tviol_ADDRA1_CLKA_posedge or Tviol_ADDRA0_CLKA_posedge or 

                 Pviol_CLKA                or

                 Tviol_DIB7_CLKB_posedge   or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge   or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge   or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge   or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge    or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge   or 

                 Tviol_ADDRB8_CLKB_posedge or Tviol_ADDRB7_CLKB_posedge or
                 Tviol_ADDRB6_CLKB_posedge or Tviol_ADDRB5_CLKB_posedge or
                 Tviol_ADDRB4_CLKB_posedge or Tviol_ADDRB3_CLKB_posedge or
                 Tviol_ADDRB2_CLKB_posedge or Tviol_ADDRB1_CLKB_posedge or 
                 Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(3) := Violation XOR DOA_zd(3);
    DOA_zd(2) := Violation XOR DOA_zd(2);
    DOA_zd(1) := Violation XOR DOA_zd(1);
    DOA_zd(0) := Violation XOR DOA_zd(0);

    DOB_zd(7) := Violation XOR DOB_zd(7);
    DOB_zd(6) := Violation XOR DOB_zd(6);
    DOB_zd(5) := Violation XOR DOB_zd(5);
    DOB_zd(4) := Violation XOR DOB_zd(4);
    DOB_zd(3) := Violation XOR DOB_zd(3);
    DOB_zd(2) := Violation XOR DOB_zd(2);
    DOB_zd(1) := Violation XOR DOB_zd(1);
    DOB_zd(0) := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (
      OutSignal => DOA(3),
      GlitchData => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp => DOA_zd(3),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(2),
      GlitchData => DOA_GlitchData2,
      OutSignalName => "DOA(2)",    
      OutTemp => DOA_zd(2),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S4_S8_V;

configuration CFG_X_RAMB4_S4_S8_V of X_RAMB4_S4_S8 is
   for X_RAMB4_S4_S8_V
   end for;
end CFG_X_RAMB4_S4_S8_V;


----- CELL X_RAMB4_S4_S16 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S4_S16 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S4_S16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (9 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (3 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (3 downto 0)  := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (3 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (3 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (9 downto 0)  := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (3 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (9 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (3 downto 0);
        DIB    : in STD_LOGIC_VECTOR (15 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (9 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (7 downto 0);
        DOA    : out STD_LOGIC_VECTOR (3 downto 0);
        DOB    : out STD_LOGIC_VECTOR (15 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S4_S16 : entity is TRUE;

end X_RAMB4_S4_S16;

-----------------------------------------------------------------------------

architecture X_RAMB4_S4_S16_V of X_RAMB4_S4_S16 is

  attribute VITAL_LEVEL0 of X_RAMB4_S4_S16_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(9 downto 0)  := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(3 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(15 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0), ADDRA(0), tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1), ADDRA(1), tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2), ADDRA(2), tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3), ADDRA(3), tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4), ADDRA(4), tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5), ADDRA(5), tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6), ADDRA(6), tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7), ADDRA(7), tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8), ADDRA(8), tipd_ADDRA(8));
    VitalWireDelay (ADDRA_ipd(9), ADDRA(9), tipd_ADDRA(9));
    VitalWireDelay (ADDRB_ipd(0), ADDRB(0), tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1), ADDRB(1), tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2), ADDRB(2), tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3), ADDRB(3), tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4), ADDRB(4), tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5), ADDRB(5), tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6), ADDRB(6), tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7), ADDRB(7), tipd_ADDRB(7));
    VitalWireDelay (DIA_ipd(0),   DIA(0),   tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),   DIA(1),   tipd_DIA(1));
    VitalWireDelay (DIA_ipd(2),   DIA(2),   tipd_DIA(2));
    VitalWireDelay (DIA_ipd(3),   DIA(3),   tipd_DIA(3));
    VitalWireDelay (DIB_ipd(0),   DIB(0),   tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),   DIB(1),   tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),   DIB(2),   tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),   DIB(3),   tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),   DIB(4),   tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),   DIB(5),   tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),   DIB(6),   tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),   DIB(7),   tipd_DIB(7));
    VitalWireDelay (DIB_ipd(8),   DIB(8),   tipd_DIB(8));
    VitalWireDelay (DIB_ipd(9),   DIB(9),   tipd_DIB(9));
    VitalWireDelay (DIB_ipd(10),  DIB(10),  tipd_DIB(10));
    VitalWireDelay (DIB_ipd(11),  DIB(11),  tipd_DIB(11));
    VitalWireDelay (DIB_ipd(12),  DIB(12),  tipd_DIB(12));
    VitalWireDelay (DIB_ipd(13),  DIB(13),  tipd_DIB(13));
    VitalWireDelay (DIB_ipd(14),  DIB(14),  tipd_DIB(14));
    VitalWireDelay (DIB_ipd(15),  DIB(15),  tipd_DIB(15));
    VitalWireDelay (ENA_ipd,      ENA,      tipd_ENA);
    VitalWireDelay (ENB_ipd,      ENB,      tipd_ENB);
    VitalWireDelay (WEA_ipd,      WEA,      tipd_WEA);
    VitalWireDelay (WEB_ipd,      WEB,      tipd_WEB);
    VitalWireDelay (RSTA_ipd,     RSTA,     tipd_RSTA);
    VitalWireDelay (RSTB_ipd,     RSTB,     tipd_RSTB);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLKA_ipd,     CLKA,     tipd_CLKA);
    VitalWireDelay (CLKB_ipd,     CLKB,     tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S4_S16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB8_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB9_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB10_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB11_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB12_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB13_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB14_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB15_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA9_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB8_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB9_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB10_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB11_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB12_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB13_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB14_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB15_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA9_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 4;
    constant DIAW_1 : integer := 3;
    constant DIBW   : integer := 16;
    constant DIBW_1 : integer := 15;
    variable DOA_zd : std_logic_vector(3 downto 0)  := (others => 'X');
    variable DOB_zd : std_logic_vector(15 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData8  : VitalGlitchDataType;
    variable DOB_GlitchData9  : VitalGlitchDataType;
    variable DOB_GlitchData10 : VitalGlitchDataType;
    variable DOB_GlitchData11 : VitalGlitchDataType;
    variable DOB_GlitchData12 : VitalGlitchDataType;
    variable DOB_GlitchData13 : VitalGlitchDataType;
    variable DOB_GlitchData14 : VitalGlitchDataType;
    variable DOB_GlitchData15 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process
 
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA3_CLKA_posedge,
          TimingData              => Tmkr_DIA3_CLKA_posedge,
          TestSignal              => DIA_ipd(3),
          TestSignalName          => "DIA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(3),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA2_CLKA_posedge,
          TimingData              => Tmkr_DIA2_CLKA_posedge,
          TestSignal              => DIA_ipd(2),
          TestSignalName          => "DIA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(2),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB15_CLKB_posedge,
          TimingData              => Tmkr_DIB15_CLKB_posedge,
          TestSignal              => DIB_ipd(15),
          TestSignalName          => "DIB(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(15),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(15),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(15),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(15),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB14_CLKB_posedge,
          TimingData              => Tmkr_DIB14_CLKB_posedge,
          TestSignal              => DIB_ipd(14),
          TestSignalName          => "DIB(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(14),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(14),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(14),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(14),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB13_CLKB_posedge,
          TimingData              => Tmkr_DIB13_CLKB_posedge,
          TestSignal              => DIB_ipd(13),
          TestSignalName          => "DIB(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(13),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(13),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(13),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(13),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB12_CLKB_posedge,
          TimingData              => Tmkr_DIB12_CLKB_posedge,
          TestSignal              => DIB_ipd(12),
          TestSignalName          => "DIB(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(12),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(12),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(12),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(12),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB11_CLKB_posedge,
          TimingData              => Tmkr_DIB11_CLKB_posedge,
          TestSignal              => DIB_ipd(11),
          TestSignalName          => "DIB(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(11),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(11),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(11),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(11),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB10_CLKB_posedge,
          TimingData              => Tmkr_DIB10_CLKB_posedge,
          TestSignal              => DIB_ipd(10),
          TestSignalName          => "DIB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(10),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(10),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB9_CLKB_posedge,
          TimingData              => Tmkr_DIB9_CLKB_posedge,
          TestSignal              => DIB_ipd(9),
          TestSignalName          => "DIB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(9),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(9),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB8_CLKB_posedge,
          TimingData              => Tmkr_DIB8_CLKB_posedge,
          TestSignal              => DIB_ipd(8),
          TestSignalName          => "DIB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(8),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(8),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA9_CLKA_posedge,
          TimingData              => Tmkr_ADDRA9_CLKA_posedge,
          TestSignal              => ADDRA_ipd(9),
          TestSignalName          => "ADDRA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(9),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(9),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S4_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA3_CLKA_posedge   or Tviol_DIA2_CLKA_posedge   or
                 Tviol_DIA1_CLKA_posedge   or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge    or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge   or 

                 Tviol_ADDRA9_CLKA_posedge or Tviol_ADDRA8_CLKA_posedge or
                 Tviol_ADDRA7_CLKA_posedge or Tviol_ADDRA6_CLKA_posedge or
                 Tviol_ADDRA5_CLKA_posedge or Tviol_ADDRA4_CLKA_posedge or 
                 Tviol_ADDRA3_CLKA_posedge or Tviol_ADDRA2_CLKA_posedge or 
                 Tviol_ADDRA1_CLKA_posedge or Tviol_ADDRA0_CLKA_posedge or 

                 Pviol_CLKA                or

                 Tviol_DIB15_CLKB_posedge  or Tviol_DIB14_CLKB_posedge  or 
                 Tviol_DIB13_CLKB_posedge  or Tviol_DIB12_CLKB_posedge  or
                 Tviol_DIB11_CLKB_posedge  or Tviol_DIB10_CLKB_posedge  or
                 Tviol_DIB9_CLKB_posedge   or Tviol_DIB8_CLKB_posedge   or
                 Tviol_DIB7_CLKB_posedge   or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge   or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge   or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge   or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge    or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge   or 

                 Tviol_ADDRB7_CLKB_posedge or Tviol_ADDRB6_CLKB_posedge or
                 Tviol_ADDRB5_CLKB_posedge or Tviol_ADDRB4_CLKB_posedge or
                 Tviol_ADDRB3_CLKB_posedge or Tviol_ADDRB2_CLKB_posedge or
                 Tviol_ADDRB1_CLKB_posedge or Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(3)  := Violation XOR DOA_zd(3);
    DOA_zd(2)  := Violation XOR DOA_zd(2);
    DOA_zd(1)  := Violation XOR DOA_zd(1);
    DOA_zd(0)  := Violation XOR DOA_zd(0);

    DOB_zd(15) := Violation XOR DOB_zd(15);
    DOB_zd(14) := Violation XOR DOB_zd(14);
    DOB_zd(13) := Violation XOR DOB_zd(13);
    DOB_zd(12) := Violation XOR DOB_zd(12);
    DOB_zd(11) := Violation XOR DOB_zd(11);
    DOB_zd(10) := Violation XOR DOB_zd(10);
    DOB_zd(9)  := Violation XOR DOB_zd(9);
    DOB_zd(8)  := Violation XOR DOB_zd(8);
    DOB_zd(7)  := Violation XOR DOB_zd(7);
    DOB_zd(6)  := Violation XOR DOB_zd(6);
    DOB_zd(5)  := Violation XOR DOB_zd(5);
    DOB_zd(4)  := Violation XOR DOB_zd(4);
    DOB_zd(3)  := Violation XOR DOB_zd(3);
    DOB_zd(2)  := Violation XOR DOB_zd(2);
    DOB_zd(1)  := Violation XOR DOB_zd(1);
    DOB_zd(0)  := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (
      OutSignal => DOA(3),
      GlitchData => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp => DOA_zd(3),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(2),
      GlitchData => DOA_GlitchData2,
      OutSignalName => "DOA(2)",    
      OutTemp => DOA_zd(2),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(15),
      GlitchData => DOB_GlitchData15,
      OutSignalName => "DOB(15)",
      OutTemp => DOB_zd(15),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(15),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(15),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(14),
      GlitchData => DOB_GlitchData14,
      OutSignalName => "DOB(14)",
      OutTemp => DOB_zd(14),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(14),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(14),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(13),
      GlitchData => DOB_GlitchData13,
      OutSignalName => "DOB(13)",
      OutTemp => DOB_zd(13),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(13),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(13),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(12),
      GlitchData => DOB_GlitchData12,
      OutSignalName => "DOB(12)",
      OutTemp => DOB_zd(12),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(12),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(12),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(11),
      GlitchData => DOB_GlitchData11,
      OutSignalName => "DOB(11)",
      OutTemp => DOB_zd(11),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(11),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(11),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(10),
      GlitchData => DOB_GlitchData10,
      OutSignalName => "DOB(10)",
      OutTemp => DOB_zd(10),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(10),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(10),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(9),
      GlitchData => DOB_GlitchData9,
      OutSignalName => "DOB(9)",
      OutTemp => DOB_zd(9),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(9),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(9),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(8),
      GlitchData => DOB_GlitchData8,
      OutSignalName => "DOB(8)",
      OutTemp => DOB_zd(8),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(8),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(8),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S4_S16_V;

configuration CFG_X_RAMB4_S4_S16_V of X_RAMB4_S4_S16 is
   for X_RAMB4_S4_S16_V
   end for;
end CFG_X_RAMB4_S4_S16_V;


----- CELL X_RAMB4_S8_S8 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S8_S8 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S8_S8 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (8 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (8 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (7 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (7 downto 0)  := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (7 downto 0);
        DIB    : in STD_LOGIC_VECTOR (7 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (8 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (8 downto 0);
        DOA    : out STD_LOGIC_VECTOR (7 downto 0);
        DOB    : out STD_LOGIC_VECTOR (7 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S8_S8 : entity is TRUE;

end X_RAMB4_S8_S8;

-----------------------------------------------------------------------------

architecture X_RAMB4_S8_S8_V of X_RAMB4_S8_S8 is

  attribute VITAL_LEVEL0 of X_RAMB4_S8_S8_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(8 downto 0)  := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(8 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(7 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0), ADDRA(0), tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1), ADDRA(1), tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2), ADDRA(2), tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3), ADDRA(3), tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4), ADDRA(4), tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5), ADDRA(5), tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6), ADDRA(6), tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7), ADDRA(7), tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8), ADDRA(8), tipd_ADDRA(8));
    VitalWireDelay (ADDRB_ipd(0), ADDRB(0), tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1), ADDRB(1), tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2), ADDRB(2), tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3), ADDRB(3), tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4), ADDRB(4), tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5), ADDRB(5), tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6), ADDRB(6), tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7), ADDRB(7), tipd_ADDRB(7));
    VitalWireDelay (ADDRB_ipd(8), ADDRB(8), tipd_ADDRB(8));
    VitalWireDelay (DIA_ipd(0),   DIA(0),   tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),   DIA(1),   tipd_DIA(1));
    VitalWireDelay (DIA_ipd(2),   DIA(2),   tipd_DIA(2));
    VitalWireDelay (DIA_ipd(3),   DIA(3),   tipd_DIA(3));
    VitalWireDelay (DIA_ipd(4),   DIA(4),   tipd_DIA(4));
    VitalWireDelay (DIA_ipd(5),   DIA(5),   tipd_DIA(5));
    VitalWireDelay (DIA_ipd(6),   DIA(6),   tipd_DIA(6));
    VitalWireDelay (DIA_ipd(7),   DIA(7),   tipd_DIA(7));
    VitalWireDelay (DIB_ipd(0),   DIB(0),   tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),   DIB(1),   tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),   DIB(2),   tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),   DIB(3),   tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),   DIB(4),   tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),   DIB(5),   tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),   DIB(6),   tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),   DIB(7),   tipd_DIB(7));
    VitalWireDelay (ENA_ipd,      ENA,      tipd_ENA);
    VitalWireDelay (ENB_ipd,      ENB,      tipd_ENB);
    VitalWireDelay (WEA_ipd,      WEA,      tipd_WEA);
    VitalWireDelay (WEB_ipd,      WEB,      tipd_WEB);
    VitalWireDelay (RSTA_ipd,     RSTA,     tipd_RSTA);
    VitalWireDelay (RSTB_ipd,     RSTB,     tipd_RSTB);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLKA_ipd,     CLKA,     tipd_CLKA);
    VitalWireDelay (CLKB_ipd,     CLKB,     tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S8_S8 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA4_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA5_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA6_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA7_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB8_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA4_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA5_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA6_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA7_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB8_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 8;
    constant DIAW_1 : integer := 7;
    constant DIBW   : integer := 8;
    constant DIBW_1 : integer := 7;
    variable DOA_zd : std_logic_vector(7 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(7 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOA_GlitchData4  : VitalGlitchDataType;
    variable DOA_GlitchData5  : VitalGlitchDataType;
    variable DOA_GlitchData6  : VitalGlitchDataType;
    variable DOA_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA7_CLKA_posedge,
          TimingData              => Tmkr_DIA7_CLKA_posedge,
          TestSignal              => DIA_ipd(7),
          TestSignalName          => "DIA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(7),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA6_CLKA_posedge,
          TimingData              => Tmkr_DIA6_CLKA_posedge,
          TestSignal              => DIA_ipd(6),
          TestSignalName          => "DIA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(6),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA5_CLKA_posedge,
          TimingData              => Tmkr_DIA5_CLKA_posedge,
          TestSignal              => DIA_ipd(5),
          TestSignalName          => "DIA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(5),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA4_CLKA_posedge,
          TimingData              => Tmkr_DIA4_CLKA_posedge,
          TestSignal              => DIA_ipd(4),
          TestSignalName          => "DIA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(4),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA3_CLKA_posedge,
          TimingData              => Tmkr_DIA3_CLKA_posedge,
          TestSignal              => DIA_ipd(3),
          TestSignalName          => "DIA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(3),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA2_CLKA_posedge,
          TimingData              => Tmkr_DIA2_CLKA_posedge,
          TestSignal              => DIA_ipd(2),
          TestSignalName          => "DIA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(2),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB8_CLKB_posedge,
          TimingData              => Tmkr_ADDRB8_CLKB_posedge,
          TestSignal              => ADDRB_ipd(8),
          TestSignalName          => "ADDRB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(8),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S8_S8",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA7_CLKA_posedge   or Tviol_DIA6_CLKA_posedge   or
                 Tviol_DIA5_CLKA_posedge   or Tviol_DIA4_CLKA_posedge   or
                 Tviol_DIA3_CLKA_posedge   or Tviol_DIA2_CLKA_posedge   or
                 Tviol_DIA1_CLKA_posedge   or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge    or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge   or 

                 Tviol_ADDRA8_CLKA_posedge or Tviol_ADDRA7_CLKA_posedge or
                 Tviol_ADDRA6_CLKA_posedge or Tviol_ADDRA5_CLKA_posedge or
                 Tviol_ADDRA4_CLKA_posedge or Tviol_ADDRA3_CLKA_posedge or 
                 Tviol_ADDRA2_CLKA_posedge or Tviol_ADDRA1_CLKA_posedge or 
                 Tviol_ADDRA0_CLKA_posedge or

                 Pviol_CLKA                or

                 Tviol_DIB7_CLKB_posedge   or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge   or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge   or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge   or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge    or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge   or 

                 Tviol_ADDRB8_CLKB_posedge or Tviol_ADDRB7_CLKB_posedge or 
                 Tviol_ADDRB6_CLKB_posedge or Tviol_ADDRB5_CLKB_posedge or 
                 Tviol_ADDRB4_CLKB_posedge or Tviol_ADDRB3_CLKB_posedge or 
                 Tviol_ADDRB2_CLKB_posedge or Tviol_ADDRB1_CLKB_posedge or
                 Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(7)  := Violation XOR DOA_zd(7);
    DOA_zd(6)  := Violation XOR DOA_zd(6);
    DOA_zd(5)  := Violation XOR DOA_zd(5);
    DOA_zd(4)  := Violation XOR DOA_zd(4);
    DOA_zd(3)  := Violation XOR DOA_zd(3);
    DOA_zd(2)  := Violation XOR DOA_zd(2);
    DOA_zd(1)  := Violation XOR DOA_zd(1);
    DOA_zd(0)  := Violation XOR DOA_zd(0);

    DOB_zd(7)  := Violation XOR DOB_zd(7);
    DOB_zd(6)  := Violation XOR DOB_zd(6);
    DOB_zd(5)  := Violation XOR DOB_zd(5);
    DOB_zd(4)  := Violation XOR DOB_zd(4);
    DOB_zd(3)  := Violation XOR DOB_zd(3);
    DOB_zd(2)  := Violation XOR DOB_zd(2);
    DOB_zd(1)  := Violation XOR DOB_zd(1);
    DOB_zd(0)  := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (
      OutSignal => DOA(7),
      GlitchData => DOA_GlitchData7,
      OutSignalName => "DOA(7)",
      OutTemp => DOA_zd(7),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(6),
      GlitchData => DOA_GlitchData6,
      OutSignalName => "DOA(6)",
      OutTemp => DOA_zd(6),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(5),
      GlitchData => DOA_GlitchData5,
      OutSignalName => "DOA(5)",
      OutTemp => DOA_zd(5),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(4),
      GlitchData => DOA_GlitchData4,
      OutSignalName => "DOA(4)",
      OutTemp => DOA_zd(4),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(3),
      GlitchData => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp => DOA_zd(3),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(2),
      GlitchData => DOA_GlitchData2,
      OutSignalName => "DOA(2)",    
      OutTemp => DOA_zd(2),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S8_S8_V;

configuration CFG_X_RAMB4_S8_S8_V of X_RAMB4_S8_S8 is
   for X_RAMB4_S8_S8_V
   end for;
end CFG_X_RAMB4_S8_S8_V;


----- CELL X_RAMB4_S8_S16 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S8_S16 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S8_S16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean   := False;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (8 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (7 downto 0)  := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (7 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (8 downto 0)  := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (7 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (8 downto 0) := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (7 downto 0);
        DIB    : in STD_LOGIC_VECTOR (15 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (8 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (7 downto 0);
        DOA    : out STD_LOGIC_VECTOR (7 downto 0);
        DOB    : out STD_LOGIC_VECTOR (15 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S8_S16 : entity is TRUE;

end X_RAMB4_S8_S16;

-----------------------------------------------------------------------------

architecture X_RAMB4_S8_S16_V of X_RAMB4_S8_S16 is

  attribute VITAL_LEVEL0 of X_RAMB4_S8_S16_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(8 downto 0)  := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIB_ipd   : std_logic_vector(15 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0), ADDRA(0), tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1), ADDRA(1), tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2), ADDRA(2), tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3), ADDRA(3), tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4), ADDRA(4), tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5), ADDRA(5), tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6), ADDRA(6), tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7), ADDRA(7), tipd_ADDRA(7));
    VitalWireDelay (ADDRA_ipd(8), ADDRA(8), tipd_ADDRA(8));
    VitalWireDelay (ADDRB_ipd(0), ADDRB(0), tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1), ADDRB(1), tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2), ADDRB(2), tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3), ADDRB(3), tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4), ADDRB(4), tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5), ADDRB(5), tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6), ADDRB(6), tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7), ADDRB(7), tipd_ADDRB(7));
    VitalWireDelay (DIA_ipd(0),   DIA(0),   tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),   DIA(1),   tipd_DIA(1));
    VitalWireDelay (DIA_ipd(2),   DIA(2),   tipd_DIA(2));
    VitalWireDelay (DIA_ipd(3),   DIA(3),   tipd_DIA(3));
    VitalWireDelay (DIA_ipd(4),   DIA(4),   tipd_DIA(4));
    VitalWireDelay (DIA_ipd(5),   DIA(5),   tipd_DIA(5));
    VitalWireDelay (DIA_ipd(6),   DIA(6),   tipd_DIA(6));
    VitalWireDelay (DIA_ipd(7),   DIA(7),   tipd_DIA(7));
    VitalWireDelay (DIB_ipd(0),   DIB(0),   tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),   DIB(1),   tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),   DIB(2),   tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),   DIB(3),   tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),   DIB(4),   tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),   DIB(5),   tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),   DIB(6),   tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),   DIB(7),   tipd_DIB(7));
    VitalWireDelay (DIB_ipd(8),   DIB(8),   tipd_DIB(8));
    VitalWireDelay (DIB_ipd(9),   DIB(9),   tipd_DIB(9));
    VitalWireDelay (DIB_ipd(10),  DIB(10),  tipd_DIB(10));
    VitalWireDelay (DIB_ipd(11),  DIB(11),  tipd_DIB(11));
    VitalWireDelay (DIB_ipd(12),  DIB(12),  tipd_DIB(12));
    VitalWireDelay (DIB_ipd(13),  DIB(13),  tipd_DIB(13));
    VitalWireDelay (DIB_ipd(14),  DIB(14),  tipd_DIB(14));
    VitalWireDelay (DIB_ipd(15),  DIB(15),  tipd_DIB(15));
    VitalWireDelay (ENA_ipd,      ENA,      tipd_ENA);
    VitalWireDelay (ENB_ipd,      ENB,      tipd_ENB);
    VitalWireDelay (WEA_ipd,      WEA,      tipd_WEA);
    VitalWireDelay (WEB_ipd,      WEB,      tipd_WEB);
    VitalWireDelay (RSTA_ipd,     RSTA,     tipd_RSTA);
    VitalWireDelay (RSTB_ipd,     RSTB,     tipd_RSTB);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLKA_ipd,     CLKA,     tipd_CLKA);
    VitalWireDelay (CLKB_ipd,     CLKB,     tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S8_S16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA4_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA5_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA6_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA7_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB8_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB9_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB10_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB11_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB12_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB13_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB14_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB15_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA8_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA4_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA5_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA6_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA7_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB8_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB9_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB10_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB11_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB12_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB13_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB14_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB15_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA8_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 8;
    constant DIAW_1 : integer := 7;
    constant DIBW   : integer := 16;
    constant DIBW_1 : integer := 15;
    variable DOA_zd : std_logic_vector(7 downto 0)  := (others => 'X');
    variable DOB_zd : std_logic_vector(15 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOA_GlitchData4  : VitalGlitchDataType;
    variable DOA_GlitchData5  : VitalGlitchDataType;
    variable DOA_GlitchData6  : VitalGlitchDataType;
    variable DOA_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData8  : VitalGlitchDataType;
    variable DOB_GlitchData9  : VitalGlitchDataType;
    variable DOB_GlitchData10 : VitalGlitchDataType;
    variable DOB_GlitchData11 : VitalGlitchDataType;
    variable DOB_GlitchData12 : VitalGlitchDataType;
    variable DOB_GlitchData13 : VitalGlitchDataType;
    variable DOB_GlitchData14 : VitalGlitchDataType;
    variable DOB_GlitchData15 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process
     
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA7_CLKA_posedge,
          TimingData              => Tmkr_DIA7_CLKA_posedge,
          TestSignal              => DIA_ipd(7),
          TestSignalName          => "DIA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(7),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA6_CLKA_posedge,
          TimingData              => Tmkr_DIA6_CLKA_posedge,
          TestSignal              => DIA_ipd(6),
          TestSignalName          => "DIA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(6),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA5_CLKA_posedge,
          TimingData              => Tmkr_DIA5_CLKA_posedge,
          TestSignal              => DIA_ipd(5),
          TestSignalName          => "DIA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(5),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA4_CLKA_posedge,
          TimingData              => Tmkr_DIA4_CLKA_posedge,
          TestSignal              => DIA_ipd(4),
          TestSignalName          => "DIA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(4),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA3_CLKA_posedge,
          TimingData              => Tmkr_DIA3_CLKA_posedge,
          TestSignal              => DIA_ipd(3),
          TestSignalName          => "DIA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(3),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA2_CLKA_posedge,
          TimingData              => Tmkr_DIA2_CLKA_posedge,
          TestSignal              => DIA_ipd(2),
          TestSignalName          => "DIA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(2),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB15_CLKB_posedge,
          TimingData              => Tmkr_DIB15_CLKB_posedge,
          TestSignal              => DIB_ipd(15),
          TestSignalName          => "DIB(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(15),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(15),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(15),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(15),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB14_CLKB_posedge,
          TimingData              => Tmkr_DIB14_CLKB_posedge,
          TestSignal              => DIB_ipd(14),
          TestSignalName          => "DIB(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(14),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(14),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(14),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(14),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB13_CLKB_posedge,
          TimingData              => Tmkr_DIB13_CLKB_posedge,
          TestSignal              => DIB_ipd(13),
          TestSignalName          => "DIB(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(13),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(13),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(13),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(13),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB12_CLKB_posedge,
          TimingData              => Tmkr_DIB12_CLKB_posedge,
          TestSignal              => DIB_ipd(12),
          TestSignalName          => "DIB(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(12),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(12),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(12),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(12),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB11_CLKB_posedge,
          TimingData              => Tmkr_DIB11_CLKB_posedge,
          TestSignal              => DIB_ipd(11),
          TestSignalName          => "DIB(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(11),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(11),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(11),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(11),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB10_CLKB_posedge,
          TimingData              => Tmkr_DIB10_CLKB_posedge,
          TestSignal              => DIB_ipd(10),
          TestSignalName          => "DIB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(10),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(10),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB9_CLKB_posedge,
          TimingData              => Tmkr_DIB9_CLKB_posedge,
          TestSignal              => DIB_ipd(9),
          TestSignalName          => "DIB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(9),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(9),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB8_CLKB_posedge,
          TimingData              => Tmkr_DIB8_CLKB_posedge,
          TestSignal              => DIB_ipd(8),
          TestSignalName          => "DIB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(8),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(8),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA8_CLKA_posedge,
          TimingData              => Tmkr_ADDRA8_CLKA_posedge,
          TestSignal              => ADDRA_ipd(8),
          TestSignalName          => "ADDRA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(8),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(8),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S8_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA7_CLKA_posedge   or Tviol_DIA6_CLKA_posedge   or
                 Tviol_DIA5_CLKA_posedge   or Tviol_DIA4_CLKA_posedge   or
                 Tviol_DIA3_CLKA_posedge   or Tviol_DIA2_CLKA_posedge   or
                 Tviol_DIA1_CLKA_posedge   or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge    or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge   or 

                 Tviol_ADDRA8_CLKA_posedge or Tviol_ADDRA7_CLKA_posedge or
                 Tviol_ADDRA6_CLKA_posedge or Tviol_ADDRA5_CLKA_posedge or
                 Tviol_ADDRA4_CLKA_posedge or Tviol_ADDRA3_CLKA_posedge or 
                 Tviol_ADDRA2_CLKA_posedge or Tviol_ADDRA1_CLKA_posedge or 
                 Tviol_ADDRA0_CLKA_posedge or

                 Pviol_CLKA                or

                 Tviol_DIB15_CLKB_posedge  or Tviol_DIB14_CLKB_posedge  or 
                 Tviol_DIB13_CLKB_posedge  or Tviol_DIB12_CLKB_posedge  or
                 Tviol_DIB11_CLKB_posedge  or Tviol_DIB10_CLKB_posedge  or
                 Tviol_DIB9_CLKB_posedge   or Tviol_DIB8_CLKB_posedge   or
                 Tviol_DIB7_CLKB_posedge   or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge   or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge   or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge   or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge    or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge   or 

                 Tviol_ADDRB7_CLKB_posedge or Tviol_ADDRB6_CLKB_posedge or
                 Tviol_ADDRB5_CLKB_posedge or Tviol_ADDRB4_CLKB_posedge or
                 Tviol_ADDRB3_CLKB_posedge or Tviol_ADDRB2_CLKB_posedge or
                 Tviol_ADDRB1_CLKB_posedge or Tviol_ADDRB0_CLKB_posedge or 

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(7)  := Violation XOR DOA_zd(7);
    DOA_zd(6)  := Violation XOR DOA_zd(6);
    DOA_zd(5)  := Violation XOR DOA_zd(5);
    DOA_zd(4)  := Violation XOR DOA_zd(4);
    DOA_zd(3)  := Violation XOR DOA_zd(3);
    DOA_zd(2)  := Violation XOR DOA_zd(2);
    DOA_zd(1)  := Violation XOR DOA_zd(1);
    DOA_zd(0)  := Violation XOR DOA_zd(0);

    DOB_zd(15) := Violation XOR DOB_zd(15);
    DOB_zd(14) := Violation XOR DOB_zd(14);
    DOB_zd(13) := Violation XOR DOB_zd(13);
    DOB_zd(12) := Violation XOR DOB_zd(12);
    DOB_zd(11) := Violation XOR DOB_zd(11);
    DOB_zd(10) := Violation XOR DOB_zd(10);
    DOB_zd(9)  := Violation XOR DOB_zd(9);
    DOB_zd(8)  := Violation XOR DOB_zd(8);
    DOB_zd(7)  := Violation XOR DOB_zd(7);
    DOB_zd(6)  := Violation XOR DOB_zd(6);
    DOB_zd(5)  := Violation XOR DOB_zd(5);
    DOB_zd(4)  := Violation XOR DOB_zd(4);
    DOB_zd(3)  := Violation XOR DOB_zd(3);
    DOB_zd(2)  := Violation XOR DOB_zd(2);
    DOB_zd(1)  := Violation XOR DOB_zd(1);
    DOB_zd(0)  := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (
      OutSignal => DOA(7),
      GlitchData => DOA_GlitchData7,
      OutSignalName => "DOA(7)",
      OutTemp => DOA_zd(7),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(6),
      GlitchData => DOA_GlitchData6,
      OutSignalName => "DOA(6)",
      OutTemp => DOA_zd(6),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(5),
      GlitchData => DOA_GlitchData5,
      OutSignalName => "DOA(5)",
      OutTemp => DOA_zd(5),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(4),
      GlitchData => DOA_GlitchData4,
      OutSignalName => "DOA(4)",
      OutTemp => DOA_zd(4),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(3),
      GlitchData => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp => DOA_zd(3),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(2),
      GlitchData => DOA_GlitchData2,
      OutSignalName => "DOA(2)",    
      OutTemp => DOA_zd(2),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(15),
      GlitchData => DOB_GlitchData15,
      OutSignalName => "DOB(15)",
      OutTemp => DOB_zd(15),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(15),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(15),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(14),
      GlitchData => DOB_GlitchData14,
      OutSignalName => "DOB(14)",
      OutTemp => DOB_zd(14),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(14),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(14),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(13),
      GlitchData => DOB_GlitchData13,
      OutSignalName => "DOB(13)",
      OutTemp => DOB_zd(13),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(13),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(13),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(12),
      GlitchData => DOB_GlitchData12,
      OutSignalName => "DOB(12)",
      OutTemp => DOB_zd(12),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(12),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(12),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(11),
      GlitchData => DOB_GlitchData11,
      OutSignalName => "DOB(11)",
      OutTemp => DOB_zd(11),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(11),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(11),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(10),
      GlitchData => DOB_GlitchData10,
      OutSignalName => "DOB(10)",
      OutTemp => DOB_zd(10),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(10),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(10),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(9),
      GlitchData => DOB_GlitchData9,
      OutSignalName => "DOB(9)",
      OutTemp => DOB_zd(9),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(9),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(9),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(8),
      GlitchData => DOB_GlitchData8,
      OutSignalName => "DOB(8)",
      OutTemp => DOB_zd(8),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(8),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(8),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S8_S16_V;

configuration CFG_X_RAMB4_S8_S16_V of X_RAMB4_S8_S16 is
   for X_RAMB4_S8_S16_V
   end for;
end CFG_X_RAMB4_S8_S16_V;


----- CELL X_RAMB4_S16_S16 -----
------------------------------------------
--
--  Xilinx X_RAMB4_S16_S16 VITAL Model
--
--  Version 1.0, Dhimant Patel, December, 1997.
--
--  Version 1.1: Added WAIT statement. Added GSR pin together with
--               associated functionality and timing. DP, 04/03/98.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMB4_S16_S16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_ADDRA : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_ADDRB : VitalDelayArrayType01 (7 downto 0)  := (others => (0.0 ns, 0.0 ns));
       tipd_DIA   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
       tipd_DIB   : VitalDelayArrayType01 (15 downto 0) := (others => (0.0 ns, 0.0 ns));
        
       tipd_ENA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ENB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEA   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WEB   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_GSR   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RSTB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKA  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLKB  : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_CLKA_DOA : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_CLKB_DOB : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOA  : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));
       tpd_GSR_DOB  : VitalDelayArrayType01 (15 downto 0) := (others => (0.1 ns, 0.1 ns));

       -- VITAL setup and hold times

       tsetup_ENA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTA_CLKA_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKA_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_ENB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ENB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WEB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_RSTB_CLKB_negedge_posedge  : VitalDelayType := 0.01 ns;
       trecovery_GSR_CLKB_negedge_posedge : VitalDelayType := 0.01 ns;

       tsetup_CLKA_CLKB_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_CLKB_CLKA_posedge_posedge  : VitalDelayType := 0.01 ns;

       tsetup_DIA_CLKA_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DIA_CLKA_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRA_CLKA_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       tsetup_DIB_CLKB_posedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_DIB_CLKB_negedge_posedge   : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_posedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       tsetup_ADDRB_CLKB_negedge_posedge : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_ENA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEA_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTA_CLKA_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKA_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_ENB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ENB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WEB_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_RSTB_CLKB_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_GSR_CLKB_negedge_posedge    : VitalDelayType := 0.01 ns;

       thold_DIA_CLKA_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DIA_CLKA_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDRA_CLKA_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDRA_CLKA_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       thold_DIB_CLKB_posedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_DIB_CLKB_negedge_posedge    : VitalDelayArrayType (15 downto 0) := (others => 0.01 ns);
       thold_ADDRB_CLKB_posedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);
       thold_ADDRB_CLKB_negedge_posedge  : VitalDelayArrayType (7 downto 0)  := (others => 0.01 ns);

       -- VITAL minimum pulse width

       tpw_CLKA_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKA_negedge : VitalDelayType := 0.01 ns;

       tpw_CLKB_posedge : VitalDelayType := 0.01 ns;
       tpw_CLKB_negedge : VitalDelayType := 0.01 ns;

       tpw_GSR_posedge  : VitalDelayType := 0.01 ns;

       INIT_00 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_01 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_02 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_03 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_04 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_05 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_06 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_07 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_08 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_09 : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0A : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0B : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0C : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0D : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0E : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000";
       INIT_0F : bit_vector := X"0000000000000000000000000000000000000000000000000000000000000000"
  );

  port (DIA    : in STD_LOGIC_VECTOR (15 downto 0);
        DIB    : in STD_LOGIC_VECTOR (15 downto 0);
        ENA    : in STD_ULOGIC;
        ENB    : in STD_ULOGIC;
        WEA    : in STD_ULOGIC;
        WEB    : in STD_ULOGIC;
        RSTA   : in STD_ULOGIC;
        RSTB   : in STD_ULOGIC;
        GSR    : in STD_ULOGIC;
        CLKA   : in STD_ULOGIC;
        CLKB   : in STD_ULOGIC;
        ADDRA  : in STD_LOGIC_VECTOR (7 downto 0);
        ADDRB  : in STD_LOGIC_VECTOR (7 downto 0);
        DOA    : out STD_LOGIC_VECTOR (15 downto 0);
        DOB    : out STD_LOGIC_VECTOR (15 downto 0)
       ); 
attribute VITAL_LEVEL0 of X_RAMB4_S16_S16 : entity is TRUE;

end X_RAMB4_S16_S16;

-----------------------------------------------------------------------------

architecture X_RAMB4_S16_S16_V of X_RAMB4_S16_S16 is

  attribute VITAL_LEVEL0 of X_RAMB4_S16_S16_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal ADDRA_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal ADDRB_ipd : std_logic_vector(7 downto 0)  := (others => 'X');
  signal DIA_ipd   : std_logic_vector(15 downto 0) := (others => 'X');
  signal DIB_ipd   : std_logic_vector(15 downto 0) := (others => 'X');

  signal ENA_ipd, ENB_ipd   : std_ulogic := 'X';
  signal WEA_ipd, WEB_ipd   : std_ulogic := 'X';
  signal RSTA_ipd, RSTB_ipd : std_ulogic := 'X';
  signal GSR_ipd            : std_ulogic := 'X';
  signal CLKA_ipd, CLKB_ipd : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADDRA_ipd(0), ADDRA(0), tipd_ADDRA(0));
    VitalWireDelay (ADDRA_ipd(1), ADDRA(1), tipd_ADDRA(1));
    VitalWireDelay (ADDRA_ipd(2), ADDRA(2), tipd_ADDRA(2));
    VitalWireDelay (ADDRA_ipd(3), ADDRA(3), tipd_ADDRA(3));
    VitalWireDelay (ADDRA_ipd(4), ADDRA(4), tipd_ADDRA(4));
    VitalWireDelay (ADDRA_ipd(5), ADDRA(5), tipd_ADDRA(5));
    VitalWireDelay (ADDRA_ipd(6), ADDRA(6), tipd_ADDRA(6));
    VitalWireDelay (ADDRA_ipd(7), ADDRA(7), tipd_ADDRA(7));
    VitalWireDelay (ADDRB_ipd(0), ADDRB(0), tipd_ADDRB(0));
    VitalWireDelay (ADDRB_ipd(1), ADDRB(1), tipd_ADDRB(1));
    VitalWireDelay (ADDRB_ipd(2), ADDRB(2), tipd_ADDRB(2));
    VitalWireDelay (ADDRB_ipd(3), ADDRB(3), tipd_ADDRB(3));
    VitalWireDelay (ADDRB_ipd(4), ADDRB(4), tipd_ADDRB(4));
    VitalWireDelay (ADDRB_ipd(5), ADDRB(5), tipd_ADDRB(5));
    VitalWireDelay (ADDRB_ipd(6), ADDRB(6), tipd_ADDRB(6));
    VitalWireDelay (ADDRB_ipd(7), ADDRB(7), tipd_ADDRB(7));
    VitalWireDelay (DIA_ipd(0),   DIA(0),   tipd_DIA(0));
    VitalWireDelay (DIA_ipd(1),   DIA(1),   tipd_DIA(1));
    VitalWireDelay (DIA_ipd(2),   DIA(2),   tipd_DIA(2));
    VitalWireDelay (DIA_ipd(3),   DIA(3),   tipd_DIA(3));
    VitalWireDelay (DIA_ipd(4),   DIA(4),   tipd_DIA(4));
    VitalWireDelay (DIA_ipd(5),   DIA(5),   tipd_DIA(5));
    VitalWireDelay (DIA_ipd(6),   DIA(6),   tipd_DIA(6));
    VitalWireDelay (DIA_ipd(7),   DIA(7),   tipd_DIA(7));
    VitalWireDelay (DIA_ipd(8),   DIA(8),   tipd_DIA(8));
    VitalWireDelay (DIA_ipd(9),   DIA(9),   tipd_DIA(9));
    VitalWireDelay (DIA_ipd(10),  DIA(10),  tipd_DIA(10));
    VitalWireDelay (DIA_ipd(11),  DIA(11),  tipd_DIA(11));
    VitalWireDelay (DIA_ipd(12),  DIA(12),  tipd_DIA(12));
    VitalWireDelay (DIA_ipd(13),  DIA(13),  tipd_DIA(13));
    VitalWireDelay (DIA_ipd(14),  DIA(14),  tipd_DIA(14));
    VitalWireDelay (DIA_ipd(15),  DIA(15),  tipd_DIA(15));
    VitalWireDelay (DIB_ipd(0),   DIB(0),   tipd_DIB(0));
    VitalWireDelay (DIB_ipd(1),   DIB(1),   tipd_DIB(1));
    VitalWireDelay (DIB_ipd(2),   DIB(2),   tipd_DIB(2));
    VitalWireDelay (DIB_ipd(3),   DIB(3),   tipd_DIB(3));
    VitalWireDelay (DIB_ipd(4),   DIB(4),   tipd_DIB(4));
    VitalWireDelay (DIB_ipd(5),   DIB(5),   tipd_DIB(5));
    VitalWireDelay (DIB_ipd(6),   DIB(6),   tipd_DIB(6));
    VitalWireDelay (DIB_ipd(7),   DIB(7),   tipd_DIB(7));
    VitalWireDelay (DIB_ipd(8),   DIB(8),   tipd_DIB(8));
    VitalWireDelay (DIB_ipd(9),   DIB(9),   tipd_DIB(9));
    VitalWireDelay (DIB_ipd(10),  DIB(10),  tipd_DIB(10));
    VitalWireDelay (DIB_ipd(11),  DIB(11),  tipd_DIB(11));
    VitalWireDelay (DIB_ipd(12),  DIB(12),  tipd_DIB(12));
    VitalWireDelay (DIB_ipd(13),  DIB(13),  tipd_DIB(13));
    VitalWireDelay (DIB_ipd(14),  DIB(14),  tipd_DIB(14));
    VitalWireDelay (DIB_ipd(15),  DIB(15),  tipd_DIB(15));
    VitalWireDelay (ENA_ipd,      ENA,      tipd_ENA);
    VitalWireDelay (ENB_ipd,      ENB,      tipd_ENB);
    VitalWireDelay (WEA_ipd,      WEA,      tipd_WEA);
    VitalWireDelay (WEB_ipd,      WEB,      tipd_WEB);
    VitalWireDelay (RSTA_ipd,     RSTA,     tipd_RSTA);
    VitalWireDelay (RSTB_ipd,     RSTB,     tipd_RSTB);
    VitalWireDelay (GSR_ipd,      GSR,      tipd_GSR);
    VitalWireDelay (CLKA_ipd,     CLKA,     tipd_CLKA);
    VitalWireDelay (CLKB_ipd,     CLKB,     tipd_CLKB);
  end block;

  --------------------
  -- X_RAMB4_S16_S16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_DIA0_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA1_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA2_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA3_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA4_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA5_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA6_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA7_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA8_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA9_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_DIA10_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_DIA11_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_DIA12_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_DIA13_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_DIA14_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_DIA15_CLKA_posedge  : std_ulogic := '0';
    variable Tviol_DIB0_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB1_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB2_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB3_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB4_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB5_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB6_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB7_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB8_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB9_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_DIB10_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB11_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB12_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB13_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB14_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_DIB15_CLKB_posedge  : std_ulogic := '0';
    variable Tviol_ENA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_WEA_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_RSTA_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ENB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_WEB_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_RSTB_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_GSR_CLKA_posedge    : std_ulogic := '0';
    variable Tviol_GSR_CLKB_posedge    : std_ulogic := '0';
    variable Tviol_CLKA_CLKB_posedge   : std_ulogic := '0';
    variable Tviol_CLKB_CLKA_posedge   : std_ulogic := '0';
    variable Tviol_ADDRA0_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA1_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA2_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA3_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA4_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA5_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA6_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRA7_CLKA_posedge : std_ulogic := '0';
    variable Tviol_ADDRB0_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB1_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB2_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB3_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB4_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB5_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB6_CLKB_posedge : std_ulogic := '0';
    variable Tviol_ADDRB7_CLKB_posedge : std_ulogic := '0';

    variable Tmkr_DIA0_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA1_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA2_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA3_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA4_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA5_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA6_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA7_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA8_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA9_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA10_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA11_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA12_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA13_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA14_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIA15_CLKA_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB0_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB1_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB2_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB3_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB4_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB5_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB6_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB7_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB8_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB9_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB10_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB11_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB12_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB13_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB14_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_DIB15_CLKB_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEA_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTA_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ENB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WEB_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_RSTB_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKA_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_GSR_CLKB_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKA_CLKB_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CLKB_CLKA_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA0_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA1_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA2_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA3_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA4_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA5_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA6_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRA7_CLKA_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB0_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB1_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB2_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB3_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB4_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB5_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB6_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADDRB7_CLKB_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLKA, PViol_CLKB : std_ulogic := '0';
    variable PInfo_CLKA, PInfo_CLKB : VitalPeriodDataType := VitalPeriodDataInit;

    variable PViol_GSR : std_ulogic := '0';
    variable PInfo_GSR : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable MEM       : std_logic_vector(4095 downto 0) := To_StdLogicVector(INIT_0F) &
                                                            To_StdLogicVector(INIT_0E) &
                                                            To_StdLogicVector(INIT_0D) &
                                                            To_StdLogicVector(INIT_0C) &
                                                            To_StdLogicVector(INIT_0B) &
                                                            To_StdLogicVector(INIT_0A) &
                                                            To_StdLogicVector(INIT_09) &
                                                            To_StdLogicVector(INIT_08) &
                                                            To_StdLogicVector(INIT_07) &
                                                            To_StdLogicVector(INIT_06) &
                                                            To_StdLogicVector(INIT_05) &
                                                            To_StdLogicVector(INIT_04) &
                                                            To_StdLogicVector(INIT_03) &
                                                            To_StdLogicVector(INIT_02) &
                                                            To_StdLogicVector(INIT_01) &
                                                            To_StdLogicVector(INIT_00);
    variable ADDRESS_A, ADDRESS_B, OLP_LSB, OLP_MSB : integer;
    variable DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB : integer;
    variable VALID_ADDRA, VALID_ADDRB, HAS_OVERLAP : boolean := FALSE;
    constant DIAW   : integer := 16;
    constant DIAW_1 : integer := 15;
    constant DIBW   : integer := 16;
    constant DIBW_1 : integer := 15;
    variable DOA_zd : std_logic_vector(15 downto 0) := (others => 'X');
    variable DOB_zd : std_logic_vector(15 downto 0) := (others => 'X');
    variable DOA_GlitchData0  : VitalGlitchDataType;
    variable DOA_GlitchData1  : VitalGlitchDataType;
    variable DOA_GlitchData2  : VitalGlitchDataType;
    variable DOA_GlitchData3  : VitalGlitchDataType;
    variable DOA_GlitchData4  : VitalGlitchDataType;
    variable DOA_GlitchData5  : VitalGlitchDataType;
    variable DOA_GlitchData6  : VitalGlitchDataType;
    variable DOA_GlitchData7  : VitalGlitchDataType;
    variable DOA_GlitchData8  : VitalGlitchDataType;
    variable DOA_GlitchData9  : VitalGlitchDataType;
    variable DOA_GlitchData10 : VitalGlitchDataType;
    variable DOA_GlitchData11 : VitalGlitchDataType;
    variable DOA_GlitchData12 : VitalGlitchDataType;
    variable DOA_GlitchData13 : VitalGlitchDataType;
    variable DOA_GlitchData14 : VitalGlitchDataType;
    variable DOA_GlitchData15 : VitalGlitchDataType;
    variable DOB_GlitchData0  : VitalGlitchDataType;
    variable DOB_GlitchData1  : VitalGlitchDataType;
    variable DOB_GlitchData2  : VitalGlitchDataType;
    variable DOB_GlitchData3  : VitalGlitchDataType;
    variable DOB_GlitchData4  : VitalGlitchDataType;
    variable DOB_GlitchData5  : VitalGlitchDataType;
    variable DOB_GlitchData6  : VitalGlitchDataType;
    variable DOB_GlitchData7  : VitalGlitchDataType;
    variable DOB_GlitchData8  : VitalGlitchDataType;
    variable DOB_GlitchData9  : VitalGlitchDataType;
    variable DOB_GlitchData10 : VitalGlitchDataType;
    variable DOB_GlitchData11 : VitalGlitchDataType;
    variable DOB_GlitchData12 : VitalGlitchDataType;
    variable DOB_GlitchData13 : VitalGlitchDataType;
    variable DOB_GlitchData14 : VitalGlitchDataType;
    variable DOB_GlitchData15 : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
     
  begin -- process
 
    if (FIRST_TIME) then 
        wait until (GSR_ipd = '1' or 
                    CLKA_ipd'last_value = '0' or CLKA_ipd'last_value = '1' or
                    CLKB_ipd'last_value = '0' or CLKB_ipd'last_value = '1');
        FIRST_TIME := FALSE; 
    end if; 

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA15_CLKA_posedge,
          TimingData              => Tmkr_DIA15_CLKA_posedge,
          TestSignal              => DIA_ipd(15),
          TestSignalName          => "DIA(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(15),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(15),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(15),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(15),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA14_CLKA_posedge,
          TimingData              => Tmkr_DIA14_CLKA_posedge,
          TestSignal              => DIA_ipd(14),
          TestSignalName          => "DIA(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(14),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(14),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(14),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(14),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA13_CLKA_posedge,
          TimingData              => Tmkr_DIA13_CLKA_posedge,
          TestSignal              => DIA_ipd(13),
          TestSignalName          => "DIA(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(13),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(13),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(13),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(13),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA12_CLKA_posedge,
          TimingData              => Tmkr_DIA12_CLKA_posedge,
          TestSignal              => DIA_ipd(12),
          TestSignalName          => "DIA(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(12),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(12),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(12),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(12),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA11_CLKA_posedge,
          TimingData              => Tmkr_DIA11_CLKA_posedge,
          TestSignal              => DIA_ipd(11),
          TestSignalName          => "DIA(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(11),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(11),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(11),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(11),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA10_CLKA_posedge,
          TimingData              => Tmkr_DIA10_CLKA_posedge,
          TestSignal              => DIA_ipd(10),
          TestSignalName          => "DIA(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(10),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(10),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(10),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(10),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA9_CLKA_posedge,
          TimingData              => Tmkr_DIA9_CLKA_posedge,
          TestSignal              => DIA_ipd(9),
          TestSignalName          => "DIA(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(9),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(9),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(9),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(9),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA8_CLKA_posedge,
          TimingData              => Tmkr_DIA8_CLKA_posedge,
          TestSignal              => DIA_ipd(8),
          TestSignalName          => "DIA(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(8),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(8),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(8),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(8),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA7_CLKA_posedge,
          TimingData              => Tmkr_DIA7_CLKA_posedge,
          TestSignal              => DIA_ipd(7),
          TestSignalName          => "DIA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(7),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA6_CLKA_posedge,
          TimingData              => Tmkr_DIA6_CLKA_posedge,
          TestSignal              => DIA_ipd(6),
          TestSignalName          => "DIA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(6),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA5_CLKA_posedge,
          TimingData              => Tmkr_DIA5_CLKA_posedge,
          TestSignal              => DIA_ipd(5),
          TestSignalName          => "DIA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(5),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA4_CLKA_posedge,
          TimingData              => Tmkr_DIA4_CLKA_posedge,
          TestSignal              => DIA_ipd(4),
          TestSignalName          => "DIA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(4),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA3_CLKA_posedge,
          TimingData              => Tmkr_DIA3_CLKA_posedge,
          TestSignal              => DIA_ipd(3),
          TestSignalName          => "DIA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(3),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA2_CLKA_posedge,
          TimingData              => Tmkr_DIA2_CLKA_posedge,
          TestSignal              => DIA_ipd(2),
          TestSignalName          => "DIA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(2),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA1_CLKA_posedge,
          TimingData              => Tmkr_DIA1_CLKA_posedge,
          TestSignal              => DIA_ipd(1),
          TestSignalName          => "DIA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(1),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIA0_CLKA_posedge,
          TimingData              => Tmkr_DIA0_CLKA_posedge,
          TestSignal              => DIA_ipd(0),
          TestSignalName          => "DIA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_DIA_CLKA_negedge_posedge(0),
          HoldLow                => thold_DIA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_DIA_CLKA_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENA_ipd) = '1' AND TO_X01(WEA_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB15_CLKB_posedge,
          TimingData              => Tmkr_DIB15_CLKB_posedge,
          TestSignal              => DIB_ipd(15),
          TestSignalName          => "DIB(15)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(15),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(15),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(15),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(15),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB14_CLKB_posedge,
          TimingData              => Tmkr_DIB14_CLKB_posedge,
          TestSignal              => DIB_ipd(14),
          TestSignalName          => "DIB(14)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(14),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(14),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(14),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(14),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB13_CLKB_posedge,
          TimingData              => Tmkr_DIB13_CLKB_posedge,
          TestSignal              => DIB_ipd(13),
          TestSignalName          => "DIB(13)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(13),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(13),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(13),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(13),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB12_CLKB_posedge,
          TimingData              => Tmkr_DIB12_CLKB_posedge,
          TestSignal              => DIB_ipd(12),
          TestSignalName          => "DIB(12)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(12),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(12),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(12),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(12),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB11_CLKB_posedge,
          TimingData              => Tmkr_DIB11_CLKB_posedge,
          TestSignal              => DIB_ipd(11),
          TestSignalName          => "DIB(11)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(11),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(11),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(11),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(11),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB10_CLKB_posedge,
          TimingData              => Tmkr_DIB10_CLKB_posedge,
          TestSignal              => DIB_ipd(10),
          TestSignalName          => "DIB(10)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(10),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(10),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(10),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(10),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB9_CLKB_posedge,
          TimingData              => Tmkr_DIB9_CLKB_posedge,
          TestSignal              => DIB_ipd(9),
          TestSignalName          => "DIB(9)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(9),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(9),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(9),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(9),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB8_CLKB_posedge,
          TimingData              => Tmkr_DIB8_CLKB_posedge,
          TestSignal              => DIB_ipd(8),
          TestSignalName          => "DIB(8)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(8),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(8),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(8),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(8),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB7_CLKB_posedge,
          TimingData              => Tmkr_DIB7_CLKB_posedge,
          TestSignal              => DIB_ipd(7),
          TestSignalName          => "DIB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(7),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(7),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB6_CLKB_posedge,
          TimingData              => Tmkr_DIB6_CLKB_posedge,
          TestSignal              => DIB_ipd(6),
          TestSignalName          => "DIB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(6),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(6),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB5_CLKB_posedge,
          TimingData              => Tmkr_DIB5_CLKB_posedge,
          TestSignal              => DIB_ipd(5),
          TestSignalName          => "DIB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(5),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(5),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB4_CLKB_posedge,
          TimingData              => Tmkr_DIB4_CLKB_posedge,
          TestSignal              => DIB_ipd(4),
          TestSignalName          => "DIB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(4),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(4),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB3_CLKB_posedge,
          TimingData              => Tmkr_DIB3_CLKB_posedge,
          TestSignal              => DIB_ipd(3),
          TestSignalName          => "DIB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(3),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(3),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB2_CLKB_posedge,
          TimingData              => Tmkr_DIB2_CLKB_posedge,
          TestSignal              => DIB_ipd(2),
          TestSignalName          => "DIB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(2),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(2),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB1_CLKB_posedge,
          TimingData              => Tmkr_DIB1_CLKB_posedge,
          TestSignal              => DIB_ipd(1),
          TestSignalName          => "DIB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(1),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(1),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_DIB0_CLKB_posedge,
          TimingData              => Tmkr_DIB0_CLKB_posedge,
          TestSignal              => DIB_ipd(0),
          TestSignalName          => "DIB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_DIB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_DIB_CLKB_negedge_posedge(0),
          HoldLow                => thold_DIB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_DIB_CLKB_negedge_posedge(0),
          CheckEnabled            => (TO_X01(ENB_ipd) = '1' AND TO_X01(WEB_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEA_CLKA_posedge,
          TimingData              => Tmkr_WEA_CLKA_posedge,
          TestSignal              => WEA_ipd,
          TestSignalName          => "WEA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEA_CLKA_posedge_posedge,
          SetupLow                => tsetup_WEA_CLKA_negedge_posedge,
          HoldLow                => thold_WEA_CLKA_posedge_posedge,
          HoldHigh                 => thold_WEA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WEB_CLKB_posedge,
          TimingData              => Tmkr_WEB_CLKB_posedge,
          TestSignal              => WEB_ipd,
          TestSignalName          => "WEB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WEB_CLKB_posedge_posedge,
          SetupLow                => tsetup_WEB_CLKB_negedge_posedge,
          HoldLow                => thold_WEB_CLKB_posedge_posedge,
          HoldHigh                 => thold_WEB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENA_CLKA_posedge,
          TimingData              => Tmkr_ENA_CLKA_posedge,
          TestSignal              => ENA_ipd,
          TestSignalName          => "ENA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENA_CLKA_posedge_posedge,
          SetupLow                => tsetup_ENA_CLKA_negedge_posedge,
          HoldLow                => thold_ENA_CLKA_posedge_posedge,
          HoldHigh                 => thold_ENA_CLKA_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ENB_CLKB_posedge,
          TimingData              => Tmkr_ENB_CLKB_posedge,
          TestSignal              => ENB_ipd,
          TestSignalName          => "ENB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ENB_CLKB_posedge_posedge,
          SetupLow                => tsetup_ENB_CLKB_negedge_posedge,
          HoldLow                => thold_ENB_CLKB_posedge_posedge,
          HoldHigh                 => thold_ENB_CLKB_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTA_CLKA_posedge,
          TimingData              => Tmkr_RSTA_CLKA_posedge,
          TestSignal              => RSTA_ipd,
          TestSignalName          => "RSTA",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTA_CLKA_posedge_posedge,
          SetupLow                => tsetup_RSTA_CLKA_negedge_posedge,
          HoldLow                => thold_RSTA_CLKA_posedge_posedge,
          HoldHigh                 => thold_RSTA_CLKA_negedge_posedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_RSTB_CLKB_posedge,
          TimingData              => Tmkr_RSTB_CLKB_posedge,
          TestSignal              => RSTB_ipd,
          TestSignalName          => "RSTB",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_RSTB_CLKB_posedge_posedge,
          SetupLow                => tsetup_RSTB_CLKB_negedge_posedge,
          HoldLow                => thold_RSTB_CLKB_posedge_posedge,
          HoldHigh                 => thold_RSTB_CLKB_negedge_posedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKA_posedge,
          TimingData              => Tmkr_GSR_CLKA_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName          => "CLKA",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKA_negedge_posedge,
          Removal                 => thold_GSR_CLKA_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_GSR_CLKB_posedge,
          TimingData              => Tmkr_GSR_CLKB_posedge,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName          => "CLKB",
          RefDelay                => 0 ns,
          Recovery                => trecovery_GSR_CLKB_negedge_posedge,
          Removal                 => thold_GSR_CLKB_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CLKB_CLKA_posedge,
          TimingData              => Tmkr_CLKB_CLKA_posedge,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CLKB_CLKA_posedge_posedge,
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck ( 
          Violation               => Tviol_CLKA_CLKB_posedge, 
          TimingData              => Tmkr_CLKA_CLKB_posedge, 
          TestSignal              => CLKA_ipd, 
          TestSignalName          => "CLKA", 
          TestDelay               => 0 ns, 
          RefSignal               => CLKB_ipd, 
          RefSignalName           => "CLKB", 
          RefDelay                => 0 ns, 
          SetupHigh               => tsetup_CLKA_CLKB_posedge_posedge, 
          CheckEnabled            => ((TO_X01(ENA_ipd) = '1' AND TO_X01(ENB_ipd) = '1') AND
                                      (TO_X01(WEA_ipd) = '1' OR  TO_X01(WEB_ipd) = '1')),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => TRUE,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA7_CLKA_posedge,
          TimingData              => Tmkr_ADDRA7_CLKA_posedge,
          TestSignal              => ADDRA_ipd(7),
          TestSignalName          => "ADDRA(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(7),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(7),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(7),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA6_CLKA_posedge,
          TimingData              => Tmkr_ADDRA6_CLKA_posedge,
          TestSignal              => ADDRA_ipd(6),
          TestSignalName          => "ADDRA(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(6),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(6),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(6),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA5_CLKA_posedge,
          TimingData              => Tmkr_ADDRA5_CLKA_posedge,
          TestSignal              => ADDRA_ipd(5),
          TestSignalName          => "ADDRA(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(5),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(5),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(5),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA4_CLKA_posedge,
          TimingData              => Tmkr_ADDRA4_CLKA_posedge,
          TestSignal              => ADDRA_ipd(4),
          TestSignalName          => "ADDRA(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(4),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(4),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(4),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA3_CLKA_posedge,
          TimingData              => Tmkr_ADDRA3_CLKA_posedge,
          TestSignal              => ADDRA_ipd(3),
          TestSignalName          => "ADDRA(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(3),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(3),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(3),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA2_CLKA_posedge,
          TimingData              => Tmkr_ADDRA2_CLKA_posedge,
          TestSignal              => ADDRA_ipd(2),
          TestSignalName          => "ADDRA(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(2),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(2),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(2),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA1_CLKA_posedge,
          TimingData              => Tmkr_ADDRA1_CLKA_posedge,
          TestSignal              => ADDRA_ipd(1),
          TestSignalName          => "ADDRA(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(1),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(1),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(1),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRA0_CLKA_posedge,
          TimingData              => Tmkr_ADDRA0_CLKA_posedge,
          TestSignal              => ADDRA_ipd(0),
          TestSignalName          => "ADDRA(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKA_ipd,
          RefSignalName           => "CLKA",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRA_CLKA_posedge_posedge(0),
          SetupLow                => tsetup_ADDRA_CLKA_negedge_posedge(0),
          HoldLow                => thold_ADDRA_CLKA_posedge_posedge(0),
          HoldHigh                 => thold_ADDRA_CLKA_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB7_CLKB_posedge,
          TimingData              => Tmkr_ADDRB7_CLKB_posedge,
          TestSignal              => ADDRB_ipd(7),
          TestSignalName          => "ADDRB(7)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(7),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(7),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(7),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(7),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB6_CLKB_posedge,
          TimingData              => Tmkr_ADDRB6_CLKB_posedge,
          TestSignal              => ADDRB_ipd(6),
          TestSignalName          => "ADDRB(6)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(6),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(6),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(6),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(6),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB5_CLKB_posedge,
          TimingData              => Tmkr_ADDRB5_CLKB_posedge,
          TestSignal              => ADDRB_ipd(5),
          TestSignalName          => "ADDRB(5)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(5),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(5),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(5),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(5),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB4_CLKB_posedge,
          TimingData              => Tmkr_ADDRB4_CLKB_posedge,
          TestSignal              => ADDRB_ipd(4),
          TestSignalName          => "ADDRB(4)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(4),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(4),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(4),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(4),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB3_CLKB_posedge,
          TimingData              => Tmkr_ADDRB3_CLKB_posedge,
          TestSignal              => ADDRB_ipd(3),
          TestSignalName          => "ADDRB(3)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(3),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(3),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(3),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(3),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB2_CLKB_posedge,
          TimingData              => Tmkr_ADDRB2_CLKB_posedge,
          TestSignal              => ADDRB_ipd(2),
          TestSignalName          => "ADDRB(2)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(2),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(2),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(2),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(2),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB1_CLKB_posedge,
          TimingData              => Tmkr_ADDRB1_CLKB_posedge,
          TestSignal              => ADDRB_ipd(1),
          TestSignalName          => "ADDRB(1)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(1),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(1),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(1),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(1),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADDRB0_CLKB_posedge,
          TimingData              => Tmkr_ADDRB0_CLKB_posedge,
          TestSignal              => ADDRB_ipd(0),
          TestSignalName          => "ADDRB(0)",
          TestDelay               => 0 ns,
          RefSignal               => CLKB_ipd,
          RefSignalName           => "CLKB",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADDRB_CLKB_posedge_posedge(0),
          SetupLow                => tsetup_ADDRB_CLKB_negedge_posedge(0),
          HoldLow                => thold_ADDRB_CLKB_posedge_posedge(0),
          HoldHigh                 => thold_ADDRB_CLKB_negedge_posedge(0),
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKA,
          PeriodData              => PInfo_CLKA,
          TestSignal              => CLKA_ipd,
          TestSignalName          => "CLKA",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKA_posedge,
          PulseWidthLow           => tpw_CLKA_negedge,
          CheckEnabled            => TO_X01(ENA_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLKB,
          PeriodData              => PInfo_CLKB,
          TestSignal              => CLKB_ipd,
          TestSignalName          => "CLKB",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLKB_posedge,
          PulseWidthLow           => tpw_CLKB_negedge,
          CheckEnabled            => TO_X01(ENB_ipd) = '1',
          HeaderMsg               => InstancePath &"/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck ( 
          Violation               => Pviol_GSR,
          PeriodData              => PInfo_GSR,
          TestSignal              => GSR_ipd,
          TestSignalName          => "GSR",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_GSR_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMB4_S16_S16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);
 
    end if;

    Violation := Tviol_DIA15_CLKA_posedge  or Tviol_DIA14_CLKA_posedge  or 
                 Tviol_DIA13_CLKA_posedge  or Tviol_DIA12_CLKA_posedge  or
                 Tviol_DIA11_CLKA_posedge  or Tviol_DIA10_CLKA_posedge  or
                 Tviol_DIA9_CLKA_posedge   or Tviol_DIA8_CLKA_posedge   or
                 Tviol_DIA7_CLKA_posedge   or Tviol_DIA6_CLKA_posedge   or
                 Tviol_DIA5_CLKA_posedge   or Tviol_DIA4_CLKA_posedge   or
                 Tviol_DIA3_CLKA_posedge   or Tviol_DIA2_CLKA_posedge   or
                 Tviol_DIA1_CLKA_posedge   or Tviol_DIA0_CLKA_posedge   or

                 Tviol_ENA_CLKA_posedge    or Tviol_WEA_CLKA_posedge    or
                 Tviol_RSTA_CLKA_posedge   or

                 Tviol_ADDRA7_CLKA_posedge or Tviol_ADDRA6_CLKA_posedge or
                 Tviol_ADDRA5_CLKA_posedge or Tviol_ADDRA4_CLKA_posedge or
                 Tviol_ADDRA3_CLKA_posedge or Tviol_ADDRA2_CLKA_posedge or
                 Tviol_ADDRA1_CLKA_posedge or Tviol_ADDRA0_CLKA_posedge or 

                 Pviol_CLKA                or

                 Tviol_DIB15_CLKB_posedge  or Tviol_DIB14_CLKB_posedge  or 
                 Tviol_DIB13_CLKB_posedge  or Tviol_DIB12_CLKB_posedge  or
                 Tviol_DIB11_CLKB_posedge  or Tviol_DIB10_CLKB_posedge  or
                 Tviol_DIB9_CLKB_posedge   or Tviol_DIB8_CLKB_posedge   or
                 Tviol_DIB7_CLKB_posedge   or Tviol_DIB6_CLKB_posedge   or
                 Tviol_DIB5_CLKB_posedge   or Tviol_DIB4_CLKB_posedge   or
                 Tviol_DIB3_CLKB_posedge   or Tviol_DIB2_CLKB_posedge   or
                 Tviol_DIB1_CLKB_posedge   or Tviol_DIB0_CLKB_posedge   or

                 Tviol_ENB_CLKB_posedge    or Tviol_WEB_CLKB_posedge    or
                 Tviol_RSTB_CLKB_posedge   or

                 Tviol_ADDRB7_CLKB_posedge or Tviol_ADDRB6_CLKB_posedge or
                 Tviol_ADDRB5_CLKB_posedge or Tviol_ADDRB4_CLKB_posedge or
                 Tviol_ADDRB3_CLKB_posedge or Tviol_ADDRB2_CLKB_posedge or
                 Tviol_ADDRB1_CLKB_posedge or Tviol_ADDRB0_CLKB_posedge or

                 Pviol_CLKB;

    -------------------------
    --  Functionality Section
    -------------------------

    VALID_ADDRA := ADDR_IS_VALID(ADDRA_ipd);
    VALID_ADDRB := ADDR_IS_VALID(ADDRB_ipd);

    if (VALID_ADDRA) then
        ADDRESS_A := CONV_INTEGER(ADDRA_ipd);
    end if;

    if (VALID_ADDRB) then
        ADDRESS_B := CONV_INTEGER(ADDRB_ipd);
    end if;

    if (VALID_ADDRA AND VALID_ADDRB) then
        ADDR_OVERLAP (ADDRESS_A, ADDRESS_B, DIAW, DIBW, HAS_OVERLAP, 
        OLP_LSB, OLP_MSB, DOA_OV_LSB, DOA_OV_MSB, DOB_OV_LSB, DOB_OV_MSB);
    end if;

    --
    -- Port A
    --
    if (GSR_ipd = '1') then
        DOA_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENA_ipd = '1') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value = '0') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd = '1') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := DIA_ipd;
                            DOA_zd := DIA_ipd;
                            if (ENB_ipd = '1' AND VALID_ADDRB AND HAS_OVERLAP) then
                                if (Tviol_CLKB_CLKA_posedge = 'X') then
                                    if (WEB_ipd /= '0') then
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "write", 
                                        "port A", "port B", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others =>'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    else
                                        COLLISION (ADDRA_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port A", "port B", InstancePath, MEM);
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others =>'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            DOA_zd := (others => 'X');
                        end if;
                    elsif (WEA_ipd = 'X') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                        DOA_zd := (others => 'X');
                    else 
                        if (VALID_ADDRA) then
                            DOA_zd := MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW));
                        else
                            DOA_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTA_ipd = '1') then
                        DOA_zd := (others => '0');
                    elsif (RSTA_ipd = 'X') then
                        DOA_zd := (others => 'X');
                    end if;
                elsif (CLKA_ipd = 'X') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if; 
            elsif (CLKA_ipd'event AND CLKA_ipd'last_value = 'X') then
                if (CLKA_ipd = '1') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENA_ipd = 'X') then
            if (CLKA_ipd'event AND CLKA_ipd'last_value /= '1') then
                if (CLKA_ipd /= '0') then
                    if (WEA_ipd /= '0') then
                        if (VALID_ADDRA) then
                            MEM((ADDRESS_A*DIAW + DIAW_1) downto (ADDRESS_A*DIAW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRA_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOA_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOA_zd := (others => 'X');
    end if; 
    
    --
    -- Port B
    --
    if (GSR_ipd = '1') then
        DOB_zd := (others => '0');
    elsif (GSR_ipd = '0') then
        if (ENB_ipd = '1') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value = '0') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd = '1') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := DIB_ipd;
                            DOB_zd := DIB_ipd;
                            if (ENA_ipd = '1' AND VALID_ADDRA AND HAS_OVERLAP) then
                                if (Tviol_CLKA_CLKB_posedge = 'X') then
                                    if (WEA_ipd /= '0') then
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "write",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                        DOB_zd (DOB_OV_MSB downto DOB_OV_LSB) := (others => 'X');
                                    else
                                        COLLISION (ADDRB_ipd, OLP_LSB, OLP_MSB, "read",
                                        "port B", "port A", InstancePath, MEM);
                                        DOA_zd (DOA_OV_MSB downto DOA_OV_LSB) := (others => 'X');
                                    end if;
                                end if;
                            end if;
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            DOB_zd := (others => 'X');
                        end if;
                    elsif (WEB_ipd = 'X') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                        DOB_zd := (others => 'X');
                    else 
                        if (VALID_ADDRB) then
                            DOB_zd := MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW));
                        else
                            DOB_zd := (others => 'X');
                        end if;
                    end if;
                    if (RSTB_ipd = '1') then
                        DOB_zd := (others => '0');
                    elsif (RSTB_ipd = 'X') then
                        DOB_zd := (others => 'X');
                    end if;
                elsif (CLKB_ipd = 'X') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if; 
            elsif (CLKB_ipd'event AND CLKB_ipd'last_value = 'X') then
                if (CLKB_ipd = '1') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        elsif (ENB_ipd = 'X') then
            if (CLKB_ipd'event AND CLKB_ipd'last_value /= '1') then
                if (CLKB_ipd /= '0') then
                    if (WEB_ipd /= '0') then
                        if (VALID_ADDRB) then
                            MEM((ADDRESS_B*DIBW + DIBW_1) downto (ADDRESS_B*DIBW)) := (others => 'X');
                        else
                            SET_MEM_TO_X(ADDRB_ipd, MEM);
                            MEM := (others => 'X');
                        end if;
                    end if;
                    DOB_zd := (others => 'X');
                end if;
            end if; 
        end if; 
    else
        DOB_zd := (others => 'X');
    end if;

    DOA_zd(15) := Violation XOR DOA_zd(15);
    DOA_zd(14) := Violation XOR DOA_zd(14);
    DOA_zd(13) := Violation XOR DOA_zd(13);
    DOA_zd(12) := Violation XOR DOA_zd(12);
    DOA_zd(11) := Violation XOR DOA_zd(11);
    DOA_zd(10) := Violation XOR DOA_zd(10);
    DOA_zd(9)  := Violation XOR DOA_zd(9);
    DOA_zd(8)  := Violation XOR DOA_zd(8);
    DOA_zd(7)  := Violation XOR DOA_zd(7);
    DOA_zd(6)  := Violation XOR DOA_zd(6);
    DOA_zd(5)  := Violation XOR DOA_zd(5);
    DOA_zd(4)  := Violation XOR DOA_zd(4);
    DOA_zd(3)  := Violation XOR DOA_zd(3);
    DOA_zd(2)  := Violation XOR DOA_zd(2);
    DOA_zd(1)  := Violation XOR DOA_zd(1);
    DOA_zd(0)  := Violation XOR DOA_zd(0);

    DOB_zd(15) := Violation XOR DOB_zd(15);
    DOB_zd(14) := Violation XOR DOB_zd(14);
    DOB_zd(13) := Violation XOR DOB_zd(13);
    DOB_zd(12) := Violation XOR DOB_zd(12);
    DOB_zd(11) := Violation XOR DOB_zd(11);
    DOB_zd(10) := Violation XOR DOB_zd(10);
    DOB_zd(9)  := Violation XOR DOB_zd(9);
    DOB_zd(8)  := Violation XOR DOB_zd(8);
    DOB_zd(7)  := Violation XOR DOB_zd(7);
    DOB_zd(6)  := Violation XOR DOB_zd(6);
    DOB_zd(5)  := Violation XOR DOB_zd(5);
    DOB_zd(4)  := Violation XOR DOB_zd(4);
    DOB_zd(3)  := Violation XOR DOB_zd(3);
    DOB_zd(2)  := Violation XOR DOB_zd(2);
    DOB_zd(1)  := Violation XOR DOB_zd(1);
    DOB_zd(0)  := Violation XOR DOB_zd(0);

    ----------------------
    --  Path Delay Section
    ----------------------

    VitalPathDelay01 (
      OutSignal => DOA(15),
      GlitchData => DOA_GlitchData15,
      OutSignalName => "DOA(15)",
      OutTemp => DOA_zd(15),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(15),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(15),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(14),
      GlitchData => DOA_GlitchData14,
      OutSignalName => "DOA(14)",
      OutTemp => DOA_zd(14),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(14),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(14),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(13),
      GlitchData => DOA_GlitchData13,
      OutSignalName => "DOA(13)",
      OutTemp => DOA_zd(13),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(13),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(13),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(12),
      GlitchData => DOA_GlitchData12,
      OutSignalName => "DOA(12)",
      OutTemp => DOA_zd(12),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(12),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(12),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(11),
      GlitchData => DOA_GlitchData11,
      OutSignalName => "DOA(11)",
      OutTemp => DOA_zd(11),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(11),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(11),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(10),
      GlitchData => DOA_GlitchData10,
      OutSignalName => "DOA(10)",
      OutTemp => DOA_zd(10),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(10),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(10),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(9),
      GlitchData => DOA_GlitchData9,
      OutSignalName => "DOA(9)",
      OutTemp => DOA_zd(9),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(9),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(9),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(8),
      GlitchData => DOA_GlitchData8,
      OutSignalName => "DOA(8)",
      OutTemp => DOA_zd(8),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(8),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(8),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(7),
      GlitchData => DOA_GlitchData7,
      OutSignalName => "DOA(7)",
      OutTemp => DOA_zd(7),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(6),
      GlitchData => DOA_GlitchData6,
      OutSignalName => "DOA(6)",
      OutTemp => DOA_zd(6),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(5),
      GlitchData => DOA_GlitchData5,
      OutSignalName => "DOA(5)",
      OutTemp => DOA_zd(5),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(4),
      GlitchData => DOA_GlitchData4,
      OutSignalName => "DOA(4)",
      OutTemp => DOA_zd(4),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOA(3),
      GlitchData => DOA_GlitchData3,
      OutSignalName => "DOA(3)",
      OutTemp => DOA_zd(3),
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(2),
      GlitchData => DOA_GlitchData2,
      OutSignalName => "DOA(2)",    
      OutTemp => DOA_zd(2),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(1),
      GlitchData => DOA_GlitchData1,
      OutSignalName => "DOA(1)",    
      OutTemp => DOA_zd(1),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOA(0),
      GlitchData => DOA_GlitchData0,
      OutSignalName => "DOA(0)",    
      OutTemp => DOA_zd(0),  
      Paths => (0 => (CLKA_ipd'last_event,  tpd_CLKA_DOA(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOA(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(15),
      GlitchData => DOB_GlitchData15,
      OutSignalName => "DOB(15)",
      OutTemp => DOB_zd(15),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(15),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(15),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(14),
      GlitchData => DOB_GlitchData14,
      OutSignalName => "DOB(14)",
      OutTemp => DOB_zd(14),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(14),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(14),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(13),
      GlitchData => DOB_GlitchData13,
      OutSignalName => "DOB(13)",
      OutTemp => DOB_zd(13),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(13),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(13),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(12),
      GlitchData => DOB_GlitchData12,
      OutSignalName => "DOB(12)",
      OutTemp => DOB_zd(12),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(12),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(12),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(11),
      GlitchData => DOB_GlitchData11,
      OutSignalName => "DOB(11)",
      OutTemp => DOB_zd(11),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(11),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(11),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(10),
      GlitchData => DOB_GlitchData10,
      OutSignalName => "DOB(10)",
      OutTemp => DOB_zd(10),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(10),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(10),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(9),
      GlitchData => DOB_GlitchData9,
      OutSignalName => "DOB(9)",
      OutTemp => DOB_zd(9),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(9),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(9),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(8),
      GlitchData => DOB_GlitchData8,
      OutSignalName => "DOB(8)",
      OutTemp => DOB_zd(8),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(8),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(8),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(7),
      GlitchData => DOB_GlitchData7,
      OutSignalName => "DOB(7)",
      OutTemp => DOB_zd(7),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(7),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(7),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(6),
      GlitchData => DOB_GlitchData6,
      OutSignalName => "DOB(6)",
      OutTemp => DOB_zd(6),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(6),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(6),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(5),
      GlitchData => DOB_GlitchData5,
      OutSignalName => "DOB(5)",
      OutTemp => DOB_zd(5),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(5),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(5),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(4),
      GlitchData => DOB_GlitchData4,
      OutSignalName => "DOB(4)",
      OutTemp => DOB_zd(4),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(4),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(4),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (
      OutSignal => DOB(3),
      GlitchData => DOB_GlitchData3,
      OutSignalName => "DOB(3)",
      OutTemp => DOB_zd(3),
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(3),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(3),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(2),
      GlitchData => DOB_GlitchData2,
      OutSignalName => "DOB(2)",    
      OutTemp => DOB_zd(2),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(2),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(2),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(1),
      GlitchData => DOB_GlitchData1,
      OutSignalName => "DOB(1)",    
      OutTemp => DOB_zd(1),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(1),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(1),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    VitalPathDelay01 (   
      OutSignal => DOB(0),
      GlitchData => DOB_GlitchData0,
      OutSignalName => "DOB(0)",    
      OutTemp => DOB_zd(0),  
      Paths => (0 => (CLKB_ipd'last_event,  tpd_CLKB_DOB(0),  TRUE),
                1 => (GSR_ipd'last_event,   tpd_GSR_DOB(0),   TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on GSR_ipd, CLKA_ipd, CLKB_ipd, WEA_ipd, WEB_ipd, ENA_ipd, ENB_ipd,
            RSTA_ipd, RSTB_ipd, DIA_ipd, DIB_ipd, ADDRA_ipd, ADDRB_ipd;

  end process VITALBehavior;

end X_RAMB4_S16_S16_V;

configuration CFG_X_RAMB4_S16_S16_V of X_RAMB4_S16_S16 is
   for X_RAMB4_S16_S16_V
   end for;
end CFG_X_RAMB4_S16_S16_V;


----- CELL X_RAM16 -----
------------------------------------------
--
--  Xilinx X_RAM16 VITAL model
--
--  Dhimant Patel, March, 1996.
-----------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all;
use IEEE.VITAL_Primitives.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAM16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := True;

       -- VITAL input wire delays

       tipd_I      : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE     : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR0   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR1   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR2   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR3   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_I_O      : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_WE_O     : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR0_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR1_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR2_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR3_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);

       -- VITAL setup and hold times

       tsetup_I_WE_posedge_negedge    : VitalDelayType := 0.01 ns;
       tsetup_I_WE_negedge_negedge    : VitalDelayType := 0.01 ns;
       tsetup_ADR0_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR0_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_WE_negedge_posedge : VitalDelayType := 0.01 ns;

       thold_I_WE_posedge_negedge     : VitalDelayType := 0.01 ns;
       thold_I_WE_negedge_negedge     : VitalDelayType := 0.01 ns;
       thold_ADR0_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR0_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
  
       -- VITAL minimum pulse width
 
       tpw_WE_posedge : VitalDelayType := 0.01 ns;
       tpw_WE_negedge : VitalDelayType := 0.01 ns;
 
       INIT : bit_vector := X"0000"
  );

  port ( I   : in STD_ULOGIC;
        WE   : in STD_ULOGIC;
        ADR0 : in STD_ULOGIC;
        ADR1 : in STD_ULOGIC;
        ADR2 : in STD_ULOGIC;
        ADR3 : in STD_ULOGIC;

        O : out STD_ULOGIC
       ); 
attribute VITAL_LEVEL0 of X_RAM16 : entity is TRUE;

end X_RAM16;

-----------------------------------------------------------------------------

architecture X_RAM16_V of X_RAM16 is

  -- Local signals used to propagate input wire delay
 
  signal I_ipd      : std_ulogic := 'X';
  signal WE_ipd     : std_ulogic := 'X';
  signal ADR0_ipd   : std_ulogic := 'X';
  signal ADR1_ipd   : std_ulogic := 'X';
  signal ADR2_ipd   : std_ulogic := 'X';
  signal ADR3_ipd   : std_ulogic := 'X';

 
begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (I_ipd,      I,      tipd_I);
    VitalWireDelay (WE_ipd,     WE,     tipd_WE);
    VitalWireDelay (ADR0_ipd,   ADR0,   tipd_ADR0);
    VitalWireDelay (ADR1_ipd,   ADR1,   tipd_ADR1);
    VitalWireDelay (ADR2_ipd,   ADR2,   tipd_ADR2);
    VitalWireDelay (ADR3_ipd,   ADR3,   tipd_ADR3);
  end block;

  -------------------
  -- X_RAM16 behavior
  -------------------
--VITALBehavior : process ( WE_ipd, I_ipd, ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd )
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_I_WE_negedge    : std_ulogic := '0';
    variable Tviol_ADR0_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR0_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR1_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR1_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR2_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR2_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR3_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR3_WE_negedge : std_ulogic := '0';

    variable Tmkr_I_WE_negedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR0_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR0_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR1_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR1_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR2_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR2_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR3_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR3_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_WE : std_ulogic := '0';
    variable PInfo_WE : VitalPeriodDataType := VitalPeriodDataInit;
 
    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable INIT_BITS : std_logic_vector(15 downto 0) := To_StdLogicVector(INIT);
    variable MEM : std_logic_vector( 16 downto 0 ) := ('X' & INIT_BITS(15 downto 0));
    variable Index : integer := 16;
    variable PrevData : std_logic_vector(0 to 1) := (others => '0');
    variable O_zd : std_ulogic := 'X';
    variable O_GlitchData : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process

    if (FIRST_TIME) then
        wait until ((WE_ipd   = '0' or WE_ipd   = '1') and
                    (ADR3_ipd = '0' or ADR3_ipd = '1') and
                    (ADR2_ipd = '0' or ADR2_ipd = '1') and
                    (ADR1_ipd = '0' or ADR1_ipd = '1') and
                    (ADR0_ipd = '0' or ADR0_ipd = '1'));
        Index      := DECODE_ADDR4(ADDRESS => (ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));
        O_zd       := MEM(Index);
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then
 
         VitalSetupHoldCheck (
          Violation               => Tviol_I_WE_negedge,
          TimingData              => Tmkr_I_WE_negedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_WE_posedge_negedge,
          SetupLow                => tsetup_I_WE_negedge_negedge,
          HoldHigh                => thold_I_WE_posedge_negedge,
          HoldLow                 => thold_I_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR0_WE_posedge,
          TimingData              => Tmkr_ADR0_WE_posedge,
          TestSignal              => ADR0_ipd,
          TestSignalName          => "ADR0",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR0_WE_posedge_posedge,
          SetupLow                => tsetup_ADR0_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR0_WE_negedge,
          TimingData              => Tmkr_ADR0_WE_negedge,
          TestSignal              => ADR0_ipd,
          TestSignalName          => "ADR0",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR0_WE_posedge_negedge,
          HoldLow                 => thold_ADR0_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR1_WE_posedge,
          TimingData              => Tmkr_ADR1_WE_posedge,
          TestSignal              => ADR1_ipd,
          TestSignalName          => "ADR1",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR1_WE_posedge_posedge,
          SetupLow                => tsetup_ADR1_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR1_WE_negedge,
          TimingData              => Tmkr_ADR1_WE_negedge,
          TestSignal              => ADR1_ipd,
          TestSignalName          => "ADR1",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR1_WE_posedge_negedge,
          HoldLow                 => thold_ADR1_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR2_WE_posedge,
          TimingData              => Tmkr_ADR2_WE_posedge,
          TestSignal              => ADR2_ipd,
          TestSignalName          => "ADR2",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR2_WE_posedge_posedge,
          SetupLow                => tsetup_ADR2_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR2_WE_negedge,
          TimingData              => Tmkr_ADR2_WE_negedge,
          TestSignal              => ADR2_ipd,
          TestSignalName          => "ADR2",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR2_WE_posedge_negedge,
          HoldLow                 => thold_ADR2_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR3_WE_posedge,
          TimingData              => Tmkr_ADR3_WE_posedge,
          TestSignal              => ADR3_ipd,
          TestSignalName          => "ADR3",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR3_WE_posedge_posedge,
          SetupLow                => tsetup_ADR3_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR3_WE_negedge,
          TimingData              => Tmkr_ADR3_WE_negedge,
          TestSignal              => ADR3_ipd,
          TestSignalName          => "ADR3",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR3_WE_posedge_negedge,
          HoldLow                 => thold_ADR3_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_WE,
          PeriodData              => PInfo_WE,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_WE_posedge,
          PulseWidthLow           => tpw_WE_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAM16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_ADR0_WE_posedge or Tviol_ADR0_WE_negedge or
                 Tviol_ADR1_WE_posedge or Tviol_ADR1_WE_negedge or
                 Tviol_ADR2_WE_posedge or Tviol_ADR2_WE_negedge or
                 Tviol_ADR3_WE_posedge or Tviol_ADR3_WE_negedge or
                 Tviol_I_WE_negedge    or Pviol_WE;

    if(WE_ipd = '1' and 
       (ADR0_ipd'event or ADR1_ipd'event or ADR2_ipd'event or ADR3_ipd'event)) then
          assert false
          report "Address changed during high WE"
          severity warning;
          Violation := 'X';
    end if;
    
    -------------------------
    --  Functionality Section
    -------------------------

    Index := DECODE_ADDR4(ADDRESS => (ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));

    O_zd := MEM(Index);

    VitalStateTable(Result => O_zd, 
                    PreviousDataIn => PrevData,
                    StateTable => X_RAM_O_tab,
                    DataIn => (I_ipd, WE_ipd));
 
    O_zd := Violation XOR O_zd;
    
    MEM(Index) := O_zd;

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => O,
      GlitchData => O_GlitchData,
      OutSignalName => "O",
      OutTemp => O_zd,
      Paths => (0 => (WE_ipd'last_event, tpd_WE_O, TRUE),
                1 => (I_ipd'last_event,  tpd_I_O,  TRUE),
                2 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                3 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE),
                4 => (ADR2_ipd'last_event, tpd_ADR2_O, TRUE),
                5 => (ADR3_ipd'last_event, tpd_ADR3_O, TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

      wait on WE_ipd, I_ipd, ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd;

  end process VITALBehavior;
 
end X_RAM16_V;

configuration CFG_X_RAM16_V of X_RAM16 is
   for X_RAM16_V
   end for;
end CFG_X_RAM16_V;
 

----- CELL X_RAM32 -----
------------------------------------------
--
--  Xilinx X_RAM32 VITAL model
--
--  Dhimant Patel, March, 1996.
-----------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all;
use IEEE.VITAL_Primitives.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAM32 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := True;

       -- VITAL input wire delays

       tipd_I      : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE     : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR0   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR1   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR2   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR3   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR4   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_I_O      : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_WE_O     : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR0_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR1_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR2_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR3_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR4_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);

       -- VITAL setup and hold times

       tsetup_I_WE_posedge_negedge    : VitalDelayType := 0.01 ns;
       tsetup_I_WE_negedge_negedge    : VitalDelayType := 0.01 ns;
       tsetup_ADR0_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR0_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_WE_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR4_WE_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR4_WE_negedge_posedge : VitalDelayType := 0.01 ns;

       thold_I_WE_posedge_negedge     : VitalDelayType := 0.01 ns;
       thold_I_WE_negedge_negedge     : VitalDelayType := 0.01 ns;
       thold_ADR0_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR0_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR4_WE_posedge_negedge  : VitalDelayType := 0.01 ns;
       thold_ADR4_WE_negedge_negedge  : VitalDelayType := 0.01 ns;
 
       -- VITAL minimum pulse width
 
       tpw_WE_posedge : VitalDelayType := 0.01 ns;
       tpw_WE_negedge : VitalDelayType := 0.01 ns;
 
       INIT : bit_vector := X"00000000"
  );

  port ( I   : in STD_ULOGIC;
        WE   : in STD_ULOGIC;
        ADR0 : in STD_ULOGIC;
        ADR1 : in STD_ULOGIC;
        ADR2 : in STD_ULOGIC;
        ADR3 : in STD_ULOGIC;
        ADR4 : in STD_ULOGIC;

        O : out STD_ULOGIC
       ); 
attribute VITAL_LEVEL0 of X_RAM32 : entity is TRUE;

end X_RAM32;

-----------------------------------------------------------------------------

architecture X_RAM32_V of X_RAM32 is

  -- Local signals used to propagate input wire delay
 
  signal I_ipd      : std_ulogic := 'X';
  signal WE_ipd     : std_ulogic := 'X';
  signal ADR0_ipd   : std_ulogic := 'X';
  signal ADR1_ipd   : std_ulogic := 'X';
  signal ADR2_ipd   : std_ulogic := 'X';
  signal ADR3_ipd   : std_ulogic := 'X';
  signal ADR4_ipd   : std_ulogic := 'X';
 
 
begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (I_ipd,      I,    tipd_I);
    VitalWireDelay (WE_ipd,     WE,   tipd_WE);
    VitalWireDelay (ADR0_ipd,   ADR0,   tipd_ADR0);
    VitalWireDelay (ADR1_ipd,   ADR1,   tipd_ADR1);
    VitalWireDelay (ADR2_ipd,   ADR2,   tipd_ADR2);
    VitalWireDelay (ADR3_ipd,   ADR3,   tipd_ADR3);
    VitalWireDelay (ADR4_ipd,   ADR4,   tipd_ADR4);
  end block;

  -------------------
  -- X_RAM32 behavior
  -------------------
--VITALBehavior : process ( WE_ipd, I_ipd, ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd, ADR4_ipd )
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_I_WE_negedge    : std_ulogic := '0';
    variable Tviol_ADR0_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR0_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR1_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR1_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR2_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR2_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR3_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR3_WE_negedge : std_ulogic := '0';
    variable Tviol_ADR4_WE_posedge : std_ulogic := '0';
    variable Tviol_ADR4_WE_negedge : std_ulogic := '0';

    variable Tmkr_I_WE_negedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR0_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR0_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR1_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR1_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR2_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR2_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR3_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR3_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR4_WE_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR4_WE_negedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_WE : std_ulogic := '0';
    variable PInfo_WE : VitalPeriodDataType := VitalPeriodDataInit;
 
    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable INIT_BITS : std_logic_vector(31 downto 0) := To_StdLogicVector(INIT);
    variable MEM : std_logic_vector( 32 downto 0 ) := ('X' & INIT_BITS(31 downto 0));
    variable Index : integer := 32;
    variable PrevData : std_logic_vector(0 to 1) := (others => '0');
    variable O_zd : std_ulogic := 'X';
    variable O_GlitchData : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;
 
  begin -- process

    if (FIRST_TIME) then 
        wait until ((WE_ipd   = '0' or WE_ipd   = '1') and 
                    (ADR4_ipd = '0' or ADR4_ipd = '1') and 
                    (ADR3_ipd = '0' or ADR3_ipd = '1') and 
                    (ADR2_ipd = '0' or ADR2_ipd = '1') and 
                    (ADR1_ipd = '0' or ADR1_ipd = '1') and 
                    (ADR0_ipd = '0' or ADR0_ipd = '1')); 
        Index      := DECODE_ADDR5(ADDRESS => (ADR4_ipd, ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd)); 
        O_zd       := MEM(Index); 
        FIRST_TIME := FALSE; 
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then
 
         VitalSetupHoldCheck (
          Violation               => Tviol_I_WE_negedge,
          TimingData              => Tmkr_I_WE_negedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_WE_posedge_negedge,
          SetupLow                => tsetup_I_WE_negedge_negedge,
          HoldHigh                => thold_I_WE_posedge_negedge,
          HoldLow                 => thold_I_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR0_WE_posedge,
          TimingData              => Tmkr_ADR0_WE_posedge,
          TestSignal              => ADR0_ipd,
          TestSignalName          => "ADR0",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR0_WE_posedge_posedge,
          SetupLow                => tsetup_ADR0_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR0_WE_negedge,
          TimingData              => Tmkr_ADR0_WE_negedge,
          TestSignal              => ADR0_ipd,
          TestSignalName          => "ADR0",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR0_WE_posedge_negedge,
          HoldLow                 => thold_ADR0_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR1_WE_posedge,
          TimingData              => Tmkr_ADR1_WE_posedge,
          TestSignal              => ADR1_ipd,
          TestSignalName          => "ADR1",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR1_WE_posedge_posedge,
          SetupLow                => tsetup_ADR1_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR1_WE_negedge,
          TimingData              => Tmkr_ADR1_WE_negedge,
          TestSignal              => ADR1_ipd,
          TestSignalName          => "ADR1",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR1_WE_posedge_negedge,
          HoldLow                 => thold_ADR1_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR2_WE_posedge,
          TimingData              => Tmkr_ADR2_WE_posedge,
          TestSignal              => ADR2_ipd,
          TestSignalName          => "ADR2",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR2_WE_posedge_posedge,
          SetupLow                => tsetup_ADR2_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR2_WE_negedge,
          TimingData              => Tmkr_ADR2_WE_negedge,
          TestSignal              => ADR2_ipd,
          TestSignalName          => "ADR2",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR2_WE_posedge_negedge,
          HoldLow                 => thold_ADR2_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR3_WE_posedge,
          TimingData              => Tmkr_ADR3_WE_posedge,
          TestSignal              => ADR3_ipd,
          TestSignalName          => "ADR3",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR3_WE_posedge_posedge,
          SetupLow                => tsetup_ADR3_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR3_WE_negedge,
          TimingData              => Tmkr_ADR3_WE_negedge,
          TestSignal              => ADR3_ipd,
          TestSignalName          => "ADR3",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR3_WE_posedge_negedge,
          HoldLow                 => thold_ADR3_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR4_WE_posedge,
          TimingData              => Tmkr_ADR4_WE_posedge,
          TestSignal              => ADR4_ipd,
          TestSignalName          => "ADR4",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR4_WE_posedge_posedge,
          SetupLow                => tsetup_ADR4_WE_negedge_posedge,
          HoldHigh                => 0 ns,
          HoldLow                 => 0 ns,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR4_WE_negedge,
          TimingData              => Tmkr_ADR4_WE_negedge,
          TestSignal              => ADR4_ipd,
          TestSignalName          => "ADR4",
          TestDelay               => 0 ns,
          RefSignal               => WE_ipd,
          RefSignalName           => "WE",
          RefDelay                => 0 ns,
          SetupHigh               => 0 ns,
          SetupLow                => 0 ns,
          HoldHigh                => thold_ADR4_WE_posedge_negedge,
          HoldLow                 => thold_ADR4_WE_negedge_negedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'F',
          HeaderMsg               => InstancePath & "/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_WE,
          PeriodData              => PInfo_WE,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_WE_posedge,
          PulseWidthLow           => tpw_WE_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAM32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_ADR0_WE_posedge or Tviol_ADR0_WE_negedge or
                 Tviol_ADR1_WE_posedge or Tviol_ADR1_WE_negedge or
                 Tviol_ADR2_WE_posedge or Tviol_ADR2_WE_negedge or
                 Tviol_ADR3_WE_posedge or Tviol_ADR3_WE_negedge or
                 Tviol_ADR4_WE_posedge or Tviol_ADR4_WE_negedge or
                 Tviol_I_WE_negedge    or Pviol_WE;

    if(WE_ipd = '1' and 
       (ADR0_ipd'event or ADR1_ipd'event or ADR2_ipd'event or ADR3_ipd'event or ADR4_ipd'event)) then
          assert false 
          report "Address changed during high WE"
          severity warning; 
          Violation := 'X'; 
    end if;

    -------------------------
    --  Functionality Section
    -------------------------

    Index := DECODE_ADDR5(ADDRESS => (ADR4_ipd, ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));

    O_zd := MEM(Index);

    VitalStateTable(Result => O_zd,
                    PreviousDataIn => PrevData,
                    StateTable => X_RAM_O_tab,
                    DataIn => (I_ipd, WE_ipd));

    O_zd := Violation XOR O_zd;

    MEM(Index) := O_zd;

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => O,
      GlitchData => O_GlitchData,
      OutSignalName => "O",
      OutTemp => O_zd,
      Paths => (0 => (WE_ipd'last_event, tpd_WE_O, TRUE),
                1 => (I_ipd'last_event,  tpd_I_O,  TRUE),
                2 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                3 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE),
                4 => (ADR2_ipd'last_event, tpd_ADR2_O, TRUE),
                5 => (ADR3_ipd'last_event, tpd_ADR3_O, TRUE),
                6 => (ADR4_ipd'last_event, tpd_ADR4_O, TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

      wait on WE_ipd, I_ipd, ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd, ADR4_ipd;

  end process VITALBehavior;
 
end X_RAM32_V;

configuration CFG_X_RAM32_V of X_RAM32 is
   for X_RAM32_V
   end for;
end CFG_X_RAM32_V;


----- CELL X_RAMS16 -----
------------------------------------------
--
--  Xilinx X_RAMS16 VITAL Model
--
--  Dhimant Patel, March, 1996.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.VITAL_Primitives.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMS16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := True;

       -- VITAL input wire delays

       tipd_ADR0   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR1   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR2   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR3   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       tipd_I      : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE     : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_ADR0_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR1_O   : VitalDelayType01 := (0.1 ns, 0.1 ns); 
       tpd_ADR2_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR3_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);

       tpd_CLK_O    : VitalDelayType01 := (0.1 ns, 0.1 ns); 

       -- VITAL setup and hold times

       tsetup_I_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       tsetup_I_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ADR0_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR0_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       thold_I_CLK_posedge_posedge     : VitalDelayType := 0.01 ns;
       thold_I_CLK_negedge_posedge     : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ADR0_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR0_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       INIT : bit_vector := X"0000"
  );

  port (I      : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADR0   : in STD_ULOGIC;
        ADR1   : in STD_ULOGIC;
        ADR2   : in STD_ULOGIC;
        ADR3   : in STD_ULOGIC;

        O    : out STD_ULOGIC
       ); 
attribute VITAL_LEVEL0 of X_RAMS16 : entity is TRUE;

end X_RAMS16;

-----------------------------------------------------------------------------

architecture X_RAMS16_V of X_RAMS16 is

  -- Local signals used to propagate input wire delay

  signal ADR0_ipd   : std_ulogic := 'X';
  signal ADR1_ipd   : std_ulogic := 'X';
  signal ADR2_ipd   : std_ulogic := 'X';
  signal ADR3_ipd   : std_ulogic := 'X';

  signal I_ipd      : std_ulogic := 'X';
  signal WE_ipd     : std_ulogic := 'X';
  signal CLK_ipd    : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADR0_ipd,   ADR0,   tipd_ADR0);
    VitalWireDelay (ADR1_ipd,   ADR1,   tipd_ADR1);
    VitalWireDelay (ADR2_ipd,   ADR2,   tipd_ADR2);
    VitalWireDelay (ADR3_ipd,   ADR3,   tipd_ADR3);

    VitalWireDelay (I_ipd,      I,      tipd_I);
    VitalWireDelay (WE_ipd,     WE,     tipd_WE);
    VitalWireDelay (CLK_ipd,    CLK,    tipd_CLK);
  end block;

  --------------------
  -- X_RAMS16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_I_CLK_posedge    : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge   : std_ulogic := '0';
    variable Tviol_ADR0_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR1_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR2_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR3_CLK_posedge : std_ulogic := '0';

    variable Tmkr_I_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR0_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR3_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;

    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable INIT_BITS : std_logic_vector(15 downto 0) := To_StdLogicVector(INIT);
    variable MEM       : std_logic_vector( 16 downto 0 ) := ('X' & INIT_BITS(15 downto 0));
    variable Index     : integer := 16;
    variable PrevData  : std_logic_vector(0 to 4) := (others => '0');
    variable WE_prev   : std_ulogic := 'X';
    variable CLK_prev  : std_ulogic := 'X';
    variable I_prev    : std_ulogic := 'X';
    variable O_zd      : std_ulogic := 'X';
    variable O_GlitchData : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then
        wait until ((CLK_ipd = '0' or CLK_ipd = '1') and 
                    (ADR3_ipd = '0' or ADR3_ipd = '1') and
                    (ADR2_ipd = '0' or ADR2_ipd = '1') and
                    (ADR1_ipd = '0' or ADR1_ipd = '1') and
                    (ADR0_ipd = '0' or ADR0_ipd = '1'));
        CLK_prev   := CLK_ipd;
        WE_prev    := WE_ipd;
        I_prev     := I_ipd;
        Index      := DECODE_ADDR4(ADDRESS => (ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));
        O_zd       := MEM(Index);
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_posedge,
          TimingData              => Tmkr_I_CLK_posedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_posedge,
          SetupLow                => tsetup_I_CLK_negedge_posedge,
          HoldLow                => thold_I_CLK_posedge_posedge,
          HoldHigh                 => thold_I_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR0_CLK_posedge,
          TimingData              => Tmkr_ADR0_CLK_posedge,
          TestSignal              => ADR0_ipd,
          TestSignalName          => "ADR0",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR0_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR0_CLK_negedge_posedge,
          HoldLow                => thold_ADR0_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR0_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR1_CLK_posedge,
          TimingData              => Tmkr_ADR1_CLK_posedge,
          TestSignal              => ADR1_ipd,
          TestSignalName          => "ADR1",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR1_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR1_CLK_negedge_posedge,
          HoldLow                => thold_ADR1_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR1_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR2_CLK_posedge,
          TimingData              => Tmkr_ADR2_CLK_posedge,
          TestSignal              => ADR2_ipd,
          TestSignalName          => "ADR2",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR2_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR2_CLK_negedge_posedge,
          HoldLow                => thold_ADR2_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR2_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR3_CLK_posedge,
          TimingData              => Tmkr_ADR3_CLK_posedge,
          TestSignal              => ADR3_ipd,
          TestSignalName          => "ADR3",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR3_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR3_CLK_negedge_posedge,
          HoldLow                => thold_ADR3_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR3_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMS16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_I_CLK_posedge    or Tviol_WE_CLK_posedge or 
                 Tviol_ADR0_CLK_posedge or Tviol_ADR1_CLK_posedge or 
                 Tviol_ADR2_CLK_posedge or Tviol_ADR3_CLK_posedge or 
                 Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    Index := DECODE_ADDR4(ADDRESS => (ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));

    O_zd := MEM(Index);

    VitalStateTable(Result => O_zd,
                    PreviousDataIn => PrevData,
                    StateTable => X_RAMS_O_tab,
                    DataIn => (CLK_prev, O_zd, I_prev, WE_prev, CLK_ipd));
      
    O_zd := Violation XOR O_zd;

    WE_prev   := WE_ipd;
    CLK_prev  := CLK_ipd;
    I_prev    := I_ipd;

    MEM(Index) := O_zd;

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => O,
      GlitchData => O_GlitchData,
      OutSignalName => "O",
      OutTemp => O_zd,
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_O,  TRUE),
                1 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                2 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE),
                3 => (ADR2_ipd'last_event, tpd_ADR2_O, TRUE),
                4 => (ADR3_ipd'last_event, tpd_ADR3_O, TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

      wait on ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd, I_ipd, WE_ipd, CLK_ipd;

  end process VITALBehavior;

end X_RAMS16_V;

configuration CFG_X_RAMS16_V of X_RAMS16 is
   for X_RAMS16_V
   end for;
end CFG_X_RAMS16_V;


----- CELL X_RAMS32 -----
------------------------------------------
--
--  Xilinx X_RAMS32 VITAL Model
--
--  Dhimant Patel, March, 1996.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.VITAL_Primitives.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMS32 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := True;

       -- VITAL input wire delays

       tipd_ADR0   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR1   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR2   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR3   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_ADR4   : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       tipd_I      : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE     : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_ADR0_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR1_O   : VitalDelayType01 := (0.1 ns, 0.1 ns); 
       tpd_ADR2_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR3_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_ADR4_O   : VitalDelayType01 := (0.1 ns, 0.1 ns);

       tpd_CLK_O    : VitalDelayType01 := (0.1 ns, 0.1 ns); 

       -- VITAL setup and hold times

       tsetup_I_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       tsetup_I_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       tsetup_ADR0_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR0_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR1_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR2_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR3_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR4_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_ADR4_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       thold_I_CLK_posedge_posedge     : VitalDelayType := 0.01 ns;
       thold_I_CLK_negedge_posedge     : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge    : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge    : VitalDelayType := 0.01 ns;
       thold_ADR0_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR0_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR1_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR2_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR3_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR4_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_ADR4_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       INIT : bit_vector := X"00000000"
  );

  port (I      : in STD_ULOGIC;
        WE     : in STD_ULOGIC;
        CLK    : in STD_ULOGIC;
        ADR0   : in STD_ULOGIC;
        ADR1   : in STD_ULOGIC;
        ADR2   : in STD_ULOGIC;
        ADR3   : in STD_ULOGIC;
        ADR4   : in STD_ULOGIC;

        O    : out STD_ULOGIC
       ); 
attribute VITAL_LEVEL0 of X_RAMS32 : entity is TRUE;

end X_RAMS32;

-----------------------------------------------------------------------------

architecture X_RAMS32_V of X_RAMS32 is

  -- Local signals used to propagate input wire delay

  signal ADR0_ipd   : std_ulogic := 'X';
  signal ADR1_ipd   : std_ulogic := 'X';
  signal ADR2_ipd   : std_ulogic := 'X';
  signal ADR3_ipd   : std_ulogic := 'X';
  signal ADR4_ipd   : std_ulogic := 'X';

  signal I_ipd      : std_ulogic := 'X';
  signal WE_ipd     : std_ulogic := 'X';
  signal CLK_ipd    : std_ulogic := 'X';


begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (ADR0_ipd,   ADR0,   tipd_ADR0);
    VitalWireDelay (ADR1_ipd,   ADR1,   tipd_ADR1);
    VitalWireDelay (ADR2_ipd,   ADR2,   tipd_ADR2);
    VitalWireDelay (ADR3_ipd,   ADR3,   tipd_ADR3);
    VitalWireDelay (ADR4_ipd,   ADR4,   tipd_ADR4);

    VitalWireDelay (I_ipd,      I,      tipd_I);
    VitalWireDelay (WE_ipd,     WE,     tipd_WE);
    VitalWireDelay (CLK_ipd,    CLK,    tipd_CLK);
  end block;

  --------------------
  -- X_RAMS32 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_I_CLK_posedge    : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge   : std_ulogic := '0';
    variable Tviol_ADR0_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR1_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR2_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR3_CLK_posedge : std_ulogic := '0';
    variable Tviol_ADR4_CLK_posedge : std_ulogic := '0';

    variable Tmkr_I_CLK_posedge     : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge    : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR0_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR3_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_ADR4_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;

    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable INIT_BITS : std_logic_vector(31 downto 0) := To_StdLogicVector(INIT);
    variable MEM       : std_logic_vector( 32 downto 0 ) := ('X' & INIT_BITS(31 downto 0));
    variable Index     : integer := 32;
    variable PrevData  : std_logic_vector(0 to 4) := (others => '0');
    variable WE_prev   : std_ulogic := 'X';
    variable CLK_prev  : std_ulogic := 'X';
    variable I_prev    : std_ulogic := 'X';
    variable O_zd      : std_ulogic := 'X';
    variable O_GlitchData : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then
        wait until ((CLK_ipd = '0' or CLK_ipd = '1') and
                    (ADR4_ipd = '0' or ADR4_ipd = '1') and
                    (ADR3_ipd = '0' or ADR3_ipd = '1') and
                    (ADR2_ipd = '0' or ADR2_ipd = '1') and
                    (ADR1_ipd = '0' or ADR1_ipd = '1') and
                    (ADR0_ipd = '0' or ADR0_ipd = '1'));
        CLK_prev   := CLK_ipd;
        WE_prev    := WE_ipd;
        I_prev     := I_ipd;
        Index      := DECODE_ADDR5(ADDRESS => (ADR4_ipd, ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));
        O_zd       := MEM(Index);
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_posedge,
          TimingData              => Tmkr_I_CLK_posedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_posedge,
          SetupLow                => tsetup_I_CLK_negedge_posedge,
          HoldLow                => thold_I_CLK_posedge_posedge,
          HoldHigh                 => thold_I_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR0_CLK_posedge,
          TimingData              => Tmkr_ADR0_CLK_posedge,
          TestSignal              => ADR0_ipd,
          TestSignalName          => "ADR0",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR0_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR0_CLK_negedge_posedge,
          HoldLow                => thold_ADR0_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR0_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR1_CLK_posedge,
          TimingData              => Tmkr_ADR1_CLK_posedge,
          TestSignal              => ADR1_ipd,
          TestSignalName          => "ADR1",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR1_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR1_CLK_negedge_posedge,
          HoldLow                => thold_ADR1_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR1_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR2_CLK_posedge,
          TimingData              => Tmkr_ADR2_CLK_posedge,
          TestSignal              => ADR2_ipd,
          TestSignalName          => "ADR2",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR2_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR2_CLK_negedge_posedge,
          HoldLow                => thold_ADR2_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR2_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR3_CLK_posedge,
          TimingData              => Tmkr_ADR3_CLK_posedge,
          TestSignal              => ADR3_ipd,
          TestSignalName          => "ADR3",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR3_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR3_CLK_negedge_posedge,
          HoldLow                => thold_ADR3_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR3_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_ADR4_CLK_posedge,
          TimingData              => Tmkr_ADR4_CLK_posedge,
          TestSignal              => ADR4_ipd,
          TestSignalName          => "ADR4",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_ADR4_CLK_posedge_posedge,
          SetupLow                => tsetup_ADR4_CLK_negedge_posedge,
          HoldLow                => thold_ADR4_CLK_posedge_posedge,
          HoldHigh                 => thold_ADR4_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMS32",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_I_CLK_posedge    or Tviol_WE_CLK_posedge or 
                 Tviol_ADR0_CLK_posedge or Tviol_ADR1_CLK_posedge or 
                 Tviol_ADR2_CLK_posedge or Tviol_ADR3_CLK_posedge or 
                 Tviol_ADR4_CLK_posedge or Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    Index := DECODE_ADDR5(ADDRESS => (ADR4_ipd, ADR3_ipd, ADR2_ipd, ADR1_ipd, ADR0_ipd));

    O_zd := MEM(Index);

    VitalStateTable(Result => O_zd,
                    PreviousDataIn => PrevData,
                    StateTable => X_RAMS_O_tab,
                    DataIn => (CLK_prev, O_zd, I_prev, WE_prev, CLK_ipd));

    O_zd := Violation XOR O_zd;

    WE_prev   := WE_ipd;
    CLK_prev  := CLK_ipd;
    I_prev    := I_ipd;

    MEM(Index) := O_zd;

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => O,
      GlitchData => O_GlitchData,
      OutSignalName => "O",
      OutTemp => O_zd,
      Paths => (0 => (CLK_ipd'last_event,  tpd_CLK_O,  TRUE),
                1 => (ADR0_ipd'last_event, tpd_ADR0_O, TRUE),
                2 => (ADR1_ipd'last_event, tpd_ADR1_O, TRUE),
                3 => (ADR2_ipd'last_event, tpd_ADR2_O, TRUE),
                4 => (ADR3_ipd'last_event, tpd_ADR3_O, TRUE),
                5 => (ADR4_ipd'last_event, tpd_ADR4_O, TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

      wait on ADR0_ipd, ADR1_ipd, ADR2_ipd, ADR3_ipd, ADR4_ipd, I_ipd, WE_ipd, CLK_ipd;

  end process VITALBehavior;

end X_RAMS32_V;

configuration CFG_X_RAMS32_V of X_RAMS32 is
   for X_RAMS32_V
   end for;
end CFG_X_RAMS32_V;


----- CELL X_RAMD16 -----
------------------------------------------
--
--  Xilinx X_RAMD16 VITAL Model
--
--  Dhimant Patel, March, 1996.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.VITAL_Primitives.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_RAMD16 is

  generic (
       TimingChecksOn: Boolean := True;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := True;

       -- VITAL input wire delays

       tipd_WADR0    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WADR1    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WADR2    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WADR3    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       tipd_RADR0    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RADR1    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RADR2    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_RADR3    : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       tipd_I        : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_WE       : VitalDelayType01 := ( 0.0 ns,  0.0 ns);
       tipd_CLK     : VitalDelayType01 := ( 0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_RADR0_O : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_RADR1_O : VitalDelayType01 := (0.1 ns, 0.1 ns); 
       tpd_RADR2_O : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_RADR3_O : VitalDelayType01 := (0.1 ns, 0.1 ns);

       tpd_CLK_O  : VitalDelayType01 := (0.1 ns, 0.1 ns); 

       -- VITAL setup and hold times

       tsetup_I_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_I_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WE_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR0_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR0_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR1_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR1_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR2_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR2_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR3_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_WADR3_CLK_negedge_posedge : VitalDelayType := 0.01 ns;

       thold_I_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_I_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;
       thold_WE_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WE_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR0_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR0_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR1_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR1_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR2_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR2_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR3_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_WADR3_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       INIT : bit_vector := X"0000"
  );

  port (I     : in STD_ULOGIC;
        WE    : in STD_ULOGIC;
        CLK   : in STD_ULOGIC;
        WADR0 : in STD_ULOGIC;
        WADR1 : in STD_ULOGIC;
        WADR2 : in STD_ULOGIC;
        WADR3 : in STD_ULOGIC;
        RADR0 : in STD_ULOGIC;
        RADR1 : in STD_ULOGIC;
        RADR2 : in STD_ULOGIC;
        RADR3 : in STD_ULOGIC;

        O     : out STD_ULOGIC
       ); 
attribute VITAL_LEVEL0 of X_RAMD16 : entity is TRUE;

end X_RAMD16;

-----------------------------------------------------------------------------

architecture X_RAMD16_V of X_RAMD16 is

  -- Local signals used to propagate input wire delay

  signal WADR0_ipd : std_ulogic := 'X';
  signal WADR1_ipd : std_ulogic := 'X';
  signal WADR2_ipd : std_ulogic := 'X';
  signal WADR3_ipd : std_ulogic := 'X';

  signal RADR0_ipd : std_ulogic := 'X';
  signal RADR1_ipd : std_ulogic := 'X';
  signal RADR2_ipd : std_ulogic := 'X';
  signal RADR3_ipd : std_ulogic := 'X';

  signal I_ipd     : std_ulogic := 'X';
  signal WE_ipd    : std_ulogic := 'X';
  signal CLK_ipd   : std_ulogic := 'X';

begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (WADR0_ipd, WADR0,    tipd_WADR0);
    VitalWireDelay (WADR1_ipd, WADR1,    tipd_WADR1);
    VitalWireDelay (WADR2_ipd, WADR2,    tipd_WADR2);
    VitalWireDelay (WADR3_ipd, WADR3,    tipd_WADR3);

    VitalWireDelay (RADR0_ipd, RADR0, tipd_RADR0);
    VitalWireDelay (RADR1_ipd, RADR1, tipd_RADR1);
    VitalWireDelay (RADR2_ipd, RADR2, tipd_RADR2);
    VitalWireDelay (RADR3_ipd, RADR3, tipd_RADR3);

    VitalWireDelay (I_ipd,     I,     tipd_I);
    VitalWireDelay (WE_ipd,    WE,    tipd_WE);
    VitalWireDelay (CLK_ipd,  CLK,  tipd_CLK);
  end block;

  --------------------
  -- X_RAMD16 Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_I_CLK_posedge  : std_ulogic := '0';
    variable Tviol_WE_CLK_posedge : std_ulogic := '0';
    variable Tviol_WADR0_CLK_posedge : std_ulogic := '0';
    variable Tviol_WADR1_CLK_posedge : std_ulogic := '0';
    variable Tviol_WADR2_CLK_posedge : std_ulogic := '0';
    variable Tviol_WADR3_CLK_posedge : std_ulogic := '0';

    variable Tmkr_I_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WE_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WADR0_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WADR1_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WADR2_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_WADR3_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;

    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable INIT_BITS : std_logic_vector(15 downto 0) := To_StdLogicVector(INIT);
    variable MEM       : std_logic_vector( 16 downto 0 ) := ('X' & INIT_BITS(15 downto 0));
    variable Index_SP  : integer := 16;
    variable Index_DP  : integer := 16;
    variable PrevData  : std_logic_vector(0 to 4) := (others => '0');
    variable WE_prev   : std_ulogic := 'X';
    variable CLK_prev : std_ulogic := 'X';
    variable I_prev    : std_ulogic := 'X';
    variable SPO_zd    : std_ulogic := 'X';
    variable DPO_zd    : std_ulogic := 'X';
    variable DPO_GlitchData : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then
        wait until ((CLK_ipd = '0' or CLK_ipd = '1') and
                    (WADR3_ipd = '0' or WADR3_ipd = '1') and
                    (WADR2_ipd = '0' or WADR2_ipd = '1') and
                    (WADR1_ipd = '0' or WADR1_ipd = '1') and
                    (WADR0_ipd = '0' or WADR0_ipd = '1') and
                    (RADR3_ipd = '0' or RADR3_ipd = '1') and
                    (RADR2_ipd = '0' or RADR2_ipd = '1') and
                    (RADR1_ipd = '0' or RADR1_ipd = '1') and
                    (RADR0_ipd = '0' or RADR0_ipd = '1'));
        CLK_prev := CLK_ipd;
        WE_prev  := WE_ipd;
        I_prev   := I_ipd;
        Index_SP := DECODE_ADDR4(ADDRESS => (WADR3_ipd, WADR2_ipd, WADR1_ipd, WADR0_ipd));
        Index_DP := DECODE_ADDR4(ADDRESS => (RADR3_ipd, RADR2_ipd, RADR1_ipd, RADR0_ipd));
        SPO_zd   := MEM(Index_SP);
        DPO_zd   := MEM(Index_DP);
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_posedge,
          TimingData              => Tmkr_I_CLK_posedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_posedge,
          SetupLow                => tsetup_I_CLK_negedge_posedge,
          HoldLow                => thold_I_CLK_posedge_posedge,
          HoldHigh                 => thold_I_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WE_CLK_posedge,
          TimingData              => Tmkr_WE_CLK_posedge,
          TestSignal              => WE_ipd,
          TestSignalName          => "WE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WE_CLK_posedge_posedge,
          SetupLow                => tsetup_WE_CLK_negedge_posedge,
          HoldLow                => thold_WE_CLK_posedge_posedge,
          HoldHigh                 => thold_WE_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WADR0_CLK_posedge,
          TimingData              => Tmkr_WADR0_CLK_posedge,
          TestSignal              => WADR0_ipd,
          TestSignalName          => "WADR0",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WADR0_CLK_posedge_posedge,
          SetupLow                => tsetup_WADR0_CLK_negedge_posedge,
          HoldLow                => thold_WADR0_CLK_posedge_posedge,
          HoldHigh                 => thold_WADR0_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WADR1_CLK_posedge,
          TimingData              => Tmkr_WADR1_CLK_posedge,
          TestSignal              => WADR1_ipd,
          TestSignalName          => "WADR1",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WADR1_CLK_posedge_posedge,
          SetupLow                => tsetup_WADR1_CLK_negedge_posedge,
          HoldLow                => thold_WADR1_CLK_posedge_posedge,
          HoldHigh                 => thold_WADR1_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WADR2_CLK_posedge,
          TimingData              => Tmkr_WADR2_CLK_posedge,
          TestSignal              => WADR2_ipd,
          TestSignalName          => "WADR2",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WADR2_CLK_posedge_posedge,
          SetupLow                => tsetup_WADR2_CLK_negedge_posedge,
          HoldLow                => thold_WADR2_CLK_posedge_posedge,
          HoldHigh                 => thold_WADR2_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_WADR3_CLK_posedge,
          TimingData              => Tmkr_WADR3_CLK_posedge,
          TestSignal              => WADR3_ipd,
          TestSignalName          => "WADR3",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_WADR3_CLK_posedge_posedge,
          SetupLow                => tsetup_WADR3_CLK_negedge_posedge,
          HoldLow                => thold_WADR3_CLK_posedge_posedge,
          HoldHigh                 => thold_WADR3_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(WE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_RAMD16",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_I_CLK_posedge  or Tviol_WE_CLK_posedge or 
                 Tviol_WADR0_CLK_posedge or Tviol_WADR1_CLK_posedge or 
                 Tviol_WADR2_CLK_posedge or Tviol_WADR3_CLK_posedge or 
                 Pviol_CLK;

    -------------------------
    --  Functionality Section
    -------------------------
    Index_SP := DECODE_ADDR4(ADDRESS => (WADR3_ipd, WADR2_ipd, WADR1_ipd, WADR0_ipd));
    Index_DP := DECODE_ADDR4(ADDRESS => (RADR3_ipd, RADR2_ipd, RADR1_ipd, RADR0_ipd));

    SPO_zd := MEM(Index_SP);
    DPO_zd := MEM(Index_DP);

    VitalStateTable(Result => SPO_zd,
                    PreviousDataIn => PrevData,
                    StateTable => X_RAMS_O_tab,
                    DataIn => (CLK_prev, SPO_zd, I_prev, WE_prev, CLK_ipd));

    SPO_zd := Violation XOR SPO_zd;

    WE_prev   := WE_ipd;
    CLK_prev  := CLK_ipd;
    I_prev    := I_ipd;

    MEM(Index_SP) := SPO_zd;
    DPO_zd        := MEM(Index_DP);

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => O,
      GlitchData => DPO_GlitchData,
      OutSignalName => "O",
      OutTemp => DPO_zd,
      Paths => (0 => (CLK_ipd'last_event, tpd_CLK_O, TRUE),
                1 => (RADR0_ipd'last_event, tpd_RADR0_O, TRUE),
                2 => (RADR1_ipd'last_event, tpd_RADR1_O, TRUE),
                3 => (RADR2_ipd'last_event, tpd_RADR2_O, TRUE),
                4 => (RADR3_ipd'last_event, tpd_RADR3_O, TRUE)),
      Mode => OnEvent,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

      wait on RADR0_ipd, RADR1_ipd, RADR2_ipd, RADR3_ipd, WADR0_ipd, WADR1_ipd,
              WADR2_ipd, WADR3_ipd, I_ipd, CLK_ipd, WE_ipd;

  end process VITALBehavior;

end X_RAMD16_V;
 
configuration CFG_X_RAMD16_V of X_RAMD16 is
   for X_RAMD16_V
   end for;
end CFG_X_RAMD16_V;


----- CELL X_SFF -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_SFF is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_SET_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_RST_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_CLK_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tsetup_I_CLK_posedge_posedge   :	VitalDelayType := 0.010 ns;
      tsetup_I_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      thold_I_CLK_posedge_posedge    :	VitalDelayType := 0.010 ns;
      thold_I_CLK_negedge_posedge    :	VitalDelayType := 0.010 ns;
      tsetup_SRST_CLK_posedge_posedge  :	VitalDelayType := 0.010 ns;
      tsetup_SRST_CLK_negedge_posedge  :	VitalDelayType := 0.010 ns;
      thold_SRST_CLK_posedge_posedge   :	VitalDelayType := 0.010 ns;
      thold_SRST_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      tsetup_SSET_CLK_posedge_posedge  :	VitalDelayType := 0.010 ns;
      tsetup_SSET_CLK_negedge_posedge  :	VitalDelayType := 0.010 ns;
      thold_SSET_CLK_posedge_posedge   :	VitalDelayType := 0.010 ns;
      thold_SSET_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      trecovery_RST_CLK_negedge_posedge :	VitalDelayType := 0.010 ns;
      thold_RST_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      trecovery_SET_CLK_negedge_posedge :	VitalDelayType := 0.010 ns;
      thold_SET_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      tsetup_CE_CLK_posedge_posedge  :	VitalDelayType := 0.010 ns;
      tsetup_CE_CLK_negedge_posedge  :	VitalDelayType := 0.010 ns;
      thold_CE_CLK_posedge_posedge   :	VitalDelayType := 0.010 ns;
      thold_CE_CLK_negedge_posedge   :	VitalDelayType := 0.010 ns;
      tpw_RST_posedge                 :	VitalDelayType := 0.010 ns;
      tpw_SET_posedge                 :	VitalDelayType := 0.010 ns;
      tpw_CLK_posedge                :	VitalDelayType := 0.010 ns;
      tpw_CLK_negedge                :	VitalDelayType := 0.010 ns;
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SRST                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SSET                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_RST                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_SET                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CLK                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CE                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC;
      SRST                             :	in    STD_ULOGIC;
      SSET                             :	in    STD_ULOGIC;
      RST                             :	in    STD_ULOGIC;
      SET                             :	in    STD_ULOGIC;
      CLK                            :	in    STD_ULOGIC;
      CE                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_SFF : entity is TRUE;
end X_SFF;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_SFF_V of X_SFF is
   attribute VITAL_LEVEL1 of X_SFF_V : architecture is TRUE;

   SIGNAL I_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SRST_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SSET_ipd	 : STD_ULOGIC := 'X';
   SIGNAL RST_ipd	 : STD_ULOGIC := 'X';
   SIGNAL SET_ipd	 : STD_ULOGIC := 'X';
   SIGNAL CLK_ipd	 : STD_ULOGIC := 'X';
   SIGNAL CE_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   VitalWireDelay (SRST_ipd, SRST, tipd_SRST);
   VitalWireDelay (SSET_ipd, SSET, tipd_SSET);
   VitalWireDelay (RST_ipd, RST, tipd_RST);
   VitalWireDelay (SET_ipd, SET, tipd_SET);
   VitalWireDelay (CLK_ipd, CLK, tipd_CLK);
   VitalWireDelay (CE_ipd, CE, tipd_CE);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd, SRST_ipd, SSET_ipd, RST_ipd, SET_ipd, CLK_ipd, CE_ipd)

   -- timing check results
   VARIABLE Tviol_I_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_I_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_SRST_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_SRST_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_SSET_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_SSET_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_RST_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_RST_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_SET_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_SET_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Tviol_CE_CLK_posedge	: STD_ULOGIC := '0';
   VARIABLE Tmkr_CE_CLK_posedge	: VitalTimingDataType := VitalTimingDataInit;
   VARIABLE Pviol_RST	: STD_ULOGIC := '0';
   VARIABLE PInfo_RST	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_SET	: STD_ULOGIC := '0';
   VARIABLE PInfo_SET	: VitalPeriodDataType := VitalPeriodDataInit;
   VARIABLE Pviol_CLK	: STD_ULOGIC := '0';
   VARIABLE PInfo_CLK	: VitalPeriodDataType := VitalPeriodDataInit;

   -- functionality results
   VARIABLE Violation : STD_ULOGIC := '0';
   VARIABLE PrevData_O : STD_LOGIC_VECTOR(0 to 8);
   VARIABLE I_delayed : STD_ULOGIC := 'X';
   VARIABLE SRST_delayed : STD_ULOGIC := 'X';
   VARIABLE SSET_delayed : STD_ULOGIC := 'X';
   VARIABLE CLK_delayed : STD_ULOGIC := 'X';
   VARIABLE CE_delayed : STD_ULOGIC := 'X';
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS  O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      ------------------------
      --  Timing Check Section
      ------------------------
      if (TimingChecksOn) then
         VitalSetupHoldCheck (
          Violation               => Tviol_I_CLK_posedge,
          TimingData              => Tmkr_I_CLK_posedge,
          TestSignal              => I_ipd,
          TestSignalName          => "I",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_I_CLK_posedge_posedge,
          SetupLow                => tsetup_I_CLK_negedge_posedge,
          HoldLow                => thold_I_CLK_posedge_posedge,
          HoldHigh                 => thold_I_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND (CE_ipd)
                                     AND ((NOT SET_ipd)) AND ((NOT SRST_ipd))
                                     AND ((NOT SSET_ipd))) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalSetupHoldCheck (
          Violation               => Tviol_SRST_CLK_posedge,
          TimingData              => Tmkr_SRST_CLK_posedge,
          TestSignal              => SRST_ipd,
          TestSignalName          => "SRST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_SRST_CLK_posedge_posedge,
          SetupLow                => tsetup_SRST_CLK_negedge_posedge,
          HoldLow                => thold_SRST_CLK_posedge_posedge,
          HoldHigh                 => thold_SRST_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(((NOT SET_ipd)) AND ((NOT RST_ipd))) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalSetupHoldCheck (
          Violation               => Tviol_SSET_CLK_posedge,
          TimingData              => Tmkr_SSET_CLK_posedge,
          TestSignal              => SSET_ipd,
          TestSignalName          => "SSET",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_SSET_CLK_posedge_posedge,
          SetupLow                => tsetup_SSET_CLK_negedge_posedge,
          HoldLow                => thold_SSET_CLK_posedge_posedge,
          HoldHigh                 => thold_SSET_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(((NOT SET_ipd)) AND ((NOT RST_ipd))
                                     AND ((NOT SRST_ipd))) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_RST_CLK_posedge,
          TimingData              => Tmkr_RST_CLK_posedge,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_RST_CLK_negedge_posedge,
          Removal                 => thold_RST_CLK_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01(CE_ipd) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalRecoveryRemovalCheck (
          Violation               => Tviol_SET_CLK_posedge,
          TimingData              => Tmkr_SET_CLK_posedge,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          Recovery                => trecovery_SET_CLK_negedge_posedge,
          Removal                 => thold_SET_CLK_negedge_posedge,
          ActiveLow               => FALSE,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND (CE_ipd)) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalSetupHoldCheck (
          Violation               => Tviol_CE_CLK_posedge,
          TimingData              => Tmkr_CE_CLK_posedge,
          TestSignal              => CE_ipd,
          TestSignalName          => "CE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName          => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CE_CLK_posedge_posedge,
          SetupLow                => tsetup_CE_CLK_negedge_posedge,
          HoldLow                => thold_CE_CLK_posedge_posedge,
          HoldHigh                 => thold_CE_CLK_negedge_posedge,
          CheckEnabled            => TO_X01(((NOT RST_ipd)) AND ((O_zd) XOR (I_ipd))
                                     AND ((NOT SET_ipd)) AND ((NOT SRST_ipd))
                                     AND ((NOT SSET_ipd))) /= '0',
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_RST,
          PeriodData              => PInfo_RST,
          TestSignal              => RST_ipd,
          TestSignalName          => "RST",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_RST_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_SET,
          PeriodData              => PInfo_SET,
          TestSignal              => SET_ipd,
          TestSignalName          => "SET",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_SET_posedge,
          PulseWidthLow           => 0 ns,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_SFF",
          Xon                     => Xon,
          MsgOn                   => TRUE,
          MsgSeverity             => WARNING);
      end if;

      -------------------------
      --  Functionality Section
      -------------------------
      Violation := Tviol_I_CLK_posedge or Tviol_SRST_CLK_posedge or 
                   Tviol_SSET_CLK_posedge or Tviol_RST_CLK_posedge or
                   Pviol_RST or Pviol_SET or Tviol_SET_CLK_posedge or
                   Tviol_CE_CLK_posedge or Pviol_CLK;
      VitalStateTable(
        Result => O_zd,
        PreviousDataIn => PrevData_O,
        StateTable => X_SFF_O_tab,
        DataIn => (CLK_delayed, SET_ipd, SSET_delayed, O_zd, I_delayed, 
                   CE_delayed, SRST_delayed, CLK_ipd, RST_ipd));
      O_zd := Violation XOR O_zd;
      I_delayed := I_ipd;
      SRST_delayed := SRST_ipd;
      SSET_delayed := SSET_ipd;
      CLK_delayed := CLK_ipd;
      CE_delayed := CE_ipd;

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (SET_ipd'last_event, tpd_SET_O, TRUE),
                 1 => (RST_ipd'last_event, tpd_RST_O, TRUE),
                 2 => (CLK_ipd'last_event, tpd_CLK_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_SFF_V;

configuration CFG_X_SFF_V of X_SFF is
   for X_SFF_V
   end for;
end CFG_X_SFF_V;


----- CELL X_SRL16E -----
------------------------------------------
--
--  Xilinx X_SRL16E VITAL Model
--
--  Dhimant Patel, December, 1997.
-----------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.VITAL_Timing.all; 
use IEEE.STD_LOGIC_UNSIGNED.all;

library simprim;
use simprim.VPACKAGE.all;

entity X_SRL16E is

  generic (
       TimingChecksOn: Boolean := False;
       InstancePath:   STRING  := "*";
       Xon:  Boolean := True;
       MsgOn:  Boolean := False;

       -- VITAL input wire delays

       tipd_A0   : VitalDelayType01 := (0.0 ns,  0.0 ns);
       tipd_A1   : VitalDelayType01 := (0.0 ns,  0.0 ns);
       tipd_A2   : VitalDelayType01 := (0.0 ns,  0.0 ns);
       tipd_A3   : VitalDelayType01 := (0.0 ns,  0.0 ns);

       tipd_D    : VitalDelayType01 := (0.0 ns,  0.0 ns);
       tipd_CE   : VitalDelayType01 := (0.0 ns,  0.0 ns);
       tipd_CLK  : VitalDelayType01 := (0.0 ns,  0.0 ns);

       -- VITAL pin-to-pin propagation delays

       tpd_A0_Q  : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_A1_Q  : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_A2_Q  : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_A3_Q  : VitalDelayType01 := (0.1 ns, 0.1 ns);
       tpd_CLK_Q : VitalDelayType01 := (0.1 ns, 0.1 ns);

       -- VITAL setup and hold times

       tsetup_CE_CLK_posedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_CE_CLK_negedge_posedge : VitalDelayType := 0.01 ns;
       tsetup_D_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       tsetup_D_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;

       thold_CE_CLK_posedge_posedge  : VitalDelayType := 0.01 ns;
       thold_CE_CLK_negedge_posedge  : VitalDelayType := 0.01 ns;
       thold_D_CLK_posedge_posedge   : VitalDelayType := 0.01 ns;
       thold_D_CLK_negedge_posedge   : VitalDelayType := 0.01 ns;

       -- VITAL minimum pulse width

       tpw_CLK_posedge : VitalDelayType := 0.01 ns;
       tpw_CLK_negedge : VitalDelayType := 0.01 ns;

       INIT : bit_vector := X"0000"
  );

  port (D   : in STD_ULOGIC;
        CE  : in STD_ULOGIC;
        CLK : in STD_ULOGIC;
        A0  : in STD_ULOGIC;
        A1  : in STD_ULOGIC;
        A2  : in STD_ULOGIC;
        A3  : in STD_ULOGIC;
        Q   : out STD_ULOGIC
       ); 

attribute VITAL_LEVEL0 of X_SRL16E : entity is TRUE;

end X_SRL16E;

-----------------------------------------------------------------------------

architecture X_SRL16E_V of X_SRL16E is

  attribute VITAL_LEVEL0 of X_SRL16E_V : architecture is TRUE;

  -- Local signals used to propagate input wire delay

  signal A0_ipd  : std_ulogic := 'X';
  signal A1_ipd  : std_ulogic := 'X';
  signal A2_ipd  : std_ulogic := 'X';
  signal A3_ipd  : std_ulogic := 'X';

  signal D_ipd   : std_ulogic := 'X';
  signal CE_ipd  : std_ulogic := 'X';
  signal CLK_ipd : std_ulogic := 'X';

 
begin -- architecture

  ----------------------
  --  Wire Delay Section
  ----------------------
  WireDelay : block
  begin
    VitalWireDelay (A0_ipd,   A0,  tipd_A0);
    VitalWireDelay (A1_ipd,   A1,  tipd_A1);
    VitalWireDelay (A2_ipd,   A2,  tipd_A2);
    VitalWireDelay (A3_ipd,   A3,  tipd_A3);

    VitalWireDelay (D_ipd,    D,   tipd_D);
    VitalWireDelay (CE_ipd,   CE,  tipd_CE);
    VitalWireDelay (CLK_ipd,  CLK, tipd_CLK);
  end block;

  --------------------
  -- X_SRL16E Behavior
  --------------------
  VITALBehavior : process

    -- Local variables used for timing checks
    variable Tviol_D_CLK_posedge  : std_ulogic := '0';
    variable Tviol_CE_CLK_posedge : std_ulogic := '0';

    variable Tmkr_D_CLK_posedge   : VitalTimingDataType := VitalTimingDataInit;
    variable Tmkr_CE_CLK_posedge  : VitalTimingDataType := VitalTimingDataInit;
 
    variable PViol_CLK : std_ulogic := '0';
    variable PInfo_CLK : VitalPeriodDataType := VitalPeriodDataInit;

    -- Local variables used for functionality
    variable Violation : std_ulogic := '0';
    variable ADDR : integer;
    variable VALID_ADDR : boolean := FALSE;
    variable LENGTH : integer;
    variable SHIFT_REG : std_logic_vector (15 downto 0) := To_StdLogicVector(INIT);
    variable Q_zd : std_logic := 'X';
    variable Q_GlitchData : VitalGlitchDataType;
    variable FIRST_TIME : boolean := TRUE;

  begin -- process

    if (FIRST_TIME) then
        wait until (CLK_ipd'last_value = '0' or CLK_ipd'last_value = '1');
        FIRST_TIME := FALSE;
    end if;

    ------------------------
    --  Timing Check Section
    ------------------------
    if (TimingChecksOn) then

         VitalSetupHoldCheck (
          Violation               => Tviol_D_CLK_posedge,
          TimingData              => Tmkr_D_CLK_posedge,
          TestSignal              => D_ipd,
          TestSignalName          => "D",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_D_CLK_posedge_posedge,
          SetupLow                => tsetup_D_CLK_negedge_posedge,
          HoldLow                => thold_D_CLK_posedge_posedge,
          HoldHigh                 => thold_D_CLK_negedge_posedge,
          CheckEnabled            => (TO_X01(CE_ipd) = '1'),
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SRL16E",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalSetupHoldCheck (
          Violation               => Tviol_CE_CLK_posedge,
          TimingData              => Tmkr_CE_CLK_posedge,
          TestSignal              => CE_ipd,
          TestSignalName          => "CE",
          TestDelay               => 0 ns,
          RefSignal               => CLK_ipd,
          RefSignalName           => "CLK",
          RefDelay                => 0 ns,
          SetupHigh               => tsetup_CE_CLK_posedge_posedge,
          SetupLow                => tsetup_CE_CLK_negedge_posedge,
          HoldLow                => thold_CE_CLK_posedge_posedge,
          HoldHigh                 => thold_CE_CLK_negedge_posedge,
          CheckEnabled            => TRUE,
          RefTransition           => 'R',
          HeaderMsg               => InstancePath & "/X_SRL16E",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

         VitalPeriodPulseCheck (
          Violation               => Pviol_CLK,
          PeriodData              => PInfo_CLK,
          TestSignal              => CLK_ipd,
          TestSignalName          => "CLK",
          TestDelay               => 0 ns,
          Period                  => 0 ns,
          PulseWidthHigh          => tpw_CLK_posedge,
          PulseWidthLow           => tpw_CLK_negedge,
          CheckEnabled            => TRUE,
          HeaderMsg               => InstancePath &"/X_SRL16E",
          Xon                     => Xon,
          MsgOn                   => True,
          MsgSeverity             => WARNING);

    end if;

    Violation := Tviol_D_CLK_posedge or Tviol_CE_CLK_posedge or
                 Pviol_CLK;


    -------------------------
    --  Functionality Section
    -------------------------
    VALID_ADDR := ADDR_IS_VALID(SLV => (A3_ipd, A2_ipd, A1_ipd, A0_ipd));

    if (VALID_ADDR) then
        LENGTH := CONV_INTEGER(ARG => (A3_ipd, A2_ipd, A1_ipd, A0_ipd));
    else
        assert false report
        "Invalid ADDRESS: "& 
        SLV_TO_STR(SLV => (A3_ipd, A2_ipd, A1_ipd, A0_ipd)) &
        ". Shift register length will be set to 1."
        severity warning;
        LENGTH := 0;
    end if;
    Q_zd := SHIFT_REG(LENGTH);

    if (CLK_ipd'event AND CLK_ipd'last_value = '0') then
        if (CLK_ipd = '1') then
            if (CE_ipd = '1') then
                if (LENGTH > 0) then
                    for I in LENGTH downto 1 loop
                        SHIFT_REG(I) := SHIFT_REG(I-1);
                    end loop;
                end if;
                SHIFT_REG(0) := D_ipd;
                Q_zd := SHIFT_REG(LENGTH);
            elsif (CE_ipd = 'X') then
                SHIFT_REG := (others => 'X');
                Q_zd := 'X';
            end if;
        elsif (CLK_ipd = 'X') then
            if (CE_ipd /= '0') then
                SHIFT_REG := (others => 'X');
                Q_zd := 'X';
            end if;
        end if;
    elsif (CLK_ipd'event AND CLK_ipd'last_value = 'X') then
        if (CLK_ipd = '1') then
            if (CE_ipd /= '0') then
                SHIFT_REG := (others => 'X');
                Q_zd := 'X';
            end if;
        end if;
    end if;

    Q_zd := Violation XOR Q_zd;

    ----------------------
    --  Path Delay Section
    ----------------------
    VitalPathDelay01 (
      OutSignal => Q,
      GlitchData => Q_GlitchData,
      OutSignalName => "Q",
      OutTemp => Q_zd,
      Paths => (0 => (CLK_ipd'last_event, tpd_CLK_Q, TRUE),
                1 => (A0_ipd'last_event,  tpd_A0_Q,  TRUE),
                2 => (A1_ipd'last_event,  tpd_A1_Q,  TRUE),
                3 => (A2_ipd'last_event,  tpd_A2_Q,  TRUE),
                4 => (A3_ipd'last_event,  tpd_A3_Q,  TRUE)),
      Mode => VitalInertial,
      Xon => Xon,
      MsgOn => MsgOn,
      MsgSeverity => WARNING);

    wait on CLK_ipd, D_ipd, CE_ipd, A3_ipd, A2_ipd, A1_ipd, A0_ipd;

  end process VITALBehavior;

end X_SRL16E_V;

configuration CFG_X_SRL16E_V of X_SRL16E is
   for X_SRL16E_V
   end for;
end CFG_X_SRL16E_V;


----- CELL X_TRI -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_TRI is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I_O                        :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_CTL_O                      :	VitalDelayType01z := 
               (0.100 ns, 0.100 ns, 0.100 ns, 0.100 ns, 0.100 ns, 0.100 ns);
      tipd_I                         :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_CTL                       :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I                              :	in    STD_ULOGIC;
      CTL                            :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_TRI : entity is TRUE;
end X_TRI;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_TRI_V of X_TRI is
   attribute VITAL_LEVEL1 of X_TRI_V : architecture is TRUE;

   SIGNAL I_ipd	  : STD_ULOGIC := 'X';
   SIGNAL CTL_ipd : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I_ipd, I, tipd_I);
   VitalWireDelay (CTL_ipd, CTL, tipd_CTL);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I_ipd, CTL_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := VitalBUFIF0 (data => I_ipd,
              enable => (NOT CTL_ipd));

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01Z (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I_ipd'last_event, VitalExtendToFillDelay(tpd_I_O), TRUE),
                 1 => (CTL_ipd'last_event, VitalExtendToFillDelay(tpd_CTL_O), TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING,
       OutputMap => "UX01ZWLH-");

end process;

end X_TRI_V;

configuration CFG_X_TRI_V of X_TRI is
   for X_TRI_V
   end for;
end CFG_X_TRI_V;


----- CELL X_UPAD -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_UPAD is
   generic(
      InstancePath: STRING := "*");

   port(
      PAD                            :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_UPAD : entity is TRUE;
end X_UPAD;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_UPAD_V of X_UPAD is
   attribute VITAL_LEVEL0 of X_UPAD_V : architecture is TRUE;

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (PAD)
   begin
end process;

end X_UPAD_V;

configuration CFG_X_UPAD_V of X_UPAD is
   for X_UPAD_V
   end for;
end CFG_X_UPAD_V;


----- CELL X_XOR2 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR2 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR2 : entity is TRUE;
end X_XOR2;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR2_V of X_XOR2 is
   attribute VITAL_LEVEL1 of X_XOR2_V : architecture is TRUE;

   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I0_ipd) XOR (I1_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 1 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR2_V;

configuration CFG_X_XOR2_V of X_XOR2 is
   for X_XOR2_V
   end for;
end CFG_X_XOR2_V;


----- CELL X_XOR3 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR3 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR3 : entity is TRUE;
end X_XOR3;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR3_V of X_XOR3 is
   attribute VITAL_LEVEL1 of X_XOR3_V : architecture is TRUE;

   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I1_ipd) XOR (I2_ipd) XOR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 1 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 2 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR3_V;

configuration CFG_X_XOR3_V of X_XOR3 is
   for X_XOR3_V
   end for;
end CFG_X_XOR3_V;


----- CELL X_XOR4 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR4 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR4 : entity is TRUE;
end X_XOR4;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR4_V of X_XOR4 is
   attribute VITAL_LEVEL1 of X_XOR4_V : architecture is TRUE;

   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd := (I2_ipd) XOR (I3_ipd) XOR (I1_ipd) XOR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 1 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 2 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 3 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR4_V;

configuration CFG_X_XOR4_V of X_XOR4 is
   for X_XOR4_V
   end for;
end CFG_X_XOR4_V;


----- CELL X_XOR5 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR5 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR5 : entity is TRUE;
end X_XOR5;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR5_V of X_XOR5 is
   attribute VITAL_LEVEL1 of X_XOR5_V : architecture is TRUE;

   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I3_ipd) XOR (I4_ipd) XOR (I2_ipd) XOR (I1_ipd) XOR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 1 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 2 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 3 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 4 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR5_V;

configuration CFG_X_XOR5_V of X_XOR5 is
   for X_XOR5_V
   end for;
end CFG_X_XOR5_V;


----- CELL X_XOR6 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR6 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR6 : entity is TRUE;
end X_XOR6;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR6_V of X_XOR6 is
   attribute VITAL_LEVEL1 of X_XOR6_V : architecture is TRUE;

   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I4_ipd) XOR (I5_ipd) XOR (I3_ipd) XOR (I2_ipd) XOR (I1_ipd) XOR
         (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 1 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 2 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 3 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 4 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 5 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR6_V;

configuration CFG_X_XOR6_V of X_XOR6 is
   for X_XOR6_V
   end for;
end CFG_X_XOR6_V;


----- CELL X_XOR7 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR7 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR7 : entity is TRUE;
end X_XOR7;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR7_V of X_XOR7 is
   attribute VITAL_LEVEL1 of X_XOR7_V : architecture is TRUE;

   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I5_ipd) XOR (I6_ipd) XOR (I4_ipd) XOR (I3_ipd) XOR (I2_ipd) XOR
         (I1_ipd) XOR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 1 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 2 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 3 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 4 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 5 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 6 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR7_V;

configuration CFG_X_XOR7_V of X_XOR7 is
   for X_XOR7_V
   end for;
end CFG_X_XOR7_V;


----- CELL X_XOR8 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR8 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR8 : entity is TRUE;
end X_XOR8;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR8_V of X_XOR8 is
   attribute VITAL_LEVEL1 of X_XOR8_V : architecture is TRUE;

   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I7_ipd, I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I6_ipd) XOR (I7_ipd) XOR (I5_ipd) XOR (I4_ipd) XOR (I3_ipd) XOR
         (I2_ipd) XOR (I1_ipd) XOR (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I7_ipd'last_event, tpd_I7_O, TRUE),
                 1 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 2 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 3 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 4 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 5 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 6 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 7 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR8_V;

configuration CFG_X_XOR8_V of X_XOR8 is
   for X_XOR8_V
   end for;
end CFG_X_XOR8_V;


----- CELL X_XOR16 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR16 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I15_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I14_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I13_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I12_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I11_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I10_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I9_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I8_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tipd_I15                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I14                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I13                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I12                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I11                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I10                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I9                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I8                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I15                            :	in    STD_ULOGIC;
      I14                            :	in    STD_ULOGIC;
      I13                            :	in    STD_ULOGIC;
      I12                            :	in    STD_ULOGIC;
      I11                            :	in    STD_ULOGIC;
      I10                            :	in    STD_ULOGIC;
      I9                             :	in    STD_ULOGIC;
      I8                             :	in    STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR16 : entity is TRUE;
end X_XOR16;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR16_V of X_XOR16 is
   attribute VITAL_LEVEL1 of X_XOR16_V : architecture is TRUE;

   SIGNAL I15_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I14_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I13_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I12_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I11_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I10_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I9_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I8_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I15_ipd, I15, tipd_I15);
   VitalWireDelay (I14_ipd, I14, tipd_I14);
   VitalWireDelay (I13_ipd, I13, tipd_I13);
   VitalWireDelay (I12_ipd, I12, tipd_I12);
   VitalWireDelay (I11_ipd, I11, tipd_I11);
   VitalWireDelay (I10_ipd, I10, tipd_I10);
   VitalWireDelay (I9_ipd, I9, tipd_I9);
   VitalWireDelay (I8_ipd, I8, tipd_I8);
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I15_ipd, I14_ipd, I13_ipd, I12_ipd, I11_ipd,
                            I10_ipd, I9_ipd, I8_ipd, I7_ipd, I6_ipd, I5_ipd,
                            I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
       (I14_ipd) XOR (I15_ipd) XOR (I13_ipd) XOR (I12_ipd) XOR (I11_ipd) XOR
         (I10_ipd) XOR (I9_ipd) XOR (I8_ipd) XOR (I7_ipd) XOR (I6_ipd) XOR
         (I5_ipd) XOR (I4_ipd) XOR (I3_ipd) XOR (I2_ipd) XOR (I1_ipd) XOR
         (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 => (I15_ipd'last_event, tpd_I15_O, TRUE),
                 1 => (I14_ipd'last_event, tpd_I14_O, TRUE),
                 2 => (I13_ipd'last_event, tpd_I13_O, TRUE),
                 3 => (I12_ipd'last_event, tpd_I12_O, TRUE),
                 4 => (I11_ipd'last_event, tpd_I11_O, TRUE),
                 5 => (I10_ipd'last_event, tpd_I10_O, TRUE),
                 6 => (I9_ipd'last_event, tpd_I9_O, TRUE),
                 7 => (I8_ipd'last_event, tpd_I8_O, TRUE),
                 8 => (I7_ipd'last_event, tpd_I7_O, TRUE),
                 9 => (I6_ipd'last_event, tpd_I6_O, TRUE),
                 10 => (I5_ipd'last_event, tpd_I5_O, TRUE),
                 11 => (I4_ipd'last_event, tpd_I4_O, TRUE),
                 12 => (I3_ipd'last_event, tpd_I3_O, TRUE),
                 13 => (I2_ipd'last_event, tpd_I2_O, TRUE),
                 14 => (I1_ipd'last_event, tpd_I1_O, TRUE),
                 15 => (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR16_V;

configuration CFG_X_XOR16_V of X_XOR16 is
   for X_XOR16_V
   end for;
end CFG_X_XOR16_V;


----- CELL X_XOR32 -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_XOR32 is
   generic(
      TimingChecksOn: Boolean := True;
      InstancePath: STRING := "*";
      Xon: Boolean := True;
      MsgOn: Boolean := False;
      tpd_I31_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I30_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I29_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I28_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I27_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I26_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I25_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I24_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I23_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I22_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I21_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I20_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I19_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I18_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I17_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I16_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I15_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I14_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I13_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I12_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I11_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I10_O                      :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I9_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I8_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I7_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I6_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I5_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I4_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I3_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I2_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I1_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);
      tpd_I0_O                       :	VitalDelayType01 := (0.100 ns, 0.100 ns);

      tipd_I31                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I30                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I29                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I28                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I27                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I26                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I25                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I24                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I23                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I22                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I21                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I20                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I19                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I18                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I17                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I16                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I15                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I14                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I13                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I12                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I11                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I10                       :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I9                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I8                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I7                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I6                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I5                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I4                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I3                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I2                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I1                        :	VitalDelayType01 := (0.000 ns, 0.000 ns);
      tipd_I0                        :	VitalDelayType01 := (0.000 ns, 0.000 ns));

   port(
      O                              :	out   STD_ULOGIC;
      I31                            :	in    STD_ULOGIC;
      I30                            :	in    STD_ULOGIC;
      I29                            :	in    STD_ULOGIC;
      I28                            :	in    STD_ULOGIC;
      I27                            :	in    STD_ULOGIC;
      I26                            :	in    STD_ULOGIC;
      I25                            :	in    STD_ULOGIC;
      I24                            :	in    STD_ULOGIC;
      I23                            :	in    STD_ULOGIC;
      I22                            :	in    STD_ULOGIC;
      I21                            :	in    STD_ULOGIC;
      I20                            :	in    STD_ULOGIC;
      I19                            :	in    STD_ULOGIC;
      I18                            :	in    STD_ULOGIC;
      I17                            :	in    STD_ULOGIC;
      I16                            :	in    STD_ULOGIC;
      I15                            :	in    STD_ULOGIC;
      I14                            :	in    STD_ULOGIC;
      I13                            :	in    STD_ULOGIC;
      I12                            :	in    STD_ULOGIC;
      I11                            :	in    STD_ULOGIC;
      I10                            :	in    STD_ULOGIC;
      I9                             :	in    STD_ULOGIC;
      I8                             :	in    STD_ULOGIC;
      I7                             :	in    STD_ULOGIC;
      I6                             :	in    STD_ULOGIC;
      I5                             :	in    STD_ULOGIC;
      I4                             :	in    STD_ULOGIC;
      I3                             :	in    STD_ULOGIC;
      I2                             :	in    STD_ULOGIC;
      I1                             :	in    STD_ULOGIC;
      I0                             :	in    STD_ULOGIC);
attribute VITAL_LEVEL0 of X_XOR32 : entity is TRUE;
end X_XOR32;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_XOR32_V of X_XOR32 is
   attribute VITAL_LEVEL1 of X_XOR32_V : architecture is TRUE;

   SIGNAL I31_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I30_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I29_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I28_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I27_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I26_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I25_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I24_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I23_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I22_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I21_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I20_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I19_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I18_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I17_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I16_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I15_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I14_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I13_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I12_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I11_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I10_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I9_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I8_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I7_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I6_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I5_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I4_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I3_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I2_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I1_ipd	 : STD_ULOGIC := 'X';
   SIGNAL I0_ipd	 : STD_ULOGIC := 'X';

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   VitalWireDelay (I31_ipd, I31, tipd_I31);
   VitalWireDelay (I30_ipd, I30, tipd_I30);
   VitalWireDelay (I29_ipd, I29, tipd_I29);
   VitalWireDelay (I28_ipd, I28, tipd_I28);
   VitalWireDelay (I27_ipd, I27, tipd_I27);
   VitalWireDelay (I26_ipd, I26, tipd_I26);
   VitalWireDelay (I25_ipd, I25, tipd_I25);
   VitalWireDelay (I24_ipd, I24, tipd_I24);
   VitalWireDelay (I23_ipd, I23, tipd_I23);
   VitalWireDelay (I22_ipd, I22, tipd_I22);
   VitalWireDelay (I21_ipd, I21, tipd_I21);
   VitalWireDelay (I20_ipd, I20, tipd_I20);
   VitalWireDelay (I19_ipd, I19, tipd_I19);
   VitalWireDelay (I18_ipd, I18, tipd_I18);
   VitalWireDelay (I17_ipd, I17, tipd_I17);
   VitalWireDelay (I16_ipd, I16, tipd_I16);
   VitalWireDelay (I15_ipd, I15, tipd_I15);
   VitalWireDelay (I14_ipd, I14, tipd_I14);
   VitalWireDelay (I13_ipd, I13, tipd_I13);
   VitalWireDelay (I12_ipd, I12, tipd_I12);
   VitalWireDelay (I11_ipd, I11, tipd_I11);
   VitalWireDelay (I10_ipd, I10, tipd_I10);
   VitalWireDelay (I9_ipd, I9, tipd_I9);
   VitalWireDelay (I8_ipd, I8, tipd_I8);
   VitalWireDelay (I7_ipd, I7, tipd_I7);
   VitalWireDelay (I6_ipd, I6, tipd_I6);
   VitalWireDelay (I5_ipd, I5, tipd_I5);
   VitalWireDelay (I4_ipd, I4, tipd_I4);
   VitalWireDelay (I3_ipd, I3, tipd_I3);
   VitalWireDelay (I2_ipd, I2, tipd_I2);
   VitalWireDelay (I1_ipd, I1, tipd_I1);
   VitalWireDelay (I0_ipd, I0, tipd_I0);
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   VITALBehavior : process (I31_ipd, I30_ipd, I29_ipd, I28_ipd, I27_ipd, I26_ipd, 
                            I25_ipd, I24_ipd, I23_ipd, I22_ipd, I21_ipd, I20_ipd,
                            I19_ipd, I18_ipd, I17_ipd, I16_ipd, I15_ipd, I14_ipd,
                            I13_ipd, I12_ipd, I11_ipd, I10_ipd, I9_ipd, I8_ipd, I7_ipd,
                            I6_ipd, I5_ipd, I4_ipd, I3_ipd, I2_ipd, I1_ipd, I0_ipd)


   -- functionality results
   VARIABLE Results : STD_LOGIC_VECTOR(1 to 1) := (others => 'X');
   ALIAS O_zd : STD_LOGIC is Results(1);

   -- output glitch detection variables
   VARIABLE O_GlitchData	: VitalGlitchDataType;

   begin

      -------------------------
      --  Functionality Section
      -------------------------
      O_zd :=
         (I31_ipd) XOR (I30_ipd) XOR (I29_ipd) XOR (I28_ipd) XOR (I27_ipd) XOR
         (I26_ipd) XOR (I25_ipd) XOR (I24_ipd) XOR (I23_ipd) XOR (I22_ipd) XOR
         (I21_ipd) XOR (I20_ipd) XOR (I19_ipd) XOR (I18_ipd) XOR (I17_ipd) XOR
         (I16_ipd) XOR (I15_ipd) XOR (I14_ipd) XOR (I13_ipd) XOR (I12_ipd) XOR 
         (I11_ipd) XOR (I10_ipd) XOR  (I9_ipd) XOR  (I8_ipd) XOR  (I7_ipd) XOR
          (I6_ipd) XOR  (I5_ipd) XOR  (I4_ipd) XOR  (I3_ipd) XOR  (I2_ipd) XOR
          (I1_ipd) XOR  (I0_ipd);

      ----------------------
      --  Path Delay Section
      ----------------------
      VitalPathDelay01 (
       OutSignal => O,
       GlitchData => O_GlitchData,
       OutSignalName => "O",
       OutTemp => O_zd,
       Paths => (0 =>  (I31_ipd'last_event, tpd_I31_O, TRUE),
                 1 =>  (I30_ipd'last_event, tpd_I30_O, TRUE),
                 2 =>  (I29_ipd'last_event, tpd_I29_O, TRUE),
                 3 =>  (I28_ipd'last_event, tpd_I28_O, TRUE),
                 4 =>  (I27_ipd'last_event, tpd_I27_O, TRUE),
                 5 =>  (I26_ipd'last_event, tpd_I26_O, TRUE),
                 6 =>  (I25_ipd'last_event, tpd_I25_O, TRUE),
                 7 =>  (I24_ipd'last_event, tpd_I24_O, TRUE),
                 8 =>  (I23_ipd'last_event, tpd_I23_O, TRUE),
                 9 =>  (I22_ipd'last_event, tpd_I22_O, TRUE),
                 10 => (I21_ipd'last_event, tpd_I21_O, TRUE),
                 11 => (I20_ipd'last_event, tpd_I20_O, TRUE),
                 12 => (I19_ipd'last_event, tpd_I19_O, TRUE),
                 13 => (I18_ipd'last_event, tpd_I18_O, TRUE),
                 14 => (I17_ipd'last_event, tpd_I17_O, TRUE),
                 15 => (I16_ipd'last_event, tpd_I16_O, TRUE),
                 16 => (I15_ipd'last_event, tpd_I15_O, TRUE),
                 17 => (I14_ipd'last_event, tpd_I14_O, TRUE),
                 18 => (I13_ipd'last_event, tpd_I13_O, TRUE),
                 19 => (I12_ipd'last_event, tpd_I12_O, TRUE),
                 20 => (I11_ipd'last_event, tpd_I11_O, TRUE),
                 21 => (I10_ipd'last_event, tpd_I10_O, TRUE),
                 22 =>  (I9_ipd'last_event, tpd_I9_O, TRUE),
                 23 =>  (I8_ipd'last_event, tpd_I8_O, TRUE),
                 24 =>  (I7_ipd'last_event, tpd_I7_O, TRUE),
                 25 =>  (I6_ipd'last_event, tpd_I6_O, TRUE),
                 26 =>  (I5_ipd'last_event, tpd_I5_O, TRUE),
                 27 =>  (I4_ipd'last_event, tpd_I4_O, TRUE),
                 28 =>  (I3_ipd'last_event, tpd_I3_O, TRUE),
                 29 =>  (I2_ipd'last_event, tpd_I2_O, TRUE),
                 30 =>  (I1_ipd'last_event, tpd_I1_O, TRUE),
                 31 =>  (I0_ipd'last_event, tpd_I0_O, TRUE)),
       Mode => OnEvent,
       Xon => Xon,
       MsgOn => MsgOn,
       MsgSeverity => WARNING);

end process;

end X_XOR32_V;

configuration CFG_X_XOR32_V of X_XOR32 is
   for X_XOR32_V
   end for;
end CFG_X_XOR32_V;


----- CELL X_ZERO -----
library IEEE;
use IEEE.STD_LOGIC_1164.all;
library IEEE;
use IEEE.VITAL_Timing.all;


-- entity declaration --
entity X_ZERO is
   generic(
      InstancePath: STRING := "*");

   port(
      O                              :	out   STD_ULOGIC := '0');
attribute VITAL_LEVEL0 of X_ZERO : entity is TRUE;
end X_ZERO;

-- architecture body --
library IEEE;
use IEEE.VITAL_Primitives.all;
library simprim;
use simprim.VPACKAGE.all;
architecture X_ZERO_V of X_ZERO is
   attribute VITAL_LEVEL0 of X_ZERO_V : architecture is TRUE;

begin

   ---------------------
   --  INPUT PATH DELAYs
   ---------------------
   WireDelay : block
   begin
   --  empty
   end block;
   --------------------
   --  BEHAVIOR SECTION
   --------------------
   O <= '0';

end X_ZERO_V;

configuration CFG_X_ZERO_V of X_ZERO is
   for X_ZERO_V
   end for;
end CFG_X_ZERO_V;


---- end of library ----
